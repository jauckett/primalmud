!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/darren@hiebert.com/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://darren.hiebert.com/ctags/	/official site/
!_TAG_PROGRAM_VERSION	3.4	/with C, C++, Eiffel, Fortran, and Java  support/
ACMD	act.comm.c	/^ACMD(do_gen_comm)$/;"	f
ACMD	act.comm.c	/^ACMD(do_gsay)$/;"	f
ACMD	act.comm.c	/^ACMD(do_page)$/;"	f
ACMD	act.comm.c	/^ACMD(do_qcomm)$/;"	f
ACMD	act.comm.c	/^ACMD(do_reply)$/;"	f
ACMD	act.comm.c	/^ACMD(do_say)$/;"	f
ACMD	act.comm.c	/^ACMD(do_spec_comm)$/;"	f
ACMD	act.comm.c	/^ACMD(do_tell)$/;"	f
ACMD	act.comm.c	/^ACMD(do_write)$/;"	f
ACMD	act.informative.c	/^ACMD(do_affects)$/;"	f
ACMD	act.informative.c	/^ACMD(do_clan_table)$/;"	f
ACMD	act.informative.c	/^ACMD(do_clans)$/;"	f
ACMD	act.informative.c	/^ACMD(do_color)$/;"	f
ACMD	act.informative.c	/^ACMD(do_commands)$/;"	f
ACMD	act.informative.c	/^ACMD(do_consider)$/;"	f
ACMD	act.informative.c	/^ACMD(do_diagnose)$/;"	f
ACMD	act.informative.c	/^ACMD(do_equipment)$/;"	f
ACMD	act.informative.c	/^ACMD(do_examine)$/;"	f
ACMD	act.informative.c	/^ACMD(do_exits)$/;"	f
ACMD	act.informative.c	/^ACMD(do_exp)$/;"	f
ACMD	act.informative.c	/^ACMD(do_gen_ps)$/;"	f
ACMD	act.informative.c	/^ACMD(do_gold)$/;"	f
ACMD	act.informative.c	/^ACMD(do_help)$/;"	f
ACMD	act.informative.c	/^ACMD(do_inventory)$/;"	f
ACMD	act.informative.c	/^ACMD(do_levels)$/;"	f
ACMD	act.informative.c	/^ACMD(do_look)$/;"	f
ACMD	act.informative.c	/^ACMD(do_moon)$/;"	f
ACMD	act.informative.c	/^ACMD(do_score)$/;"	f
ACMD	act.informative.c	/^ACMD(do_time)$/;"	f
ACMD	act.informative.c	/^ACMD(do_toggle)$/;"	f
ACMD	act.informative.c	/^ACMD(do_users)$/;"	f
ACMD	act.informative.c	/^ACMD(do_weather)$/;"	f
ACMD	act.informative.c	/^ACMD(do_where)$/;"	f
ACMD	act.informative.c	/^ACMD(do_who)$/;"	f
ACMD	act.movement.c	/^ACMD(do_breakin) {$/;"	f
ACMD	act.movement.c	/^ACMD(do_close)$/;"	f
ACMD	act.movement.c	/^ACMD(do_dismount) {$/;"	f
ACMD	act.movement.c	/^ACMD(do_enter)$/;"	f
ACMD	act.movement.c	/^ACMD(do_follow)$/;"	f
ACMD	act.movement.c	/^ACMD(do_go)$/;"	f
ACMD	act.movement.c	/^ACMD(do_leave)$/;"	f
ACMD	act.movement.c	/^ACMD(do_lock)$/;"	f
ACMD	act.movement.c	/^ACMD(do_mount) {$/;"	f
ACMD	act.movement.c	/^ACMD(do_move)$/;"	f
ACMD	act.movement.c	/^ACMD(do_open)$/;"	f
ACMD	act.movement.c	/^ACMD(do_pick)$/;"	f
ACMD	act.movement.c	/^ACMD(do_rest)$/;"	f
ACMD	act.movement.c	/^ACMD(do_sit)$/;"	f
ACMD	act.movement.c	/^ACMD(do_sleep)$/;"	f
ACMD	act.movement.c	/^ACMD(do_stand)$/;"	f
ACMD	act.movement.c	/^ACMD(do_unlock)$/;"	f
ACMD	act.movement.c	/^ACMD(do_wake)$/;"	f
ACMD	act.obj.c	/^ACMD(do_drink)$/;"	f
ACMD	act.obj.c	/^ACMD(do_drop)$/;"	f
ACMD	act.obj.c	/^ACMD(do_eat)$/;"	f
ACMD	act.obj.c	/^ACMD(do_get)$/;"	f
ACMD	act.obj.c	/^ACMD(do_give)$/;"	f
ACMD	act.obj.c	/^ACMD(do_grab)$/;"	f
ACMD	act.obj.c	/^ACMD(do_pour)$/;"	f
ACMD	act.obj.c	/^ACMD(do_put)$/;"	f
ACMD	act.obj.c	/^ACMD(do_remove)$/;"	f
ACMD	act.obj.c	/^ACMD(do_wear)$/;"	f
ACMD	act.obj.c	/^ACMD(do_wield)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_assist)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_backstab)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_bash)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_flee)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_hit)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_kick)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_kill)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_loadweapon)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_order)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_rescue)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_retreat)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_scan)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_scream)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_shoot)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_slay)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_throw)$/;"	f
ACMD	act.other.c	/^ACMD(do_autoassist) $/;"	f
ACMD	act.other.c	/^ACMD(do_banish)$/;"	f
ACMD	act.other.c	/^ACMD(do_change)$/;"	f
ACMD	act.other.c	/^ACMD(do_charge)$/;"	f
ACMD	act.other.c	/^ACMD(do_compare)$/;"	f
ACMD	act.other.c	/^ACMD(do_demote)$/;"	f
ACMD	act.other.c	/^ACMD(do_display)$/;"	f
ACMD	act.other.c	/^ACMD(do_fastrent)$/;"	f
ACMD	act.other.c	/^ACMD(do_gen_tog)$/;"	f
ACMD	act.other.c	/^ACMD(do_gen_write)$/;"	f
ACMD	act.other.c	/^ACMD(do_group)$/;"	f
ACMD	act.other.c	/^ACMD(do_hide)$/;"	f
ACMD	act.other.c	/^ACMD(do_ignore)$/;"	f
ACMD	act.other.c	/^ACMD(do_join)$/;"	f
ACMD	act.other.c	/^ACMD(do_knight)$/;"	f
ACMD	act.other.c	/^ACMD(do_lag) {$/;"	f
ACMD	act.other.c	/^ACMD(do_mortal_kombat)$/;"	f
ACMD	act.other.c	/^ACMD(do_not_here)$/;"	f
ACMD	act.other.c	/^ACMD(do_practice)$/;"	f
ACMD	act.other.c	/^ACMD(do_promote)$/;"	f
ACMD	act.other.c	/^ACMD(do_quit)$/;"	f
ACMD	act.other.c	/^ACMD(do_reallyquit)$/;"	f
ACMD	act.other.c	/^ACMD(do_realtime)$/;"	f
ACMD	act.other.c	/^ACMD(do_recruit)$/;"	f
ACMD	act.other.c	/^ACMD(do_report)$/;"	f
ACMD	act.other.c	/^ACMD(do_save)$/;"	f
ACMD	act.other.c	/^ACMD(do_signup)$/;"	f
ACMD	act.other.c	/^ACMD(do_sneak)$/;"	f
ACMD	act.other.c	/^ACMD(do_split)$/;"	f
ACMD	act.other.c	/^ACMD(do_spy)$/;"	f
ACMD	act.other.c	/^ACMD(do_steal)$/;"	f
ACMD	act.other.c	/^ACMD(do_tag)$/;"	f
ACMD	act.other.c	/^ACMD(do_title)$/;"	f
ACMD	act.other.c	/^ACMD(do_ungroup)$/;"	f
ACMD	act.other.c	/^ACMD(do_use)$/;"	f
ACMD	act.other.c	/^ACMD(do_visible)$/;"	f
ACMD	act.other.c	/^ACMD(do_wimpy)$/;"	f
ACMD	act.social.c	/^ACMD(do_action)$/;"	f
ACMD	act.social.c	/^ACMD(do_insult)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_advance)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_at)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_date)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_dc)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_deimmort)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_echo)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_force)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_gecho)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_goto)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_immort)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_invis)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_last)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_laston)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_load)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_pinch)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_pkset)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_poofset)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_purge)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_questoff)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_queston)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_restore)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_return)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_send)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_set)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_sethelp)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_show)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_shutdown)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_skillshow)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_snoop)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_stat)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_switch)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_syslog)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_teleport)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_tic)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_trans)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_vnum)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_vstat)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_wizlock)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_wiznet)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_wizutil)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_zreset)$/;"	f
ACMD	ban.c	/^ACMD(do_ban)$/;"	f
ACMD	ban.c	/^ACMD(do_unban)$/;"	f
ACMD	casino.c	/^ACMD(do_blackjack) {$/;"	f
ACMD	casino.c	/^ACMD(do_race) {$/;"	f
ACMD	casino.c	/^ACMD(do_slots) {$/;"	f
ACMD	db.c	/^ACMD(do_reboot)$/;"	f
ACMD	graph.c	/^ACMD(do_track)$/;"	f
ACMD	house.c	/^ACMD (do_hcontrol)$/;"	f
ACMD	house.c	/^ACMD (do_house)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole1)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole10)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole11)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole12)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole13)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole2)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole3)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole4)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole5)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole6)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole7)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole8)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole9)$/;"	f
ACMD	iedit.c	/^ACMD(do_ole_quit)$/;"	f
ACMD	interpreter.c	/^ACMD(do_alias)$/;"	f
ACMD	interpreter.h	11;"	d
ACMD	modify.c	/^ACMD(do_skillset)$/;"	f
ACMD	spell_parser.c	/^ACMD(do_cast)$/;"	f
ACTNULL	comm.c	/^char *ACTNULL = "<NULL>";$/;"	v
AFF_ADVANCED_INVIS	struct.h	272;"	d
AFF_ADVANCED_INVIS	structs.h	283;"	d
AFF_BLIND	struct.h	248;"	d
AFF_BLIND	structs.h	259;"	d
AFF_BROKEN_IN	structs.h	286;"	d
AFF_CHARM	struct.h	269;"	d
AFF_CHARM	structs.h	280;"	d
AFF_CURSE	struct.h	257;"	d
AFF_CURSE	structs.h	268;"	d
AFF_DETECT_ADVANCED	struct.h	273;"	d
AFF_DETECT_ADVANCED	structs.h	284;"	d
AFF_DETECT_ALIGN	struct.h	250;"	d
AFF_DETECT_ALIGN	structs.h	261;"	d
AFF_DETECT_INVIS	struct.h	251;"	d
AFF_DETECT_INVIS	structs.h	262;"	d
AFF_DETECT_MAGIC	struct.h	252;"	d
AFF_DETECT_MAGIC	structs.h	263;"	d
AFF_FLAGGED	utils.h	191;"	d
AFF_FLAGS	utils.h	177;"	d
AFF_FLY	struct.h	265;"	d
AFF_FLY	structs.h	276;"	d
AFF_GROUP	struct.h	256;"	d
AFF_GROUP	structs.h	267;"	d
AFF_HASTE	struct.h	271;"	d
AFF_HASTE	structs.h	282;"	d
AFF_HIDE	struct.h	267;"	d
AFF_HIDE	structs.h	278;"	d
AFF_INFRAVISION	struct.h	258;"	d
AFF_INFRAVISION	structs.h	269;"	d
AFF_INVISIBLE	struct.h	249;"	d
AFF_INVISIBLE	structs.h	260;"	d
AFF_NOHASSLE	structs.h	285;"	d
AFF_NOTRACK	struct.h	263;"	d
AFF_NOTRACK	structs.h	274;"	d
AFF_PARALYZED	struct.h	268;"	d
AFF_PARALYZED	structs.h	279;"	d
AFF_POISON	struct.h	259;"	d
AFF_POISON	structs.h	270;"	d
AFF_PROTECT_EVIL	struct.h	260;"	d
AFF_PROTECT_EVIL	structs.h	271;"	d
AFF_PROTECT_GOOD	struct.h	261;"	d
AFF_PROTECT_GOOD	structs.h	272;"	d
AFF_REFLECT	struct.h	264;"	d
AFF_REFLECT	structs.h	275;"	d
AFF_SANCTUARY	struct.h	255;"	d
AFF_SANCTUARY	structs.h	266;"	d
AFF_SENSE_LIFE	struct.h	253;"	d
AFF_SENSE_LIFE	structs.h	264;"	d
AFF_SLEEP	struct.h	262;"	d
AFF_SLEEP	structs.h	273;"	d
AFF_SNEAK	struct.h	266;"	d
AFF_SNEAK	structs.h	277;"	d
AFF_WATERBREATHE	struct.h	270;"	d
AFF_WATERBREATHE	structs.h	281;"	d
AFF_WATERWALK	struct.h	254;"	d
AFF_WATERWALK	structs.h	265;"	d
ALIAS_COMPLEX	interpreter.h	60;"	d
ALIAS_DIRNAME	config.c	/^char *ALIAS_DIRNAME = "alias\/";$/;"	v
ALIAS_GLOB_CHAR	interpreter.h	64;"	d
ALIAS_SEP_CHAR	interpreter.h	62;"	d
ALIAS_SIMPLE	interpreter.h	59;"	d
ALIAS_VAR_CHAR	interpreter.h	63;"	d
ALIGN_SIZE	memdbg.c	92;"	d	file:
AN	utils.h	132;"	d
ANA	utils.h	395;"	d
APPLY_AC	struct.h	450;"	d
APPLY_AC	structs.h	476;"	d
APPLY_AGE	struct.h	442;"	d
APPLY_AGE	structs.h	468;"	d
APPLY_CHA	struct.h	438;"	d
APPLY_CHA	structs.h	465;"	d
APPLY_CHAR_HEIGHT	struct.h	444;"	d
APPLY_CHAR_HEIGHT	structs.h	470;"	d
APPLY_CHAR_WEIGHT	struct.h	443;"	d
APPLY_CHAR_WEIGHT	structs.h	469;"	d
APPLY_CLASS	struct.h	439;"	d
APPLY_CLASS	structs.h	466;"	d
APPLY_CON	struct.h	437;"	d
APPLY_CON	structs.h	464;"	d
APPLY_DAMROLL	struct.h	452;"	d
APPLY_DAMROLL	structs.h	478;"	d
APPLY_DEX	struct.h	434;"	d
APPLY_DEX	structs.h	461;"	d
APPLY_EXP	struct.h	449;"	d
APPLY_EXP	structs.h	475;"	d
APPLY_GOLD	struct.h	448;"	d
APPLY_GOLD	structs.h	474;"	d
APPLY_HIT	struct.h	446;"	d
APPLY_HIT	structs.h	472;"	d
APPLY_HITROLL	struct.h	451;"	d
APPLY_HITROLL	structs.h	477;"	d
APPLY_INT	struct.h	435;"	d
APPLY_INT	structs.h	462;"	d
APPLY_LEVEL	struct.h	441;"	d
APPLY_LEVEL	structs.h	467;"	d
APPLY_MANA	struct.h	445;"	d
APPLY_MANA	structs.h	471;"	d
APPLY_MOVE	struct.h	447;"	d
APPLY_MOVE	structs.h	473;"	d
APPLY_NONE	struct.h	432;"	d
APPLY_NONE	structs.h	459;"	d
APPLY_SAVING_BREATH	struct.h	456;"	d
APPLY_SAVING_BREATH	structs.h	482;"	d
APPLY_SAVING_PARA	struct.h	453;"	d
APPLY_SAVING_PARA	structs.h	479;"	d
APPLY_SAVING_PETRI	struct.h	455;"	d
APPLY_SAVING_PETRI	structs.h	481;"	d
APPLY_SAVING_ROD	struct.h	454;"	d
APPLY_SAVING_ROD	structs.h	480;"	d
APPLY_SAVING_SPELL	struct.h	457;"	d
APPLY_SAVING_SPELL	structs.h	483;"	d
APPLY_STR	struct.h	433;"	d
APPLY_STR	structs.h	460;"	d
APPLY_WIS	struct.h	436;"	d
APPLY_WIS	structs.h	463;"	d
AREA_FILE	db.h	39;"	d
ASPELL	spells.c	/^ASPELL(spell_charm)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_control_weather)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_create_water)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_enchant_weapon)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_fear)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_fingerdeath)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_gate)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_identify)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_locate_object)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_recall)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_summon)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_teleport)$/;"	f
ASPELL	spells.h	261;"	d
ASSIGNMOB	spec_assign.c	/^void ASSIGNMOB(int mob, SPECIAL(fname))$/;"	f
ASSIGNOBJ	spec_assign.c	/^void ASSIGNOBJ(int obj, SPECIAL(fname))$/;"	f
ASSIGNROOM	spec_assign.c	/^void ASSIGNROOM(int room, SPECIAL(fname))$/;"	f
ATMOSPHERE	act.movement.c	56;"	d	file:
AUTOASSIST	utils.h	286;"	d
AUTOASSISTED	utils.h	287;"	d
AWAKE	utils.h	342;"	d
Alias_delete_file	objsave.c	/^int Alias_delete_file(char *name)$/;"	f
BACKGROUND_FILE	db.h	36;"	d
BANNED_SITE_LENGTH	db.h	175;"	d
BAN_ALL	db.h	173;"	d
BAN_FILE	db.h	52;"	d
BAN_NEW	db.h	171;"	d
BAN_NOT	db.h	170;"	d
BAN_SELECT	db.h	172;"	d
BASE_GUN_TYPE	utils.h	587;"	d
BASE_PROTECT_GEAR	struct.h	326;"	d
BASE_PROTECT_GEAR	structs.h	337;"	d
BASE_SECT	act.comm.c	58;"	d	file:
BASE_SECT	act.movement.c	54;"	d	file:
BASE_SECT	interpreter.c	774;"	d	file:
BASE_SECT	limits.c	30;"	d	file:
BASE_SECT	spec_procs.c	28;"	d	file:
BATTERY_MANA	act.other.c	29;"	d	file:
BBLK	color.h	12;"	d
BBLU	color.h	16;"	d
BCYN	color.h	18;"	d
BFS_ALREADY_THERE	utils.h	103;"	d
BFS_ERROR	utils.h	102;"	d
BFS_NO_PATH	utils.h	104;"	d
BGRN	color.h	14;"	d
BINARY	act.wizard.c	2670;"	d	file:
BJ_HAS_SPLIT	casino.h	9;"	d
BJ_INSURANCE	casino.h	10;"	d
BJ_NO_CODES	casino.h	8;"	d
BKBLK	color.h	21;"	d
BKBLU	color.h	25;"	d
BKCYN	color.h	27;"	d
BKGRN	color.h	23;"	d
BKMAG	color.h	26;"	d
BKRED	color.h	22;"	d
BKWHT	color.h	28;"	d
BKYEL	color.h	24;"	d
BLADES_VNUM	spec_procs.c	4605;"	d	file:
BLOCK_SIZE	mail.h	29;"	d
BMAG	color.h	17;"	d
BOARD_MAGIC	boards.h	17;"	d
BOARD_RNUM	boards.h	41;"	d
BOARD_VNUM	boards.h	36;"	d
BOTH	act.wizard.c	2667;"	d	file:
BRED	color.h	13;"	d
BRF	utils.h	93;"	d
BUG_FILE	db.h	43;"	d
BUY_TYPE	shop.h	7;"	d
BUY_WORD	shop.h	8;"	d
BWHT	color.h	19;"	d
BYEL	color.h	15;"	d
Board_display_msg	boards.c	/^int Board_display_msg(int board_type, struct char_data * ch, char *arg)$/;"	f
Board_load_board	boards.c	/^void Board_load_board(int board_type)$/;"	f
Board_remove_msg	boards.c	/^int Board_remove_msg(int board_type, struct char_data * ch, char *arg)$/;"	f
Board_reset_board	boards.c	/^void Board_reset_board(int board_type)$/;"	f
Board_save_board	boards.c	/^void Board_save_board(int board_type)$/;"	f
Board_show_board	boards.c	/^int Board_show_board(int board_type, struct char_data * ch, char *arg)$/;"	f
Board_write_message	boards.c	/^void Board_write_message(int board_type, struct char_data * ch, char *arg)$/;"	f
CAMP	color.h	30;"	d
CAN_CARRY_N	utils.h	341;"	d
CAN_CARRY_OBJ	utils.h	437;"	d
CAN_CARRY_W	utils.h	340;"	d
CAN_GET_OBJ	utils.h	441;"	d
CAN_GO	utils.h	457;"	d
CAN_SEE	utils.h	423;"	d
CAN_SEE_IN_DARK	utils.h	343;"	d
CAN_SEE_OBJ	utils.h	434;"	d
CAN_WEAR	utils.h	383;"	d
CAP	utils.h	130;"	d
CARD_ACE	casino.h	14;"	d
CARD_CONV_ACE	casino.h	13;"	d
CARD_EIGHT	casino.h	20;"	d
CARD_FIVE	casino.h	23;"	d
CARD_FOUR	casino.h	24;"	d
CARD_JACK	casino.h	17;"	d
CARD_KING	casino.h	15;"	d
CARD_NINE	casino.h	19;"	d
CARD_NONE	casino.h	27;"	d
CARD_QUEEN	casino.h	16;"	d
CARD_SEVEN	casino.h	21;"	d
CARD_SIX	casino.h	22;"	d
CARD_TEN	casino.h	18;"	d
CARD_THREE	casino.h	25;"	d
CARD_TWO	casino.h	26;"	d
CASTLE_ITEM	castle.c	54;"	d	file:
CAST_MAGIC_OBJ	spells.h	20;"	d
CAST_POTION	spells.h	16;"	d
CAST_SCROLL	spells.h	19;"	d
CAST_SPELL	spells.h	15;"	d
CAST_STAFF	spells.h	18;"	d
CAST_UNDEFINED	spells.h	14;"	d
CAST_WAND	spells.h	17;"	d
CBACK	db.c	2444;"	d	file:
CBLADE	db.c	2445;"	d	file:
CBLADEI	db.c	2446;"	d	file:
CBLK	color.h	2;"	d
CBLU	color.h	6;"	d
CCACT	act.informative.c	784;"	d	file:
CCBBLU	screen.h	51;"	d
CCBCYN	screen.h	53;"	d
CCBGRN	screen.h	49;"	d
CCBGRY	screen.h	47;"	d
CCBLU	screen.h	42;"	d
CCBMAG	screen.h	52;"	d
CCBRED	screen.h	48;"	d
CCBWHT	screen.h	54;"	d
CCBYEL	screen.h	50;"	d
CCCYN	screen.h	44;"	d
CCDH	act.informative.c	783;"	d	file:
CCEXP	screen.h	76;"	d
CCGAIN	act.informative.c	785;"	d	file:
CCGOLD	screen.h	77;"	d
CCGRN	screen.h	40;"	d
CCHEAD	act.informative.c	776;"	d	file:
CCMAG	screen.h	43;"	d
CCNAME	act.informative.c	780;"	d	file:
CCNRM	screen.h	38;"	d
CCNUMB	act.informative.c	778;"	d	file:
CCRED	screen.h	39;"	d
CCSEP	act.informative.c	781;"	d	file:
CCSTAR	act.informative.c	775;"	d	file:
CCSTAT	act.informative.c	782;"	d	file:
CCSUB	act.informative.c	777;"	d	file:
CCTEXT	act.informative.c	779;"	d	file:
CCWHT	screen.h	45;"	d
CCYEL	screen.h	41;"	d
CCYN	color.h	8;"	d
CFSH	color.h	34;"	d
CGRN	color.h	4;"	d
CHANDB	db.c	2448;"	d	file:
CHANDG	db.c	2449;"	d	file:
CHANDO	db.c	2447;"	d	file:
CHECK_NULL	comm.c	1503;"	d	file:
CHECK_WAIT	utils.h	359;"	d
CLAN_AVENGERS	spec_procs.c	33;"	d	file:
CLAN_FILE	db.h	47;"	d
CLAN_GUARDIAN	spec_procs.c	34;"	d	file:
CLAN_JEDI	spec_procs.c	35;"	d	file:
CLAN_NUM	struct.h	47;"	d
CLAN_NUM	structs.h	52;"	d
CLAN_ROSE_CLUB	spec_procs.c	32;"	d	file:
CLAN_TABLE_ALL	act.informative.c	2726;"	d	file:
CLAN_TABLE_LEADER	act.informative.c	2727;"	d	file:
CLAN_USS	spec_procs.c	36;"	d	file:
CLASS_ABBR	utils.h	462;"	d
CLASS_ANIMAL	struct.h	138;"	d
CLASS_ANIMAL	structs.h	145;"	d
CLASS_CHANGLING	struct.h	118;"	d
CLASS_CHANGLING	structs.h	125;"	d
CLASS_DEVA	struct.h	115;"	d
CLASS_DEVA	structs.h	122;"	d
CLASS_DRAGON	struct.h	139;"	d
CLASS_DRAGON	structs.h	146;"	d
CLASS_DWARF	struct.h	122;"	d
CLASS_DWARF	structs.h	129;"	d
CLASS_ELF	struct.h	117;"	d
CLASS_ELF	structs.h	124;"	d
CLASS_GIANT	struct.h	140;"	d
CLASS_GIANT	structs.h	147;"	d
CLASS_GNOME	struct.h	123;"	d
CLASS_GNOME	structs.h	130;"	d
CLASS_HARUCHAI	struct.h	116;"	d
CLASS_HARUCHAI	structs.h	123;"	d
CLASS_HUMAN	struct.h	119;"	d
CLASS_HUMAN	structs.h	126;"	d
CLASS_HUMANOID	struct.h	137;"	d
CLASS_HUMANOID	structs.h	144;"	d
CLASS_KENDA	struct.h	124;"	d
CLASS_KENDA	structs.h	131;"	d
CLASS_KOBOLD	struct.h	121;"	d
CLASS_KOBOLD	structs.h	128;"	d
CLASS_OGRE	struct.h	114;"	d
CLASS_OGRE	structs.h	121;"	d
CLASS_ORC	struct.h	120;"	d
CLASS_ORC	structs.h	127;"	d
CLASS_OTHER	struct.h	135;"	d
CLASS_OTHER	structs.h	142;"	d
CLASS_PIXIE	struct.h	125;"	d
CLASS_PIXIE	structs.h	132;"	d
CLASS_UNDEAD	struct.h	136;"	d
CLASS_UNDEAD	structs.h	143;"	d
CLASS_UNDEFINED	struct.h	113;"	d
CLASS_UNDEFINED	structs.h	120;"	d
CLIENT_2_HDR	memdbg.c	99;"	d	file:
CMAG	color.h	7;"	d
CMDCOL	db.c	2460;"	d	file:
CMD_IS	interpreter.h	15;"	d
CMD_LOOK	boards.c	/^int CMD_READ, CMD_LOOK, CMD_WRITE, CMD_REMOVE;$/;"	v
CMD_NAME	interpreter.h	14;"	d
CMD_READ	boards.c	/^int CMD_READ, CMD_LOOK, CMD_WRITE, CMD_REMOVE;$/;"	v
CMD_REMOVE	boards.c	/^int CMD_READ, CMD_LOOK, CMD_WRITE, CMD_REMOVE;$/;"	v
CMD_WRITE	boards.c	/^int CMD_READ, CMD_LOOK, CMD_WRITE, CMD_REMOVE;$/;"	v
CMMCOL	db.c	2458;"	d	file:
CMP	utils.h	95;"	d
CMUCOL	db.c	2459;"	d	file:
CNRM	color.h	1;"	d
CNUL	color.h	10;"	d
COLOR_LEV	screen.h	56;"	d
COLOURLIST	color.c	/^const char *COLOURLIST[] = {CNRM, CRED, CGRN, CYEL, CBLU, CMAG, CCYN, CWHT,$/;"	v
CONT_CLOSEABLE	struct.h	460;"	d
CONT_CLOSEABLE	structs.h	486;"	d
CONT_CLOSED	struct.h	462;"	d
CONT_CLOSED	structs.h	488;"	d
CONT_LOCKED	struct.h	463;"	d
CONT_LOCKED	structs.h	489;"	d
CONT_PICKPROOF	struct.h	461;"	d
CONT_PICKPROOF	structs.h	487;"	d
CON_CHPWD_GETNEW	struct.h	290;"	d
CON_CHPWD_GETNEW	structs.h	303;"	d
CON_CHPWD_GETOLD	struct.h	289;"	d
CON_CHPWD_GETOLD	structs.h	302;"	d
CON_CHPWD_VRFY	struct.h	291;"	d
CON_CHPWD_VRFY	structs.h	304;"	d
CON_CLOSE	struct.h	277;"	d
CON_CLOSE	structs.h	290;"	d
CON_CNFPASSWD	struct.h	282;"	d
CON_CNFPASSWD	structs.h	295;"	d
CON_DELCNF1	struct.h	292;"	d
CON_DELCNF1	structs.h	305;"	d
CON_DELCNF2	struct.h	293;"	d
CON_DELCNF2	structs.h	306;"	d
CON_EXDESC	struct.h	288;"	d
CON_EXDESC	structs.h	301;"	d
CON_GET_NAME	struct.h	278;"	d
CON_GET_NAME	structs.h	291;"	d
CON_MENU	struct.h	287;"	d
CON_MENU	structs.h	300;"	d
CON_NAME_CNFRM	struct.h	279;"	d
CON_NAME_CNFRM	structs.h	292;"	d
CON_NEWPASSWD	struct.h	281;"	d
CON_NEWPASSWD	structs.h	294;"	d
CON_OLE	struct.h	295;"	d
CON_OLE	structs.h	308;"	d
CON_PASSWORD	struct.h	280;"	d
CON_PASSWORD	structs.h	293;"	d
CON_PLAYING	struct.h	276;"	d
CON_PLAYING	structs.h	289;"	d
CON_QCLASS	struct.h	284;"	d
CON_QCLASS	structs.h	297;"	d
CON_QRACE	struct.h	294;"	d
CON_QRACE	structs.h	307;"	d
CON_QSEX	struct.h	283;"	d
CON_QSEX	structs.h	296;"	d
CON_QSTAT	struct.h	285;"	d
CON_QSTAT	structs.h	298;"	d
CON_RMOTD	struct.h	286;"	d
CON_RMOTD	structs.h	299;"	d
COST_PER_PRAC	spec_procs.c	141;"	d	file:
CPACOL	db.c	2456;"	d	file:
CPICOL	db.c	2454;"	d	file:
CPLCOL	db.c	2457;"	d	file:
CPMCOL	db.c	2455;"	d	file:
CPPCOL	db.c	2452;"	d	file:
CPRCOL	db.c	2453;"	d	file:
CRASH_FILE	utils.h	98;"	d
CREATE	utils.h	138;"	d
CRED	color.h	3;"	d
CREDITS_FILE	db.h	27;"	d
CRVS	color.h	37;"	d
CRYPT	utils.h	581;"	d
CRYPT	utils.h	583;"	d
CSLH	color.h	31;"	d
CSTAR	db.c	2450;"	d	file:
CUDL	color.h	33;"	d
CWHT	color.h	9;"	d
CYEL	color.h	5;"	d
C_CMP	screen.h	34;"	d
C_MOB_SPEC	castle.c	48;"	d	file:
C_NRM	screen.h	33;"	d
C_OFF	screen.h	31;"	d
C_SPR	screen.h	32;"	d
CastleGuard	castle.c	/^SPECIAL(CastleGuard);$/;"	v
Crash_calculate_rent	objsave.c	/^void Crash_calculate_rent(struct obj_data * obj, int *cost)$/;"	f
Crash_clean_file	objsave.c	/^int Crash_clean_file(char *name)$/;"	f
Crash_crashsave	objsave.c	/^void Crash_crashsave(struct char_data * ch)$/;"	f
Crash_delete_crashfile	objsave.c	/^int Crash_delete_crashfile(struct char_data * ch)$/;"	f
Crash_delete_file	objsave.c	/^int Crash_delete_file(char *name)$/;"	f
Crash_extract_expensive	objsave.c	/^void Crash_extract_expensive(struct obj_data * obj)$/;"	f
Crash_extract_norents	objsave.c	/^void Crash_extract_norents(struct obj_data * obj)$/;"	f
Crash_extract_objs	objsave.c	/^void Crash_extract_objs(struct obj_data * obj)$/;"	f
Crash_idlesave	objsave.c	/^ void Crash_idlesave(struct char_data * ch)$/;"	f
Crash_is_unrentable	objsave.c	/^int Crash_is_unrentable(struct obj_data * obj)$/;"	f
Crash_listrent	objsave.c	/^void Crash_listrent(struct char_data * ch, char *name)$/;"	f
Crash_load	objsave.c	/^int Crash_load(struct char_data * ch)$/;"	f
Crash_offer_rent	objsave.c	/^int Crash_offer_rent(struct char_data * ch, struct char_data * receptionist,$/;"	f
Crash_rent_deadline	objsave.c	/^void Crash_rent_deadline(struct char_data * ch, struct char_data * recep,$/;"	f
Crash_rentsave	objsave.c	/^void Crash_rentsave(struct char_data * ch, int cost)$/;"	f
Crash_report_rent	objsave.c	/^void Crash_report_rent(struct char_data * ch, struct char_data * recep,$/;"	f
Crash_report_unrentables	objsave.c	/^int Crash_report_unrentables(struct char_data * ch, struct char_data * recep,$/;"	f
Crash_restore_weight	objsave.c	/^void Crash_restore_weight(struct obj_data * obj)$/;"	f
Crash_save	objsave.c	/^int Crash_save(struct obj_data * obj, FILE * fp)$/;"	f
Crash_save_all	objsave.c	/^void Crash_save_all(void)$/;"	f
Crash_shopload	objsave.c	/^void Crash_shopload(struct char_data *ch,int shopnum)$/;"	f
Crash_shopsave	objsave.c	/^void Crash_shopsave(struct char_data *ch,int shopnum)$/;"	f
Crash_write_rentcode	objsave.c	/^int Crash_write_rentcode(FILE * fl, struct rent_info * rent)$/;"	f
DATA_BLOCK_DATASIZE	mail.h	75;"	d
DB_BOOT_MOB	db.h	13;"	d
DB_BOOT_OBJ	db.h	14;"	d
DB_BOOT_SHP	db.h	16;"	d
DB_BOOT_WLD	db.h	12;"	d
DB_BOOT_ZON	db.h	15;"	d
DEBUG	debug.h	26;"	d
DECLARE_GAME	casino.h	5;"	d
DEFAULT_ROOM_DESCRIPTION	edit.h	35;"	d
DEFAULT_ROOM_NAME	edit.h	34;"	d
DEFAULT_STAFF_LVL	spells.h	11;"	d
DEFAULT_WAND_LVL	spells.h	12;"	d
DELETED_BLOCK	mail.h	55;"	d
DFLT_DIR	config.c	/^char *DFLT_DIR = "lib";$/;"	v
DFLT_PORT	config.c	/^int DFLT_PORT = 4000;$/;"	v
DIRECTION_MENU	edit.h	/^static char *DIRECTION_MENU =     $/;"	v
DOWN	struct.h	43;"	d
DOWN	structs.h	48;"	d
DRUNK	struct.h	520;"	d
DRUNK	structs.h	544;"	d
DRUNKNESS	act.comm.c	56;"	d	file:
DebugClose	debug.c	/^void DebugClose()$/;"	f
DebugInit	debug.c	/^void DebugInit(char *fname)         $/;"	f
DebugInitialised	debug.c	/^static int DebugInitialised = 0;                          $/;"	v	file:
DicknDavid	castle.c	/^SPECIAL(DicknDavid);$/;"	v
EAST	struct.h	39;"	d
EAST	structs.h	44;"	d
EB_BUN	spec_procs.c	5048;"	d	file:
EB_EGG	spec_procs.c	5047;"	d	file:
EM_DFLAG	edit.h	10;"	d
EM_EXITS	edit.h	8;"	d
EM_EXIT_DESC	edit.h	9;"	d
EM_EXTRA_DESC	edit.h	13;"	d
EM_HELP	edit.h	14;"	d
EM_KEY	edit.h	12;"	d
EM_MENU	edit.h	16;"	d
EM_QUIT	edit.h	15;"	d
EM_RFLAG	edit.h	5;"	d
EM_ROOM_DESC	edit.h	7;"	d
EM_SECT	edit.h	4;"	d
EM_TITLE	edit.h	6;"	d
EM_TO_ROOM	edit.h	11;"	d
EM_VNUM	edit.h	2;"	d
EM_ZONE	edit.h	3;"	d
END_GAME	casino.h	3;"	d
END_OF	shop.h	46;"	d
ENTRY_ROOM	utils.h	220;"	d
ENVIRON	act.movement.c	59;"	d	file:
ETEXT_FILE	utils.h	99;"	d
EXDSCR_LENGTH	struct.h	613;"	d
EXDSCR_LENGTH	structs.h	649;"	d
EXIT	utils.h	455;"	d
EXITN	spec_procs.c	4063;"	d	file:
EXT_AUTOGOLD	structs.h	253;"	d
EXT_AUTOLOOT	structs.h	254;"	d
EXT_AUTOSPLIT	structs.h	255;"	d
EXT_CLAN	struct.h	242;"	d
EXT_CLAN	structs.h	250;"	d
EXT_FLAGGED	utils.h	193;"	d
EXT_FLAGS	utils.h	178;"	d
EXT_LEADER	struct.h	244;"	d
EXT_LEADER	structs.h	252;"	d
EXT_NOCTALK	struct.h	241;"	d
EXT_NOCTALK	structs.h	249;"	d
EXT_NONEWBIE	struct.h	240;"	d
EXT_NONEWBIE	structs.h	248;"	d
EXT_SUBLEADER	struct.h	243;"	d
EXT_SUBLEADER	structs.h	251;"	d
EXT_TOG_CHK	utils.h	201;"	d
EX_CLOSED	struct.h	91;"	d
EX_CLOSED	structs.h	96;"	d
EX_ISDOOR	struct.h	90;"	d
EX_ISDOOR	structs.h	95;"	d
EX_LOCKED	struct.h	92;"	d
EX_LOCKED	structs.h	97;"	d
EX_PICKPROOF	struct.h	93;"	d
EX_PICKPROOF	structs.h	98;"	d
FALSE	config.c	20;"	d	file:
FALSE	edit.h	27;"	d
FALSE	utils.h	485;"	d
FIGHTING	utils.h	277;"	d
FILENAME	boards.h	40;"	d
FILE_TERM	struct.h	53;"	d
FILE_TERM	structs.h	58;"	d
FIND_ALL	handler.h	81;"	d
FIND_ALLDOT	handler.h	82;"	d
FIND_CHAR_ROOM	handler.h	90;"	d
FIND_CHAR_WORLD	handler.h	91;"	d
FIND_INDIV	handler.h	80;"	d
FIND_OBJ_EQUIP	handler.h	95;"	d
FIND_OBJ_INV	handler.h	92;"	d
FIND_OBJ_ROOM	handler.h	93;"	d
FIND_OBJ_WORLD	handler.h	94;"	d
FORMAT_INDENT	structs.h	27;"	d
FULL	struct.h	521;"	d
FULL	structs.h	545;"	d
GARBAGE_SPACE	struct.h	603;"	d
GARBAGE_SPACE	structs.h	639;"	d
GET_AC	utils.h	261;"	d
GET_AFF_ADD	utils.h	253;"	d
GET_AFF_CHA	utils.h	258;"	d
GET_AFF_CON	utils.h	257;"	d
GET_AFF_DEX	utils.h	254;"	d
GET_AFF_INT	utils.h	255;"	d
GET_AFF_STR	utils.h	252;"	d
GET_AFF_WIS	utils.h	256;"	d
GET_AGE	utils.h	223;"	d
GET_ALIASES	utils.h	302;"	d
GET_ALIGNMENT	utils.h	282;"	d
GET_BAD_PWS	utils.h	296;"	d
GET_BANK_GOLD	utils.h	269;"	d
GET_CHAR_WAIT	utils.h	304;"	d
GET_CLAN_LEV	utils.h	311;"	d
GET_CLAN_NUM	utils.h	310;"	d
GET_CLASS	utils.h	238;"	d
GET_COND	utils.h	289;"	d
GET_DAMROLL	utils.h	271;"	d
GET_DEFAULT_POS	utils.h	322;"	d
GET_EQ	utils.h	361;"	d
GET_EXP	utils.h	260;"	d
GET_FIELD	edit.h	45;"	d
GET_FREEZE_LEV	utils.h	295;"	d
GET_GOLD	utils.h	268;"	d
GET_HEIGHT	utils.h	240;"	d
GET_HIT	utils.h	262;"	d
GET_HITROLL	utils.h	270;"	d
GET_HOME	utils.h	239;"	d
GET_IDNUM	utils.h	274;"	d
GET_IGN1	utils.h	305;"	d
GET_IGN2	utils.h	306;"	d
GET_IGN3	utils.h	307;"	d
GET_IGN_LEVEL	utils.h	308;"	d
GET_IGN_NUM	utils.h	309;"	d
GET_INPUT_STR	edit.h	40;"	d
GET_INVIS_LEV	utils.h	292;"	d
GET_INVIS_TYPE	utils.h	293;"	d
GET_LAST_OLC_MODE	utils.h	301;"	d
GET_LAST_OLC_TARG	utils.h	300;"	d
GET_LAST_TELL	utils.h	303;"	d
GET_LEVEL	utils.h	228;"	d
GET_LOADROOM	utils.h	290;"	d
GET_MANA	utils.h	266;"	d
GET_MAX_HIT	utils.h	263;"	d
GET_MAX_MANA	utils.h	267;"	d
GET_MAX_MOVE	utils.h	265;"	d
GET_MOB_RNUM	utils.h	316;"	d
GET_MOB_SPEC	utils.h	315;"	d
GET_MOB_VNUM	utils.h	317;"	d
GET_MOB_WAIT	utils.h	321;"	d
GET_MOVE	utils.h	264;"	d
GET_NAME	utils.h	225;"	d
GET_OBJ_COST	utils.h	368;"	d
GET_OBJ_EXTRA	utils.h	370;"	d
GET_OBJ_LR	utils.h	386;"	d
GET_OBJ_NAME	utils.h	366;"	d
GET_OBJ_NUM	shop.h	45;"	d
GET_OBJ_RENT	utils.h	369;"	d
GET_OBJ_RNUM	utils.h	375;"	d
GET_OBJ_SPEC	utils.h	380;"	d
GET_OBJ_TIMER	utils.h	374;"	d
GET_OBJ_TYPE	utils.h	367;"	d
GET_OBJ_VAL	utils.h	372;"	d
GET_OBJ_VNUM	utils.h	376;"	d
GET_OBJ_WEAR	utils.h	371;"	d
GET_OBJ_WEIGHT	utils.h	373;"	d
GET_POS	utils.h	273;"	d
GET_PRACTICES	utils.h	291;"	d
GET_REAL_ADD	utils.h	245;"	d
GET_REAL_CHA	utils.h	250;"	d
GET_REAL_CON	utils.h	249;"	d
GET_REAL_DEX	utils.h	246;"	d
GET_REAL_INT	utils.h	247;"	d
GET_REAL_LEVEL	utils.h	234;"	d
GET_REAL_STR	utils.h	244;"	d
GET_REAL_WIS	utils.h	248;"	d
GET_ROOM_SPEC	utils.h	215;"	d
GET_SAVE	utils.h	281;"	d
GET_SEX	utils.h	242;"	d
GET_SKILL	utils.h	312;"	d
GET_TALK	utils.h	297;"	d
GET_TITLE	utils.h	227;"	d
GET_WAS_IN	utils.h	222;"	d
GET_WEIGHT	utils.h	241;"	d
GET_WIMP_LEV	utils.h	294;"	d
GOD_ROOMS_ZONE	struct.h	487;"	d
GOD_ROOMS_ZONE	structs.h	512;"	d
GRAVITY	act.movement.c	58;"	d	file:
GREETINGS	config.c	/^char *GREETINGS =$/;"	v
HANDBOOK_FILE	db.h	38;"	d
HAT_TARGET_ROOM	spec_procs.c	5138;"	d	file:
HCONTROL_FILE	db.h	53;"	d
HCONTROL_FORMAT	house.c	/^char *HCONTROL_FORMAT =$/;"	v
HDR_2_CLIENT	memdbg.c	100;"	d	file:
HDR_SIZE	memdbg.c	93;"	d	file:
HEADER_BLOCK	mail.h	53;"	d
HEADER_BLOCK_DATASIZE	mail.h	71;"	d
HELP_KWRD_FILE	db.h	31;"	d
HELP_MENU	edit.h	/^static char *HELP_MENU =$/;"	v
HELP_PAGE_FILE	db.h	32;"	d
HMHR	utils.h	393;"	d
HOST_LENGTH	struct.h	612;"	d
HOST_LENGTH	structs.h	648;"	d
HOUSE_PRIVATE	house.h	4;"	d
HSHR	utils.h	391;"	d
HSSH	utils.h	392;"	d
HUNTING	utils.h	278;"	d
House_boot	house.c	/^House_boot (void)$/;"	f
House_can_enter	house.c	/^House_can_enter (struct char_data *ch, sh_int house)$/;"	f
House_crashsave	house.c	/^House_crashsave (int vnum, int saveall)$/;"	f
House_delete_file	house.c	/^House_delete_file (int vnum)$/;"	f
House_get_filename	house.c	/^House_get_filename (int vnum, char *filename)$/;"	f
House_listrent	house.c	/^House_listrent (struct char_data *ch, int vnum)$/;"	f
House_load	house.c	/^House_load (int vnum)$/;"	f
House_restore_weight	house.c	/^House_restore_weight (struct obj_data *obj)$/;"	f
House_save	house.c	/^House_save (struct obj_data *obj, FILE * fp)$/;"	f
House_save_all	house.c	/^House_save_all (void)$/;"	f
House_save_control	house.c	/^House_save_control (void)$/;"	f
IDEA_FILE	db.h	41;"	d
IF_STR	utils.h	129;"	d
IMMLIST_FILE	db.h	35;"	d
IMM_CAN_SEE	utils.h	410;"	d
IMOTD_FILE	db.h	30;"	d
INDEX_FILE	db.h	19;"	d
INDEX_SIZE	boards.h	15;"	d
INFO_FILE	db.h	33;"	d
INVALID	edit.h	28;"	d
INVIS_NORMAL	structs.h	552;"	d
INVIS_OK	utils.h	404;"	d
INVIS_OK_OBJ	utils.h	429;"	d
INVIS_RANGE	utils.h	415;"	d
INVIS_SINGLE	structs.h	551;"	d
INVIS_SPECIFIC	structs.h	550;"	d
IN_ROOM	utils.h	221;"	d
ISNEWL	utils.h	128;"	d
IS_AFFECTED	utils.h	197;"	d
IS_CARRYING_N	utils.h	276;"	d
IS_CARRYING_W	utils.h	275;"	d
IS_CLERIC	utils.h	466;"	d
IS_CLONE	utils.h	185;"	d
IS_CLONE_ROOM	utils.h	186;"	d
IS_CLOSED	graph.c	52;"	d	file:
IS_DARK	utils.h	206;"	d
IS_EVIL	utils.h	347;"	d
IS_GOD	shop.h	44;"	d
IS_GOOD	utils.h	346;"	d
IS_LIGHT	utils.h	213;"	d
IS_MAGIC_USER	utils.h	464;"	d
IS_MARKED	graph.c	50;"	d	file:
IS_MOB	utils.h	182;"	d
IS_MOVE	interpreter.h	16;"	d
IS_NEUTRAL	utils.h	348;"	d
IS_NPC	utils.h	181;"	d
IS_OBJ_STAT	utils.h	378;"	d
IS_PROTECT_GEAR	utils.h	384;"	d
IS_SET	utils.h	169;"	d
IS_THIEF	utils.h	468;"	d
IS_WARRIOR	utils.h	470;"	d
IS_WEAPON	fight.c	93;"	d	file:
ITEM_ANTI_CLERIC	struct.h	401;"	d
ITEM_ANTI_CLERIC	structs.h	413;"	d
ITEM_ANTI_EVIL	struct.h	398;"	d
ITEM_ANTI_EVIL	structs.h	410;"	d
ITEM_ANTI_GOOD	struct.h	397;"	d
ITEM_ANTI_GOOD	structs.h	409;"	d
ITEM_ANTI_MAGIC_USER	struct.h	400;"	d
ITEM_ANTI_MAGIC_USER	structs.h	412;"	d
ITEM_ANTI_NEUTRAL	struct.h	399;"	d
ITEM_ANTI_NEUTRAL	structs.h	411;"	d
ITEM_ANTI_THIEF	struct.h	402;"	d
ITEM_ANTI_THIEF	structs.h	414;"	d
ITEM_ANTI_WARRIOR	struct.h	403;"	d
ITEM_ANTI_WARRIOR	structs.h	415;"	d
ITEM_ARMOR	struct.h	337;"	d
ITEM_ARMOR	structs.h	349;"	d
ITEM_BATTERY	structs.h	366;"	d
ITEM_BLESS	struct.h	396;"	d
ITEM_BLESS	structs.h	408;"	d
ITEM_BOAT	struct.h	350;"	d
ITEM_BOAT	structs.h	362;"	d
ITEM_BREATHER	struct.h	356;"	d
ITEM_BREATHER	structs.h	369;"	d
ITEM_COLD	struct.h	362;"	d
ITEM_COLD	structs.h	375;"	d
ITEM_CONTAINER	struct.h	343;"	d
ITEM_CONTAINER	structs.h	355;"	d
ITEM_DRINKCON	struct.h	345;"	d
ITEM_DRINKCON	structs.h	357;"	d
ITEM_ENVIRON	struct.h	358;"	d
ITEM_ENVIRON	structs.h	371;"	d
ITEM_FIREWEAPON	struct.h	334;"	d
ITEM_FIREWEAPON	structs.h	346;"	d
ITEM_FOOD	struct.h	347;"	d
ITEM_FOOD	structs.h	359;"	d
ITEM_FOUNTAIN	struct.h	351;"	d
ITEM_FOUNTAIN	structs.h	363;"	d
ITEM_GATEWAY	struct.h	367;"	d
ITEM_GATEWAY	structs.h	380;"	d
ITEM_GLOW	struct.h	388;"	d
ITEM_GLOW	structs.h	400;"	d
ITEM_GRAV1	struct.h	364;"	d
ITEM_GRAV1	structs.h	377;"	d
ITEM_GRAV3	struct.h	365;"	d
ITEM_GRAV3	structs.h	378;"	d
ITEM_HEATPROOF	struct.h	361;"	d
ITEM_HEATPROOF	structs.h	374;"	d
ITEM_HEATRES	struct.h	360;"	d
ITEM_HEATRES	structs.h	373;"	d
ITEM_HUM	struct.h	389;"	d
ITEM_HUM	structs.h	401;"	d
ITEM_INVISIBLE	struct.h	393;"	d
ITEM_INVISIBLE	structs.h	405;"	d
ITEM_JOINABLE	struct.h	353;"	d
ITEM_JOINABLE	structs.h	365;"	d
ITEM_KEY	struct.h	346;"	d
ITEM_KEY	structs.h	358;"	d
ITEM_LIGHT	struct.h	329;"	d
ITEM_LIGHT	structs.h	341;"	d
ITEM_LR_10	struct.h	406;"	d
ITEM_LR_15	struct.h	407;"	d
ITEM_LR_20	struct.h	408;"	d
ITEM_LR_25	struct.h	409;"	d
ITEM_LR_30	struct.h	410;"	d
ITEM_LR_35	struct.h	415;"	d
ITEM_LR_40	struct.h	417;"	d
ITEM_LR_45	struct.h	418;"	d
ITEM_LR_5	struct.h	405;"	d
ITEM_LR_50	struct.h	419;"	d
ITEM_LR_55	struct.h	420;"	d
ITEM_LR_60	struct.h	421;"	d
ITEM_LR_65	struct.h	422;"	d
ITEM_LR_70	struct.h	423;"	d
ITEM_LR_75	struct.h	424;"	d
ITEM_LR_80	struct.h	425;"	d
ITEM_LR_85	struct.h	426;"	d
ITEM_LR_90	struct.h	427;"	d
ITEM_LR_95	struct.h	428;"	d
ITEM_LR_ET	struct.h	416;"	d
ITEM_LR_IMM	struct.h	411;"	d
ITEM_LR_IMP	struct.h	429;"	d
ITEM_MAGIC	struct.h	394;"	d
ITEM_MAGIC	structs.h	406;"	d
ITEM_MAGIC_EQ	struct.h	352;"	d
ITEM_MAGIC_EQ	structs.h	364;"	d
ITEM_MISSILE	struct.h	335;"	d
ITEM_MISSILE	structs.h	347;"	d
ITEM_MONEY	struct.h	348;"	d
ITEM_MONEY	structs.h	360;"	d
ITEM_NODONATE	struct.h	391;"	d
ITEM_NODONATE	structs.h	403;"	d
ITEM_NODROP	struct.h	395;"	d
ITEM_NODROP	structs.h	407;"	d
ITEM_NODRUNK	struct.h	414;"	d
ITEM_NODRUNK	structs.h	437;"	d
ITEM_NOHUNGER	struct.h	412;"	d
ITEM_NOHUNGER	structs.h	435;"	d
ITEM_NOINVIS	struct.h	392;"	d
ITEM_NOINVIS	structs.h	404;"	d
ITEM_NORENT	struct.h	390;"	d
ITEM_NORENT	structs.h	402;"	d
ITEM_NOSELL	struct.h	404;"	d
ITEM_NOSELL	structs.h	416;"	d
ITEM_NOTE	struct.h	344;"	d
ITEM_NOTE	structs.h	356;"	d
ITEM_NOTHIRST	struct.h	413;"	d
ITEM_NOTHIRST	structs.h	436;"	d
ITEM_OTHER	struct.h	340;"	d
ITEM_OTHER	structs.h	352;"	d
ITEM_PEN	struct.h	349;"	d
ITEM_PEN	structs.h	361;"	d
ITEM_POTION	struct.h	338;"	d
ITEM_POTION	structs.h	350;"	d
ITEM_RAD1PROOF	struct.h	368;"	d
ITEM_RAD1PROOF	structs.h	381;"	d
ITEM_RESPIRATE	struct.h	355;"	d
ITEM_RESPIRATE	structs.h	368;"	d
ITEM_RIDDEN	structs.h	456;"	d
ITEM_SCROLL	struct.h	330;"	d
ITEM_SCROLL	structs.h	342;"	d
ITEM_STAFF	struct.h	332;"	d
ITEM_STAFF	structs.h	344;"	d
ITEM_STASIS	struct.h	359;"	d
ITEM_STASIS	structs.h	372;"	d
ITEM_SUBZERO	struct.h	363;"	d
ITEM_SUBZERO	structs.h	376;"	d
ITEM_TRAP	struct.h	342;"	d
ITEM_TRAP	structs.h	354;"	d
ITEM_TRASH	struct.h	341;"	d
ITEM_TRASH	structs.h	353;"	d
ITEM_TREASURE	struct.h	336;"	d
ITEM_TREASURE	structs.h	348;"	d
ITEM_VACSUIT	struct.h	357;"	d
ITEM_VACSUIT	structs.h	370;"	d
ITEM_WAND	struct.h	331;"	d
ITEM_WAND	structs.h	343;"	d
ITEM_WEAPON	struct.h	333;"	d
ITEM_WEAPON	structs.h	345;"	d
ITEM_WEAR_ABOUT	struct.h	380;"	d
ITEM_WEAR_ABOUT	structs.h	393;"	d
ITEM_WEAR_ARMS	struct.h	378;"	d
ITEM_WEAR_ARMS	structs.h	391;"	d
ITEM_WEAR_BODY	struct.h	373;"	d
ITEM_WEAR_BODY	structs.h	386;"	d
ITEM_WEAR_FEET	struct.h	376;"	d
ITEM_WEAR_FEET	structs.h	389;"	d
ITEM_WEAR_FINGER	struct.h	371;"	d
ITEM_WEAR_FINGER	structs.h	384;"	d
ITEM_WEAR_HANDS	struct.h	377;"	d
ITEM_WEAR_HANDS	structs.h	390;"	d
ITEM_WEAR_HEAD	struct.h	374;"	d
ITEM_WEAR_HEAD	structs.h	387;"	d
ITEM_WEAR_HOLD	struct.h	384;"	d
ITEM_WEAR_HOLD	structs.h	397;"	d
ITEM_WEAR_LEGS	struct.h	375;"	d
ITEM_WEAR_LEGS	structs.h	388;"	d
ITEM_WEAR_NECK	struct.h	372;"	d
ITEM_WEAR_NECK	structs.h	385;"	d
ITEM_WEAR_SHIELD	struct.h	379;"	d
ITEM_WEAR_SHIELD	structs.h	392;"	d
ITEM_WEAR_TAKE	struct.h	370;"	d
ITEM_WEAR_TAKE	structs.h	383;"	d
ITEM_WEAR_WAIST	struct.h	381;"	d
ITEM_WEAR_WAIST	structs.h	394;"	d
ITEM_WEAR_WIELD	struct.h	383;"	d
ITEM_WEAR_WIELD	structs.h	396;"	d
ITEM_WEAR_WRIST	struct.h	382;"	d
ITEM_WEAR_WRIST	structs.h	395;"	d
ITEM_WORN	struct.h	339;"	d
ITEM_WORN	structs.h	351;"	d
James	castle.c	/^SPECIAL(James);$/;"	v
KBBLU	screen.h	26;"	d
KBCYN	screen.h	28;"	d
KBGRN	screen.h	24;"	d
KBGRY	screen.h	22;"	d
KBLU	screen.h	15;"	d
KBMAG	screen.h	27;"	d
KBRED	screen.h	23;"	d
KBWHT	screen.h	21;"	d
KBYEL	screen.h	25;"	d
KCYN	screen.h	17;"	d
KEYWORD_MENU	edit.h	/^static char *KEYWORD_MENU =$/;"	v
KGRN	screen.h	13;"	d
KILL_VAMP_VNUM	act.offensive.c	41;"	d	file:
KILL_WOLF_VNUM	act.offensive.c	40;"	d	file:
KMAG	screen.h	16;"	d
KNRM	screen.h	11;"	d
KNUL	screen.h	19;"	d
KRED	screen.h	12;"	d
KWHT	screen.h	18;"	d
KYEL	screen.h	14;"	d
LARGE_BUFSIZE	struct.h	602;"	d
LARGE_BUFSIZE	structs.h	638;"	d
LAST_BLOCK	mail.h	54;"	d
LEARNED	spec_procs.c	146;"	d	file:
LEARNED_LEVEL	spec_procs.c	137;"	d	file:
LIGHT_OK	utils.h	401;"	d
LIQ_ALE	struct.h	470;"	d
LIQ_ALE	structs.h	495;"	d
LIQ_BEER	struct.h	468;"	d
LIQ_BEER	structs.h	493;"	d
LIQ_BLOOD	struct.h	480;"	d
LIQ_BLOOD	structs.h	505;"	d
LIQ_CHAMPAGNE	struct.h	483;"	d
LIQ_CHAMPAGNE	structs.h	508;"	d
LIQ_CLEARWATER	struct.h	482;"	d
LIQ_CLEARWATER	structs.h	507;"	d
LIQ_COFFE	struct.h	479;"	d
LIQ_COFFE	structs.h	504;"	d
LIQ_DARKALE	struct.h	471;"	d
LIQ_DARKALE	structs.h	496;"	d
LIQ_FIREBRT	struct.h	474;"	d
LIQ_FIREBRT	structs.h	499;"	d
LIQ_LEMONADE	struct.h	473;"	d
LIQ_LEMONADE	structs.h	498;"	d
LIQ_LOCALSPC	struct.h	475;"	d
LIQ_LOCALSPC	structs.h	500;"	d
LIQ_MILK	struct.h	477;"	d
LIQ_MILK	structs.h	502;"	d
LIQ_SALTWATER	struct.h	481;"	d
LIQ_SALTWATER	structs.h	506;"	d
LIQ_SLIME	struct.h	476;"	d
LIQ_SLIME	structs.h	501;"	d
LIQ_TEA	struct.h	478;"	d
LIQ_TEA	structs.h	503;"	d
LIQ_WATER	struct.h	467;"	d
LIQ_WATER	structs.h	492;"	d
LIQ_WHISKY	struct.h	472;"	d
LIQ_WHISKY	structs.h	497;"	d
LIQ_WINE	struct.h	469;"	d
LIQ_WINE	structs.h	494;"	d
LIST_PRODUCE	shop.h	56;"	d
LIST_ROOM	shop.h	58;"	d
LIST_TRADE	shop.h	57;"	d
LOCALJAIL	spec_procs.c	1789;"	d	file:
LOWER	utils.h	125;"	d
LVL_ANGEL	struct.h	564;"	d
LVL_ANGEL	structs.h	599;"	d
LVL_CHAMP	struct.h	566;"	d
LVL_CHAMP	structs.h	601;"	d
LVL_ETRNL1	struct.h	575;"	d
LVL_ETRNL1	structs.h	610;"	d
LVL_ETRNL2	struct.h	574;"	d
LVL_ETRNL2	structs.h	609;"	d
LVL_ETRNL3	struct.h	573;"	d
LVL_ETRNL3	structs.h	608;"	d
LVL_ETRNL4	struct.h	572;"	d
LVL_ETRNL4	structs.h	607;"	d
LVL_ETRNL5	struct.h	571;"	d
LVL_ETRNL5	structs.h	606;"	d
LVL_ETRNL6	struct.h	570;"	d
LVL_ETRNL6	structs.h	605;"	d
LVL_ETRNL7	struct.h	569;"	d
LVL_ETRNL7	structs.h	604;"	d
LVL_ETRNL8	struct.h	568;"	d
LVL_ETRNL8	structs.h	603;"	d
LVL_ETRNL9	struct.h	567;"	d
LVL_ETRNL9	structs.h	602;"	d
LVL_FREEZE	struct.h	585;"	d
LVL_FREEZE	structs.h	620;"	d
LVL_GOD	struct.h	563;"	d
LVL_GOD	structs.h	598;"	d
LVL_GRGOD	struct.h	562;"	d
LVL_GRGOD	structs.h	597;"	d
LVL_GRIMPL	struct.h	560;"	d
LVL_GRIMPL	structs.h	595;"	d
LVL_IMMNET	act.wizard.c	2178;"	d	file:
LVL_IMMORT	struct.h	565;"	d
LVL_IMMORT	structs.h	600;"	d
LVL_IMPL	struct.h	561;"	d
LVL_IMPL	structs.h	596;"	d
LVL_ISNOT_GOD	struct.h	579;"	d
LVL_ISNOT_GOD	structs.h	614;"	d
LVL_IS_GOD	struct.h	583;"	d
LVL_IS_GOD	structs.h	618;"	d
LVL_NEWBIE	struct.h	576;"	d
LVL_NEWBIE	structs.h	611;"	d
LVL_OWNER	struct.h	559;"	d
LVL_OWNER	structs.h	594;"	d
MAG_AFFECTS	spells.h	23;"	d
MAG_ALTER_OBJS	spells.h	26;"	d
MAG_AREAS	spells.h	29;"	d
MAG_CREATIONS	spells.h	31;"	d
MAG_DAMAGE	spells.h	22;"	d
MAG_GROUPS	spells.h	27;"	d
MAG_MANUAL	spells.h	32;"	d
MAG_MASSES	spells.h	28;"	d
MAG_OBJECTS	spells.h	33;"	d
MAG_POINTS	spells.h	25;"	d
MAG_SUMMONS	spells.h	30;"	d
MAG_UNAFFECTS	spells.h	24;"	d
MAIL_FILE	db.h	51;"	d
MAINTEN	config.c	/^char *MAINTEN =$/;"	v
MANUAL_SPELL	spells.h	265;"	d
MARK	graph.c	48;"	d	file:
MAX	utils.c	/^int MAX(int a, int b)$/;"	f
MAXGAIN	spec_procs.c	148;"	d	file:
MAX_AFFECT	struct.h	616;"	d
MAX_AFFECT	structs.h	652;"	d
MAX_BOARD_MESSAGES	boards.h	12;"	d
MAX_COLORS	color.h	39;"	d
MAX_DATE_LEN	debug.c	28;"	d	file:
MAX_DEBUG_BUF	debug.c	27;"	d	file:
MAX_DURATION	handler.c	46;"	d	file:
MAX_GAME_BETS	structs.h	577;"	d
MAX_GUESTS	house.h	2;"	d
MAX_GUN_TYPES	utils.h	588;"	d
MAX_HIT_LEVEL	structs.h	117;"	d
MAX_HOUSES	house.h	1;"	d
MAX_HOUSE_CONTENT	house.h	50;"	d
MAX_INPUT_LENGTH	struct.h	606;"	d
MAX_INPUT_LENGTH	structs.h	642;"	d
MAX_ITEMEXTRAS	iedit.c	137;"	d	file:
MAX_ITEMTYPE	iedit.c	114;"	d	file:
MAX_ITEMVALUE	iedit.c	177;"	d	file:
MAX_ITEMWEAR	iedit.c	157;"	d	file:
MAX_LEN	struct.h	52;"	d
MAX_LEN	structs.h	57;"	d
MAX_MAIL_SIZE	mail.h	26;"	d
MAX_MANA_LEVEL	structs.h	116;"	d
MAX_MESSAGES	struct.h	608;"	d
MAX_MESSAGES	structs.h	644;"	d
MAX_MESSAGE_LENGTH	boards.h	13;"	d
MAX_MOVE_LEVEL	structs.h	115;"	d
MAX_NAME_LENGTH	struct.h	609;"	d
MAX_NAME_LENGTH	structs.h	645;"	d
MAX_NOTE_LENGTH	act.comm.c	299;"	d	file:
MAX_OBJ_AFFECT	struct.h	617;"	d
MAX_OBJ_AFFECT	structs.h	653;"	d
MAX_OPER	shop.h	86;"	d
MAX_OUTSIDE_BANK	shop.h	152;"	d
MAX_PER_PRAC	spec_procs.c	138;"	d	file:
MAX_PLAYERS	config.c	/^int MAX_PLAYERS = 50;$/;"	v
MAX_PROD	shop.h	38;"	d
MAX_PROTECT_GEAR	struct.h	327;"	d
MAX_PROTECT_GEAR	structs.h	338;"	d
MAX_PWD_LENGTH	struct.h	610;"	d
MAX_PWD_LENGTH	structs.h	646;"	d
MAX_RAW_INPUT_LENGTH	struct.h	607;"	d
MAX_RAW_INPUT_LENGTH	structs.h	643;"	d
MAX_SHOP_OBJ	shop.h	40;"	d
MAX_SKILLS	struct.h	615;"	d
MAX_SKILLS	structs.h	651;"	d
MAX_SPELLS	spells.h	126;"	d
MAX_STRING_LENGTH	struct.h	605;"	d
MAX_STRING_LENGTH	structs.h	641;"	d
MAX_TITLE_LENGTH	struct.h	611;"	d
MAX_TITLE_LENGTH	structs.h	647;"	d
MAX_TONGUE	struct.h	614;"	d
MAX_TONGUE	structs.h	650;"	d
MAX_TRADE	shop.h	37;"	d
MEMBUFZONE	memdbg.c	69;"	d	file:
MEMFILL	memdbg.c	68;"	d	file:
MEMHDR	memdbg.c	/^} MEMHDR;$/;"	t	file:
MEMORY	utils.h	320;"	d
MEMTAG	memdbg.c	67;"	d	file:
MEM_CORRUPT	memdbg.c	62;"	d	file:
MEM_LIST	memdbg.h	19;"	d
MEM_WHERE	memdbg.c	63;"	d	file:
MEM_WHERE	memdbg.h	20;"	d
MENU	config.c	/^char *MENU =$/;"	v
MESS_FILE	db.h	44;"	d
MIN	utils.c	/^int MIN(int a, int b)$/;"	f
MINDEX_FILE	db.h	20;"	d
MINGAIN	spec_procs.c	147;"	d	file:
MIN_MAIL_LEVEL	mail.h	20;"	d
MIN_OUTSIDE_BANK	shop.h	151;"	d
MIN_PER_PRAC	spec_procs.c	139;"	d	file:
MISC	act.wizard.c	2669;"	d	file:
MOB_2ND_ATTACK	struct.h	201;"	d
MOB_2ND_ATTACK	structs.h	208;"	d
MOB_3RD_ATTACK	struct.h	202;"	d
MOB_3RD_ATTACK	structs.h	209;"	d
MOB_AERIALSERVANT	utils.h	89;"	d
MOB_AGGRESSIVE	struct.h	186;"	d
MOB_AGGRESSIVE	structs.h	193;"	d
MOB_AGGR_EVIL	struct.h	189;"	d
MOB_AGGR_EVIL	structs.h	196;"	d
MOB_AGGR_GOOD	struct.h	190;"	d
MOB_AGGR_GOOD	structs.h	197;"	d
MOB_AGGR_NEUTRAL	struct.h	191;"	d
MOB_AGGR_NEUTRAL	structs.h	198;"	d
MOB_AGGR_TO_ALIGN	mobact.c	36;"	d	file:
MOB_AWARE	struct.h	185;"	d
MOB_AWARE	structs.h	192;"	d
MOB_CLONE	utils.h	87;"	d
MOB_ELEMENTAL_BASE	utils.h	86;"	d
MOB_FLAGGED	utils.h	189;"	d
MOB_FLAGS	utils.h	174;"	d
MOB_GATE_I	utils.h	83;"	d
MOB_GATE_II	utils.h	84;"	d
MOB_GATE_III	utils.h	85;"	d
MOB_HELPER	struct.h	193;"	d
MOB_HELPER	structs.h	200;"	d
MOB_INTELLIGENT	struct.h	200;"	d
MOB_INTELLIGENT	structs.h	207;"	d
MOB_ISNPC	struct.h	184;"	d
MOB_ISNPC	structs.h	191;"	d
MOB_MEMORY	struct.h	192;"	d
MOB_MEMORY	structs.h	199;"	d
MOB_MONSUM_I	utils.h	80;"	d
MOB_MONSUM_II	utils.h	81;"	d
MOB_MONSUM_III	utils.h	82;"	d
MOB_MOUNTABLE	structs.h	211;"	d
MOB_NOBASH	struct.h	197;"	d
MOB_NOBASH	structs.h	204;"	d
MOB_NOBLIND	struct.h	198;"	d
MOB_NOBLIND	structs.h	205;"	d
MOB_NOCHARM	struct.h	194;"	d
MOB_NOCHARM	structs.h	201;"	d
MOB_NOSLEEP	struct.h	196;"	d
MOB_NOSLEEP	structs.h	203;"	d
MOB_NOSUMMON	struct.h	195;"	d
MOB_NOSUMMON	structs.h	202;"	d
MOB_NO_STEAL	struct.h	203;"	d
MOB_NO_STEAL	structs.h	210;"	d
MOB_PREFIX	db.h	22;"	d
MOB_QUEST	struct.h	199;"	d
MOB_QUEST	structs.h	206;"	d
MOB_SCAVENGER	struct.h	183;"	d
MOB_SCAVENGER	structs.h	190;"	d
MOB_SENTINEL	struct.h	182;"	d
MOB_SENTINEL	structs.h	189;"	d
MOB_SPEC	struct.h	181;"	d
MOB_SPEC	structs.h	188;"	d
MOB_STAY_ZONE	struct.h	187;"	d
MOB_STAY_ZONE	structs.h	194;"	d
MOB_WIMPY	struct.h	188;"	d
MOB_WIMPY	structs.h	195;"	d
MOB_ZOMBIE	utils.h	88;"	d
MOON_1ST_QTR	struct.h	540;"	d
MOON_1ST_QTR	structs.h	568;"	d
MOON_2ND_3RD_QTR	struct.h	544;"	d
MOON_2ND_3RD_QTR	structs.h	572;"	d
MOON_2ND_HALF	struct.h	545;"	d
MOON_2ND_HALF	structs.h	573;"	d
MOON_3RD_QTR	struct.h	542;"	d
MOON_3RD_QTR	structs.h	570;"	d
MOON_FINAL_QTR	struct.h	546;"	d
MOON_FINAL_QTR	structs.h	574;"	d
MOON_FULL	struct.h	543;"	d
MOON_FULL	structs.h	571;"	d
MOON_HALF	struct.h	541;"	d
MOON_HALF	structs.h	569;"	d
MOON_NONE	struct.h	539;"	d
MOON_NONE	structs.h	567;"	d
MORT_CAN_SEE	utils.h	408;"	d
MORT_CAN_SEE_OBJ	utils.h	432;"	d
MOTD_FILE	db.h	29;"	d
MOUNTING	utils.h	279;"	d
MOUNTING_OBJ	utils.h	280;"	d
MSG_CANT_KILL_KEEPER	shop.h	162;"	d
MSG_CLOSED_FOR_DAY	shop.h	156;"	d
MSG_HEADING	boards.h	44;"	d
MSG_LEVEL	boards.h	46;"	d
MSG_NOT_OPEN_YET	shop.h	154;"	d
MSG_NOT_REOPEN_YET	shop.h	155;"	d
MSG_NO_SEE_CHAR	shop.h	158;"	d
MSG_NO_SELL_ALIGN	shop.h	159;"	d
MSG_NO_SELL_CLASS	shop.h	160;"	d
MSG_NO_STEAL_HERE	shop.h	157;"	d
MSG_NO_USED_WANDSTAFF	shop.h	161;"	d
MSG_SLOTNUM	boards.h	45;"	d
MY_VALID_EDGE	graph.c	/^int MY_VALID_EDGE(sh_int room, int dir ) {$/;"	f
MemDebugInit	memdbg.c	/^void MemDebugInit(char *fname)         $/;"	f
MemDebugInitialised	memdbg.c	/^static int MemDebugInitialised = 0;$/;"	v	file:
Mem_Display	memdbg.c	/^ Mem_Display($/;"	f
Mem_Tag_Err	memdbg.c	115;"	d	file:
Mem_Tag_Err	memdbg.c	117;"	d	file:
Mem_Used	memdbg.c	/^ Mem_Used($/;"	f
NAME	house.c	333;"	d	file:
NEWS_FILE	db.h	28;"	d
NEW_MSG_INDEX	boards.h	43;"	d
NO	config.c	21;"	d	file:
NOEFFECT	config.c	/^char *NOEFFECT = "Nothing seems to happen.\\r\\n";$/;"	v
NOPERSON	config.c	/^char *NOPERSON = "No-one by that name here.\\r\\n";$/;"	v
NORTH	struct.h	38;"	d
NORTH	structs.h	43;"	d
NOTHING	struct.h	22;"	d
NOTHING	structs.h	19;"	d
NOTRADE_CLERIC	shop.h	121;"	d
NOTRADE_EVIL	shop.h	118;"	d
NOTRADE_GOOD	shop.h	117;"	d
NOTRADE_MAGIC_USER	shop.h	120;"	d
NOTRADE_NEUTRAL	shop.h	119;"	d
NOTRADE_THIEF	shop.h	122;"	d
NOTRADE_WARRIOR	shop.h	123;"	d
NOWHERE	edit.h	29;"	d
NOWHERE	struct.h	21;"	d
NOWHERE	structs.h	18;"	d
NO_GAME	casino.h	2;"	d
NPC	act.wizard.c	2666;"	d	file:
NRM	utils.h	94;"	d
NULL	utils.h	481;"	d
NUMBER	act.wizard.c	2671;"	d	file:
NUM_CLASSES	struct.h	132;"	d
NUM_CLASSES	structs.h	139;"	d
NUM_OF_BOARDS	boards.h	11;"	d
NUM_OF_DIRS	struct.h	587;"	d
NUM_OF_DIRS	structs.h	622;"	d
NUM_RESERVED_DESCS	comm.h	11;"	d
NUM_RFLAGS	olc-wld.c	56;"	d	file:
NUM_TOKENS	interpreter.c	957;"	d	file:
NUM_WEARS	struct.h	320;"	d
NUM_WEARS	structs.h	332;"	d
OBJECT_DEAD	shop.h	50;"	d
OBJECT_NOTOK	shop.h	51;"	d
OBJECT_OK	shop.h	52;"	d
OBJN	utils.h	451;"	d
OBJS	utils.h	448;"	d
OBJ_IS_GUN	utils.h	590;"	d
OBJ_PREFIX	db.h	23;"	d
OBJ_RIDDEN	utils.h	365;"	d
OFF	utils.h	92;"	d
OK	config.c	/^char *OK = "Okay.\\r\\n";$/;"	v
OLE_MAIN	ole.h	1;"	d
OLE_OBJEXTRA	iedit.c	207;"	d	file:
OLE_OBJTYPE	ole.h	2;"	d
OLE_OBJVALUE	iedit.c	209;"	d	file:
OLE_OBJWEAR	iedit.c	208;"	d	file:
ONOFF	utils.h	123;"	d
OPEN_MAX	comm.c	333;"	d	file:
OPER_AND	shop.h	84;"	d
OPER_CLOSE_PAREN	shop.h	82;"	d
OPER_NOT	shop.h	85;"	d
OPER_OPEN_PAREN	shop.h	81;"	d
OPER_OR	shop.h	83;"	d
OPT_USEC	struct.h	589;"	d
OPT_USEC	structs.h	624;"	d
OUTSIDE	utils.h	473;"	d
O_NONBLOCK	comm.c	1327;"	d	file:
Obj_from_store	objsave.c	/^struct obj_data *Obj_from_store(struct obj_file_elem object)$/;"	f
Obj_to_store	objsave.c	/^int Obj_to_store(struct obj_data * obj, FILE * fl)$/;"	f
PAGE_LENGTH	modify.c	935;"	d	file:
PAGE_WIDTH	modify.c	936;"	d	file:
PARSE_DELETE	modify.c	32;"	d	file:
PARSE_EDIT	modify.c	36;"	d	file:
PARSE_FORMAT	modify.c	29;"	d	file:
PARSE_HELP	modify.c	31;"	d	file:
PARSE_INSERT	modify.c	33;"	d	file:
PARSE_LIST_NORM	modify.c	34;"	d	file:
PARSE_LIST_NUM	modify.c	35;"	d	file:
PARSE_REPLACE	modify.c	30;"	d	file:
PASSES_PER_SEC	struct.h	590;"	d
PASSES_PER_SEC	structs.h	625;"	d
PATH_SEPARATOR	debug.c	29;"	d	file:
PC	act.wizard.c	2665;"	d	file:
PERS	utils.h	446;"	d
PISS_FACTOR	act.comm.c	57;"	d	file:
PLAYER_FILE	db.h	50;"	d
PLR_CRASH	struct.h	168;"	d
PLR_CRASH	structs.h	172;"	d
PLR_CRYO	struct.h	177;"	d
PLR_CRYO	structs.h	181;"	d
PLR_DELETED	struct.h	172;"	d
PLR_DELETED	structs.h	176;"	d
PLR_DONTSET	struct.h	165;"	d
PLR_DONTSET	structs.h	169;"	d
PLR_FLAGGED	utils.h	190;"	d
PLR_FLAGS	utils.h	175;"	d
PLR_FROZEN	struct.h	164;"	d
PLR_FROZEN	structs.h	168;"	d
PLR_GODMAIL	structs.h	184;"	d
PLR_INVSTART	struct.h	176;"	d
PLR_INVSTART	structs.h	180;"	d
PLR_KILLER	struct.h	162;"	d
PLR_KILLER	structs.h	166;"	d
PLR_LAGGED	structs.h	183;"	d
PLR_LOADROOM	struct.h	173;"	d
PLR_LOADROOM	structs.h	177;"	d
PLR_MAILING	struct.h	167;"	d
PLR_MAILING	structs.h	171;"	d
PLR_MOUNTED	structs.h	185;"	d
PLR_NODELETE	struct.h	175;"	d
PLR_NODELETE	structs.h	179;"	d
PLR_NOIGNORE	struct.h	178;"	d
PLR_NOIGNORE	structs.h	182;"	d
PLR_NOSHOUT	struct.h	170;"	d
PLR_NOSHOUT	structs.h	174;"	d
PLR_NOTITLE	struct.h	171;"	d
PLR_NOTITLE	structs.h	175;"	d
PLR_NOWIZLIST	struct.h	174;"	d
PLR_NOWIZLIST	structs.h	178;"	d
PLR_SITEOK	struct.h	169;"	d
PLR_SITEOK	structs.h	173;"	d
PLR_THIEF	struct.h	163;"	d
PLR_THIEF	structs.h	167;"	d
PLR_TOG_CHK	utils.h	199;"	d
PLR_WRITING	struct.h	166;"	d
PLR_WRITING	structs.h	170;"	d
POLICIES_FILE	db.h	37;"	d
POOFIN	utils.h	298;"	d
POOFOUT	utils.h	299;"	d
POS_DEAD	struct.h	150;"	d
POS_DEAD	structs.h	155;"	d
POS_FIGHTING	struct.h	157;"	d
POS_FIGHTING	structs.h	162;"	d
POS_INCAP	struct.h	152;"	d
POS_INCAP	structs.h	157;"	d
POS_MORTALLYW	struct.h	151;"	d
POS_MORTALLYW	structs.h	156;"	d
POS_RESTING	struct.h	155;"	d
POS_RESTING	structs.h	160;"	d
POS_SITTING	struct.h	156;"	d
POS_SITTING	structs.h	161;"	d
POS_SLEEPING	struct.h	154;"	d
POS_SLEEPING	structs.h	159;"	d
POS_STANDING	struct.h	158;"	d
POS_STANDING	structs.h	163;"	d
POS_STUNNED	struct.h	153;"	d
POS_STUNNED	structs.h	158;"	d
PRAC_TYPE	spec_procs.c	140;"	d	file:
PRF_AFK	struct.h	229;"	d
PRF_AFK	structs.h	237;"	d
PRF_AUTOEXIT	struct.h	213;"	d
PRF_AUTOEXIT	structs.h	221;"	d
PRF_BRIEF	struct.h	206;"	d
PRF_BRIEF	structs.h	214;"	d
PRF_COLOR_1	struct.h	219;"	d
PRF_COLOR_1	structs.h	227;"	d
PRF_COLOR_2	struct.h	220;"	d
PRF_COLOR_2	structs.h	228;"	d
PRF_COMPACT	struct.h	207;"	d
PRF_COMPACT	structs.h	215;"	d
PRF_DEAF	struct.h	208;"	d
PRF_DEAF	structs.h	216;"	d
PRF_DISPALIGN	struct.h	235;"	d
PRF_DISPALIGN	structs.h	243;"	d
PRF_DISPEXP	struct.h	234;"	d
PRF_DISPEXP	structs.h	242;"	d
PRF_DISPHP	struct.h	210;"	d
PRF_DISPHP	structs.h	218;"	d
PRF_DISPMANA	struct.h	211;"	d
PRF_DISPMANA	structs.h	219;"	d
PRF_DISPMOVE	struct.h	212;"	d
PRF_DISPMOVE	structs.h	220;"	d
PRF_FIX	struct.h	237;"	d
PRF_FIX	structs.h	245;"	d
PRF_FLAGGED	utils.h	192;"	d
PRF_FLAGS	utils.h	176;"	d
PRF_HOLYLIGHT	struct.h	218;"	d
PRF_HOLYLIGHT	structs.h	226;"	d
PRF_LOG1	struct.h	222;"	d
PRF_LOG1	structs.h	230;"	d
PRF_LOG2	struct.h	223;"	d
PRF_LOG2	structs.h	231;"	d
PRF_MORTALK	struct.h	233;"	d
PRF_MORTALK	structs.h	241;"	d
PRF_NOAUCT	struct.h	224;"	d
PRF_NOAUCT	structs.h	232;"	d
PRF_NOGOSS	struct.h	225;"	d
PRF_NOGOSS	structs.h	233;"	d
PRF_NOGRATZ	struct.h	226;"	d
PRF_NOGRATZ	structs.h	234;"	d
PRF_NOHASSLE	struct.h	214;"	d
PRF_NOHASSLE	structs.h	222;"	d
PRF_NOIMMNET	struct.h	228;"	d
PRF_NOIMMNET	structs.h	236;"	d
PRF_NOINFO	struct.h	236;"	d
PRF_NOINFO	structs.h	244;"	d
PRF_NOREPEAT	struct.h	217;"	d
PRF_NOREPEAT	structs.h	225;"	d
PRF_NOTELL	struct.h	209;"	d
PRF_NOTELL	structs.h	217;"	d
PRF_NOWIZ	struct.h	221;"	d
PRF_NOWIZ	structs.h	229;"	d
PRF_QUEST	struct.h	215;"	d
PRF_QUEST	structs.h	223;"	d
PRF_ROOMFLAGS	struct.h	227;"	d
PRF_ROOMFLAGS	structs.h	235;"	d
PRF_SUMMONABLE	struct.h	216;"	d
PRF_SUMMONABLE	structs.h	224;"	d
PRF_TAG	struct.h	232;"	d
PRF_TAG	structs.h	240;"	d
PRF_TOG_CHK	act.other.c	1800;"	d	file:
PRF_TOG_CHK	utils.h	200;"	d
PRF_VAMPIRE	struct.h	231;"	d
PRF_VAMPIRE	structs.h	239;"	d
PRF_WOLF	struct.h	230;"	d
PRF_WOLF	structs.h	238;"	d
PROTECT_LEVEL	structs.h	591;"	d
PULSE_CASINO	structs.h	635;"	d
PULSE_MOBILE	struct.h	594;"	d
PULSE_MOBILE	structs.h	629;"	d
PULSE_RANDAM	struct.h	597;"	d
PULSE_RANDAM	structs.h	632;"	d
PULSE_ROLLER	struct.h	599;"	d
PULSE_ROLLER	structs.h	634;"	d
PULSE_TOB	struct.h	598;"	d
PULSE_TOB	structs.h	633;"	d
PULSE_VIOLENCE	struct.h	595;"	d
PULSE_VIOLENCE	structs.h	630;"	d
PULSE_ZONE	struct.h	593;"	d
PULSE_ZONE	structs.h	628;"	d
QBBLU	screen.h	71;"	d
QBCYN	screen.h	73;"	d
QBGRN	screen.h	69;"	d
QBGRY	screen.h	67;"	d
QBLU	screen.h	62;"	d
QBMAG	screen.h	72;"	d
QBRED	screen.h	68;"	d
QBYEL	screen.h	70;"	d
QCYN	screen.h	64;"	d
QGRN	screen.h	60;"	d
QMAG	screen.h	63;"	d
QNRM	screen.h	58;"	d
QRED	screen.h	59;"	d
QWHT	screen.h	65;"	d
QYEL	screen.h	61;"	d
RANGE	act.wizard.c	2679;"	d	file:
RANK_NUM	struct.h	51;"	d
RANK_NUM	structs.h	56;"	d
READ_LVL	boards.h	37;"	d
REAL	db.h	92;"	d
RECREATE	utils.h	142;"	d
REDIT_SAVE_FILE	edit.h	31;"	d
REIMBURSE_LEVELS	interpreter.c	62;"	d	file:
REIMBURSE_POINTS	interpreter.c	63;"	d	file:
REMOVE_BIT	utils.h	171;"	d
REMOVE_FROM_LIST	utils.h	154;"	d
REMOVE_LVL	boards.h	39;"	d
RENT_CRASH	struct.h	552;"	d
RENT_CRASH	structs.h	581;"	d
RENT_FORCED	struct.h	554;"	d
RENT_FORCED	structs.h	583;"	d
RENT_RENTED	struct.h	553;"	d
RENT_RENTED	structs.h	582;"	d
RENT_TIMEDOUT	struct.h	555;"	d
RENT_TIMEDOUT	structs.h	584;"	d
RENT_UNDEF	struct.h	551;"	d
RENT_UNDEF	structs.h	580;"	d
RESERVE_SIZE	memdbg.c	94;"	d	file:
RESET_EDITM	edit.h	50;"	d
RF	class.c	91;"	d	file:
RLIMIT_NOFILE	comm.c	316;"	d	file:
RL_SEC	struct.h	591;"	d
RL_SEC	structs.h	626;"	d
ROOM_ALIEN_ECHO	spec_procs.c	29;"	d	file:
ROOM_ATRIUM	struct.h	70;"	d
ROOM_ATRIUM	structs.h	75;"	d
ROOM_BFS_MARK	struct.h	72;"	d
ROOM_BFS_MARK	structs.h	77;"	d
ROOM_DARK	struct.h	57;"	d
ROOM_DARK	structs.h	62;"	d
ROOM_DEATH	struct.h	58;"	d
ROOM_DEATH	structs.h	63;"	d
ROOM_DESC_MENU	edit.h	/^static char *ROOM_DESC_MENU =$/;"	v
ROOM_FLAGGED	utils.h	194;"	d
ROOM_FLAGS	utils.h	179;"	d
ROOM_FLAG_MENU	edit.h	/^static char *ROOM_FLAG_MENU =$/;"	v
ROOM_FLAG_MENU2	edit.h	/^static char *ROOM_FLAG_MENU2 =$/;"	v
ROOM_GODROOM	struct.h	67;"	d
ROOM_GODROOM	structs.h	72;"	d
ROOM_HOUSE	struct.h	68;"	d
ROOM_HOUSE	structs.h	73;"	d
ROOM_HOUSE_CRASH	struct.h	69;"	d
ROOM_HOUSE_CRASH	structs.h	74;"	d
ROOM_INDOORS	struct.h	60;"	d
ROOM_INDOORS	structs.h	65;"	d
ROOM_LR_10	struct.h	75;"	d
ROOM_LR_10	structs.h	80;"	d
ROOM_LR_15	struct.h	76;"	d
ROOM_LR_15	structs.h	81;"	d
ROOM_LR_20	struct.h	77;"	d
ROOM_LR_20	structs.h	82;"	d
ROOM_LR_25	struct.h	78;"	d
ROOM_LR_25	structs.h	83;"	d
ROOM_LR_30	struct.h	79;"	d
ROOM_LR_30	structs.h	84;"	d
ROOM_LR_35	struct.h	86;"	d
ROOM_LR_35	structs.h	91;"	d
ROOM_LR_5	struct.h	74;"	d
ROOM_LR_5	structs.h	79;"	d
ROOM_LR_ANG	structs.h	92;"	d
ROOM_LR_ET	struct.h	80;"	d
ROOM_LR_ET	structs.h	85;"	d
ROOM_LR_IMM	struct.h	84;"	d
ROOM_LR_IMM	structs.h	89;"	d
ROOM_LR_IMP	struct.h	85;"	d
ROOM_LR_IMP	structs.h	90;"	d
ROOM_NEWBIE	struct.h	73;"	d
ROOM_NEWBIE	structs.h	78;"	d
ROOM_NOMAGIC	struct.h	64;"	d
ROOM_NOMAGIC	structs.h	69;"	d
ROOM_NOMOB	struct.h	59;"	d
ROOM_NOMOB	structs.h	64;"	d
ROOM_NOSLEEP	struct.h	83;"	d
ROOM_NOSLEEP	structs.h	88;"	d
ROOM_NOTRACK	struct.h	63;"	d
ROOM_NOTRACK	structs.h	68;"	d
ROOM_OLC	struct.h	71;"	d
ROOM_OLC	structs.h	76;"	d
ROOM_PEACEFUL	struct.h	61;"	d
ROOM_PEACEFUL	structs.h	66;"	d
ROOM_PRIVATE	struct.h	66;"	d
ROOM_PRIVATE	structs.h	71;"	d
ROOM_REGEN_2	struct.h	81;"	d
ROOM_REGEN_2	structs.h	86;"	d
ROOM_REGEN_HALF	struct.h	82;"	d
ROOM_REGEN_HALF	structs.h	87;"	d
ROOM_SOUNDPROOF	struct.h	62;"	d
ROOM_SOUNDPROOF	structs.h	67;"	d
ROOM_TITLE_MENU	edit.h	/^static char *ROOM_TITLE_MENU =$/;"	v
ROOM_TUNNEL	struct.h	65;"	d
ROOM_TUNNEL	structs.h	70;"	d
R_MOB	castle.c	50;"	d	file:
R_OBJ	castle.c	51;"	d	file:
R_ROOM	castle.c	52;"	d	file:
Read_Invalid_List	ban.c	/^void Read_Invalid_List(void)$/;"	f
SANA	utils.h	396;"	d
SAVE_FILE	edit.h	32;"	d
SAVING_BREATH	spells.h	197;"	d
SAVING_PARA	spells.h	194;"	d
SAVING_PETRI	spells.h	196;"	d
SAVING_ROD	spells.h	195;"	d
SAVING_SPELL	spells.h	198;"	d
SCMD_AFK	interpreter.h	113;"	d
SCMD_ANGNET	interpreter.h	130;"	d
SCMD_AREAS	interpreter.h	93;"	d
SCMD_ASK	interpreter.h	134;"	d
SCMD_AUCTION	interpreter.h	140;"	d
SCMD_AUTOEXIT	interpreter.h	111;"	d
SCMD_AUTOGOLD	interpreter.h	118;"	d
SCMD_AUTOHUNT	interpreter.h	209;"	d
SCMD_AUTOLOOT	interpreter.h	117;"	d
SCMD_AUTOSPLIT	interpreter.h	119;"	d
SCMD_BRIEF	interpreter.h	98;"	d
SCMD_BUG	interpreter.h	168;"	d
SCMD_CLEAR	interpreter.h	91;"	d
SCMD_COMMANDS	interpreter.h	158;"	d
SCMD_COMPACT	interpreter.h	99;"	d
SCMD_CREDITS	interpreter.h	83;"	d
SCMD_CTALK	interpreter.h	143;"	d
SCMD_DATE	interpreter.h	154;"	d
SCMD_DEAF	interpreter.h	102;"	d
SCMD_DONATE	interpreter.h	165;"	d
SCMD_DOWN	interpreter.h	78;"	d
SCMD_DRINK	interpreter.h	195;"	d
SCMD_DROP	interpreter.h	163;"	d
SCMD_EAST	interpreter.h	74;"	d
SCMD_EAT	interpreter.h	193;"	d
SCMD_ECHO	interpreter.h	204;"	d
SCMD_EMOTE	interpreter.h	205;"	d
SCMD_FILL	interpreter.h	182;"	d
SCMD_FREEZE	interpreter.h	126;"	d
SCMD_GOSSIP	interpreter.h	139;"	d
SCMD_GRATZ	interpreter.h	141;"	d
SCMD_HANDBOOK	interpreter.h	82;"	d
SCMD_HIT	interpreter.h	189;"	d
SCMD_HOLLER	interpreter.h	137;"	d
SCMD_HOLYLIGHT	interpreter.h	109;"	d
SCMD_HUNT	interpreter.h	208;"	d
SCMD_IDEA	interpreter.h	170;"	d
SCMD_IMMLIST	interpreter.h	88;"	d
SCMD_IMMNET	interpreter.h	129;"	d
SCMD_IMOTD	interpreter.h	90;"	d
SCMD_INFO	interpreter.h	81;"	d
SCMD_JUNK	interpreter.h	164;"	d
SCMD_LOOK	interpreter.h	173;"	d
SCMD_MOTD	interpreter.h	89;"	d
SCMD_MURDER	interpreter.h	190;"	d
SCMD_NEWBIE	interpreter.h	142;"	d
SCMD_NEWS	interpreter.h	84;"	d
SCMD_NOAUCTION	interpreter.h	101;"	d
SCMD_NOCTALK	interpreter.h	116;"	d
SCMD_NOGOSSIP	interpreter.h	103;"	d
SCMD_NOGRATZ	interpreter.h	104;"	d
SCMD_NOHASSLE	interpreter.h	97;"	d
SCMD_NOIMMNET	interpreter.h	112;"	d
SCMD_NOINFO	interpreter.h	114;"	d
SCMD_NONEWBIE	interpreter.h	115;"	d
SCMD_NOREPEAT	interpreter.h	108;"	d
SCMD_NORTH	interpreter.h	73;"	d
SCMD_NOSUMMON	interpreter.h	96;"	d
SCMD_NOTELL	interpreter.h	100;"	d
SCMD_NOTITLE	interpreter.h	124;"	d
SCMD_NOWIZ	interpreter.h	105;"	d
SCMD_PARDON	interpreter.h	123;"	d
SCMD_POLICIES	interpreter.h	86;"	d
SCMD_POOFIN	interpreter.h	185;"	d
SCMD_POOFOUT	interpreter.h	186;"	d
SCMD_POUR	interpreter.h	181;"	d
SCMD_QECHO	interpreter.h	178;"	d
SCMD_QSAY	interpreter.h	177;"	d
SCMD_QUAFF	interpreter.h	200;"	d
SCMD_QUEST	interpreter.h	106;"	d
SCMD_QUI	interpreter.h	150;"	d
SCMD_QUIT	interpreter.h	151;"	d
SCMD_READ	interpreter.h	174;"	d
SCMD_RECITE	interpreter.h	201;"	d
SCMD_REROLL	interpreter.h	122;"	d
SCMD_ROOMFLAGS	interpreter.h	107;"	d
SCMD_SHOUT	interpreter.h	138;"	d
SCMD_SHUTDOW	interpreter.h	146;"	d
SCMD_SHUTDOWN	interpreter.h	147;"	d
SCMD_SIP	interpreter.h	196;"	d
SCMD_SLOWNS	interpreter.h	110;"	d
SCMD_SOCIALS	interpreter.h	159;"	d
SCMD_SOUTH	interpreter.h	75;"	d
SCMD_SQUELCH	interpreter.h	125;"	d
SCMD_TASTE	interpreter.h	194;"	d
SCMD_THAW	interpreter.h	127;"	d
SCMD_TYPO	interpreter.h	169;"	d
SCMD_UNAFFECT	interpreter.h	128;"	d
SCMD_UP	interpreter.h	77;"	d
SCMD_UPTIME	interpreter.h	155;"	d
SCMD_USE	interpreter.h	199;"	d
SCMD_VERSION	interpreter.h	87;"	d
SCMD_WEST	interpreter.h	76;"	d
SCMD_WHISPER	interpreter.h	133;"	d
SCMD_WHOAMI	interpreter.h	92;"	d
SCMD_WIZHELP	interpreter.h	160;"	d
SCMD_WIZLIST	interpreter.h	85;"	d
SECS_PER_MUD_DAY	utils.h	108;"	d
SECS_PER_MUD_HOUR	utils.h	107;"	d
SECS_PER_MUD_MONTH	utils.h	109;"	d
SECS_PER_MUD_YEAR	utils.h	110;"	d
SECS_PER_REAL_DAY	utils.h	115;"	d
SECS_PER_REAL_HOUR	utils.h	114;"	d
SECS_PER_REAL_MIN	utils.h	113;"	d
SECS_PER_REAL_YEAR	utils.h	116;"	d
SECTOR_TYPE_MENU	edit.h	/^static char *SECTOR_TYPE_MENU =$/;"	v
SECT_ABSZERO	act.movement.c	46;"	d	file:
SECT_CITY	struct.h	98;"	d
SECT_CITY	structs.h	102;"	d
SECT_COLD	act.movement.c	44;"	d	file:
SECT_CORROSIVE	act.movement.c	40;"	d	file:
SECT_CRUSH	act.movement.c	49;"	d	file:
SECT_DISPELL	act.movement.c	51;"	d	file:
SECT_DOUBLEGRAV	act.movement.c	47;"	d	file:
SECT_FIELD	struct.h	99;"	d
SECT_FIELD	structs.h	103;"	d
SECT_FLYING	struct.h	106;"	d
SECT_FLYING	structs.h	110;"	d
SECT_FOREST	struct.h	100;"	d
SECT_FOREST	structs.h	104;"	d
SECT_FREEZING	act.movement.c	45;"	d	file:
SECT_HILLS	struct.h	101;"	d
SECT_HILLS	structs.h	105;"	d
SECT_HOT	act.movement.c	41;"	d	file:
SECT_INCINERATE	act.movement.c	43;"	d	file:
SECT_INSIDE	struct.h	97;"	d
SECT_INSIDE	structs.h	101;"	d
SECT_MOUNTAIN	struct.h	102;"	d
SECT_MOUNTAIN	structs.h	106;"	d
SECT_RAD1	act.movement.c	50;"	d	file:
SECT_SCORCH	act.movement.c	42;"	d	file:
SECT_THIN	act.movement.c	37;"	d	file:
SECT_TRIPLEGRAV	act.movement.c	48;"	d	file:
SECT_UNBREATHABLE	act.movement.c	38;"	d	file:
SECT_UNDERWATER	struct.h	105;"	d
SECT_UNDERWATER	structs.h	109;"	d
SECT_VACUUM	act.movement.c	39;"	d	file:
SECT_WATER_NOSWIM	struct.h	104;"	d
SECT_WATER_NOSWIM	structs.h	108;"	d
SECT_WATER_SWIM	struct.h	103;"	d
SECT_WATER_SWIM	structs.h	107;"	d
SEEK_CUR	utils.h	495;"	d
SEEK_END	utils.h	496;"	d
SEEK_SET	utils.h	494;"	d
SELF	utils.h	413;"	d
SENDOK	comm.c	1592;"	d	file:
SEND_TO_Q	comm.h	39;"	d
SET_BIT	utils.h	170;"	d
SET_COMMANDS	act.wizard.c	2673;"	d	file:
SET_OR_REMOVE	act.wizard.c	2675;"	d	file:
SET_REDITM	edit.h	55;"	d
SET_SKILL	utils.h	313;"	d
SEX_FEMALE	struct.h	146;"	d
SEX_FEMALE	structs.h	152;"	d
SEX_MALE	struct.h	145;"	d
SEX_MALE	structs.h	151;"	d
SEX_NEUTRAL	struct.h	144;"	d
SEX_NEUTRAL	structs.h	150;"	d
SHOP_BANK	shop.h	108;"	d
SHOP_BITVECTOR	shop.h	110;"	d
SHOP_BROKE_TEMPER	shop.h	109;"	d
SHOP_BUYPROFIT	shop.h	113;"	d
SHOP_BUYTYPE	shop.h	105;"	d
SHOP_BUYWORD	shop.h	106;"	d
SHOP_CLOSE1	shop.h	101;"	d
SHOP_CLOSE2	shop.h	103;"	d
SHOP_FUNC	shop.h	115;"	d
SHOP_KEEPER	shop.h	99;"	d
SHOP_KILL_CHARS	shop.h	142;"	d
SHOP_NUM	shop.h	98;"	d
SHOP_OPEN1	shop.h	100;"	d
SHOP_OPEN2	shop.h	102;"	d
SHOP_PRODUCT	shop.h	107;"	d
SHOP_ROOM	shop.h	104;"	d
SHOP_SELLPROFIT	shop.h	114;"	d
SHOP_SORT	shop.h	112;"	d
SHOP_TRADE_WITH	shop.h	111;"	d
SHOP_USES_BANK	shop.h	143;"	d
SHP_PREFIX	db.h	25;"	d
SINFO	spec_procs.c	150;"	d	file:
SINFO	spell_parser.c	26;"	d	file:
SKILL_2ND_ATTACK	spells.h	139;"	d
SKILL_3RD_ATTACK	spells.h	140;"	d
SKILL_BACKSTAB	spells.h	129;"	d
SKILL_BASH	spells.h	130;"	d
SKILL_COMPARE	spells.h	146;"	d
SKILL_HIDE	spells.h	131;"	d
SKILL_HUNT	spells.h	143;"	d
SKILL_KICK	spells.h	132;"	d
SKILL_PICK_LOCK	spells.h	133;"	d
SKILL_PRIMAL_SCREAM	spells.h	141;"	d
SKILL_PUNCH	spells.h	134;"	d
SKILL_RESCUE	spells.h	135;"	d
SKILL_RETREAT	spells.h	144;"	d
SKILL_SCAN	spells.h	142;"	d
SKILL_SNEAK	spells.h	136;"	d
SKILL_SPY	spells.h	147;"	d
SKILL_STEAL	spells.h	137;"	d
SKILL_THROW	spells.h	145;"	d
SKILL_TRACK	spells.h	138;"	d
SKY_CLOUDLESS	struct.h	533;"	d
SKY_CLOUDLESS	structs.h	561;"	d
SKY_CLOUDY	struct.h	534;"	d
SKY_CLOUDY	structs.h	562;"	d
SKY_LIGHTNING	struct.h	536;"	d
SKY_LIGHTNING	structs.h	564;"	d
SKY_RAINING	struct.h	535;"	d
SKY_RAINING	structs.h	563;"	d
SMALL_BUFSIZE	struct.h	601;"	d
SMALL_BUFSIZE	structs.h	637;"	d
SNAP_PLAYING	spec_procs.c	4860;"	d	file:
SNAP_STARTING	spec_procs.c	4859;"	d	file:
SOCMESS_FILE	db.h	45;"	d
SONG_12DAYS	spec_procs.c	4493;"	d	file:
SONG_DECK1	spec_procs.c	4494;"	d	file:
SONG_DECK2	spec_procs.c	4495;"	d	file:
SONG_EYE	spec_procs.c	4496;"	d	file:
SOUTH	struct.h	40;"	d
SOUTH	structs.h	45;"	d
SPACE	edit.h	25;"	d
SPECIAL	boards.c	/^SPECIAL(gen_board)$/;"	f
SPECIAL	casino.c	/^SPECIAL(casino) {$/;"	f
SPECIAL	castle.c	/^SPECIAL(CastleGuard)$/;"	f
SPECIAL	castle.c	/^SPECIAL(DicknDavid)$/;"	f
SPECIAL	castle.c	/^SPECIAL(James)$/;"	f
SPECIAL	castle.c	/^SPECIAL(cleaning)$/;"	f
SPECIAL	castle.c	/^SPECIAL(jerry)$/;"	f
SPECIAL	castle.c	/^SPECIAL(king_welmar)$/;"	f
SPECIAL	castle.c	/^SPECIAL(peter)$/;"	f
SPECIAL	castle.c	/^SPECIAL(tim)$/;"	f
SPECIAL	castle.c	/^SPECIAL(tom)$/;"	f
SPECIAL	castle.c	/^SPECIAL(training_master)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(craps){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(craps1){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(high_dice){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(high_dice1){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(pokies)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(pokies1)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(pokies2)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(pokies3)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(roulette)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(roulette1)$/;"	f
SPECIAL	gambling.c	/^SPECIAL(seven){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(seven1){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(triples){$/;"	f
SPECIAL	gambling.c	/^SPECIAL(triples1){$/;"	f
SPECIAL	mail.c	/^SPECIAL(postmaster)$/;"	f
SPECIAL	objsave.c	/^SPECIAL(receptionist)$/;"	f
SPECIAL	shop.c	/^SPECIAL(shop_keeper)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(avengers_guard)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(guardian_guard)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(jedi_guard)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(quest_sentry)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(rose_club_guard)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(uss_guard)$/;"	f
SPECIAL	struct.h	24;"	d
SPECIAL	structs.h	21;"	d
SPELL_ACID_BREATH	spells.h	164;"	d
SPELL_ADV_HEAL	spells.h	92;"	d
SPELL_ANIMATE_DEAD	spells.h	84;"	d
SPELL_ARMOR	spells.h	40;"	d
SPELL_BLESS	spells.h	42;"	d
SPELL_BLINDNESS	spells.h	43;"	d
SPELL_BURNING_HANDS	spells.h	44;"	d
SPELL_CALL_LIGHTNING	spells.h	45;"	d
SPELL_CHANGED	spells.h	124;"	d
SPELL_CHARM	spells.h	46;"	d
SPELL_CHILL_TOUCH	spells.h	47;"	d
SPELL_CLONE	spells.h	48;"	d
SPELL_CLOUD_KILL	spells.h	101;"	d
SPELL_COLOR_SPRAY	spells.h	49;"	d
SPELL_CONTROL_WEATHER	spells.h	50;"	d
SPELL_CREATE_FOOD	spells.h	51;"	d
SPELL_CREATE_WATER	spells.h	52;"	d
SPELL_CURE_BLIND	spells.h	53;"	d
SPELL_CURE_CRITIC	spells.h	54;"	d
SPELL_CURE_LIGHT	spells.h	55;"	d
SPELL_CURSE	spells.h	56;"	d
SPELL_DETECT_ALIGN	spells.h	57;"	d
SPELL_DETECT_INVIS	spells.h	58;"	d
SPELL_DETECT_MAGIC	spells.h	59;"	d
SPELL_DETECT_POISON	spells.h	60;"	d
SPELL_DISPEL_EVIL	spells.h	61;"	d
SPELL_DISPEL_GOOD	spells.h	85;"	d
SPELL_DIVINE_HEAL	spells.h	115;"	d
SPELL_DIVINE_PROTECTION	spells.h	111;"	d
SPELL_DRAGON	spells.h	106;"	d
SPELL_EARTHQUAKE	spells.h	62;"	d
SPELL_ENCHANT_WEAPON	spells.h	63;"	d
SPELL_ENERGY_DRAIN	spells.h	64;"	d
SPELL_FEAR	spells.h	94;"	d
SPELL_FINGERDEATH	spells.h	91;"	d
SPELL_FIREBALL	spells.h	65;"	d
SPELL_FIRE_BREATH	spells.h	161;"	d
SPELL_FIRE_SHIELD	spells.h	117;"	d
SPELL_FIRE_WALL	spells.h	118;"	d
SPELL_FLY	spells.h	99;"	d
SPELL_FROST_BREATH	spells.h	163;"	d
SPELL_GAS_BREATH	spells.h	162;"	d
SPELL_GATE	spells.h	95;"	d
SPELL_GROUP_ARMOR	spells.h	86;"	d
SPELL_GROUP_HEAL	spells.h	87;"	d
SPELL_GROUP_RECALL	spells.h	88;"	d
SPELL_GROUP_SANCTUARY	spells.h	97;"	d
SPELL_HARM	spells.h	66;"	d
SPELL_HASTE	spells.h	112;"	d
SPELL_HEAL	spells.h	67;"	d
SPELL_HOLY_AID	spells.h	110;"	d
SPELL_IDENTIFY	spells.h	120;"	d
SPELL_INFRAVISION	spells.h	89;"	d
SPELL_INVISIBLE	spells.h	68;"	d
SPELL_LIGHTNING_BOLT	spells.h	69;"	d
SPELL_LIGHTNING_BREATH	spells.h	165;"	d
SPELL_LIGHT_SHIELD	spells.h	116;"	d
SPELL_LOCATE_OBJECT	spells.h	70;"	d
SPELL_MAGIC_MISSILE	spells.h	71;"	d
SPELL_MANA	spells.h	107;"	d
SPELL_METEOR_SWARM	spells.h	96;"	d
SPELL_NOHASSLE	spells.h	113;"	d
SPELL_PARALYZE	spells.h	102;"	d
SPELL_PLASMA_BLAST	spells.h	100;"	d
SPELL_POISON	spells.h	72;"	d
SPELL_PROT_FROM_EVIL	spells.h	73;"	d
SPELL_PROT_FROM_GOOD	spells.h	119;"	d
SPELL_REFRESH	spells.h	93;"	d
SPELL_REMOVE_CURSE	spells.h	74;"	d
SPELL_REMOVE_PARA	spells.h	103;"	d
SPELL_REMOVE_POISON	spells.h	82;"	d
SPELL_RESERVED_DBC	spells.h	36;"	d
SPELL_SANCTUARY	spells.h	75;"	d
SPELL_SENSE_LIFE	spells.h	83;"	d
SPELL_SERPENT_SKIN	spells.h	98;"	d
SPELL_SHOCKING_GRASP	spells.h	76;"	d
SPELL_SLEEP	spells.h	77;"	d
SPELL_SPIRIT_ARMOR	spells.h	109;"	d
SPELL_STONESKIN	spells.h	114;"	d
SPELL_STRENGTH	spells.h	78;"	d
SPELL_SUMMON	spells.h	79;"	d
SPELL_TELEPORT	spells.h	41;"	d
SPELL_TYPE_POTION	spells.h	247;"	d
SPELL_TYPE_SCROLL	spells.h	250;"	d
SPELL_TYPE_SPELL	spells.h	246;"	d
SPELL_TYPE_STAFF	spells.h	249;"	d
SPELL_TYPE_WAND	spells.h	248;"	d
SPELL_VENTRILOQUATE	spells.h	80;"	d
SPELL_WATERBREATHE	spells.h	104;"	d
SPELL_WATERWALK	spells.h	90;"	d
SPELL_WHIRLWIND	spells.h	108;"	d
SPELL_WORD_OF_RECALL	spells.h	81;"	d
SPELL_WRAITH_TOUCH	spells.h	105;"	d
STAMP_PRICE	mail.h	23;"	d
START_GAME	casino.h	4;"	d
START_MESSG	config.c	/^char *START_MESSG =$/;"	v
STATE	utils.h	360;"	d
STRENGTH_AFF_APPLY_INDEX	utils.h	332;"	d
STRENGTH_REAL_APPLY_INDEX	utils.h	324;"	d
SUN_DARK	struct.h	526;"	d
SUN_DARK	structs.h	555;"	d
SUN_LIGHT	struct.h	528;"	d
SUN_LIGHT	structs.h	557;"	d
SUN_RISE	struct.h	527;"	d
SUN_RISE	structs.h	556;"	d
SUN_SET	struct.h	529;"	d
SUN_SET	structs.h	558;"	d
S_DATA	shop.h	76;"	d
S_LEN	shop.h	77;"	d
TARDIS_FLIGHT	spec_procs.c	4066;"	d	file:
TARDIS_LANDED	spec_procs.c	4067;"	d	file:
TARDIS_ROOM	spec_procs.c	4064;"	d	file:
TARDIS_VNUM	spec_procs.c	4065;"	d	file:
TAR_CHAR_ROOM	spells.h	202;"	d
TAR_CHAR_WORLD	spells.h	203;"	d
TAR_FIGHT_SELF	spells.h	204;"	d
TAR_FIGHT_VICT	spells.h	205;"	d
TAR_IGNORE	spells.h	201;"	d
TAR_NOT_SELF	spells.h	207;"	d
TAR_OBJ_EQUIP	spells.h	211;"	d
TAR_OBJ_INV	spells.h	208;"	d
TAR_OBJ_ROOM	spells.h	209;"	d
TAR_OBJ_WORLD	spells.h	210;"	d
TAR_SELF_ONLY	spells.h	206;"	d
TEMPERATURE	act.movement.c	57;"	d	file:
THIRST	struct.h	522;"	d
THIRST	structs.h	546;"	d
TOB_ROOM	spec_procs.c	4677;"	d	file:
TOB_VNUM	spec_procs.c	4676;"	d	file:
TOGGLE_BIT	utils.h	172;"	d
TOG_OFF	act.other.c	1797;"	d	file:
TOG_ON	act.other.c	1798;"	d	file:
TOP_SPELL_DEFINE	spells.h	167;"	d
TOP_WORLDS	structs.h	34;"	d
TOP_WORLD_1	struct.h	33;"	d
TOP_WORLD_2	struct.h	34;"	d
TOP_WORLD_3	struct.h	35;"	d
TOROOM	graph.c	51;"	d	file:
TOROOM	house.h	47;"	d
TO_CHAR	comm.h	30;"	d
TO_NOTVICT	comm.h	29;"	d
TO_ROOM	comm.h	27;"	d
TO_SLEEP	comm.h	31;"	d
TO_VICT	comm.h	28;"	d
TRACK_THROUGH_DOORS	graph.c	11;"	d	file:
TRADE_NOCLERIC	shop.h	66;"	d
TRADE_NOEVIL	shop.h	63;"	d
TRADE_NOGOOD	shop.h	62;"	d
TRADE_NOMAGIC_USER	shop.h	65;"	d
TRADE_NONEUTRAL	shop.h	64;"	d
TRADE_NOTHIEF	shop.h	67;"	d
TRADE_NOWARRIOR	shop.h	68;"	d
TRUE	config.c	18;"	d	file:
TRUE	edit.h	26;"	d
TRUE	utils.h	489;"	d
TYPE_BITE	spells.h	177;"	d
TYPE_BLAST	spells.h	185;"	d
TYPE_BLUDGEON	spells.h	178;"	d
TYPE_CLAW	spells.h	181;"	d
TYPE_CRUSH	spells.h	179;"	d
TYPE_HIT	spells.h	173;"	d
TYPE_MAUL	spells.h	182;"	d
TYPE_PIERCE	spells.h	184;"	d
TYPE_POUND	spells.h	180;"	d
TYPE_PUNCH	spells.h	186;"	d
TYPE_SLASH	spells.h	176;"	d
TYPE_STAB	spells.h	187;"	d
TYPE_STING	spells.h	174;"	d
TYPE_SUFFERING	spells.h	190;"	d
TYPE_THRASH	spells.h	183;"	d
TYPE_UNDEFINED	spells.h	35;"	d
TYPE_WHIP	spells.h	175;"	d
TYPO_FILE	db.h	42;"	d
TimeStamp	debug.c	/^void TimeStamp(FILE *fd)$/;"	f
UNMARK	graph.c	49;"	d	file:
UNUSED	spell_parser.c	954;"	d	file:
UP	struct.h	42;"	d
UP	structs.h	47;"	d
UPPER	utils.h	126;"	d
USERS_FORMAT	act.informative.c	2050;"	d	file:
USING_LARGE	comm.h	42;"	d
USING_SMALL	comm.h	41;"	d
UU	spell_parser.c	953;"	d	file:
VALID_EDGE	graph.c	55;"	d	file:
VALID_EDGE	graph.c	59;"	d	file:
VAMP_ROOM	mobact.c	38;"	d	file:
VAMP_VNUM	structs.h	588;"	d
VANISH	act.obj.c	495;"	d	file:
VERSION3_TAG	shop.h	39;"	d
VIRTUAL	db.h	93;"	d
VNUM_MENU	edit.h	/^static char *VNUM_MENU =$/;"	v
Valid_Name	ban.c	/^int Valid_Name(char *newname)$/;"	f
WAIT_STATE	utils.h	354;"	d
WATCHPLAYER1	act.comm.c	24;"	d	file:
WATCHPLAYER2	act.comm.c	25;"	d	file:
WEAR_ABOUT	struct.h	313;"	d
WEAR_ABOUT	structs.h	325;"	d
WEAR_ARMS	struct.h	311;"	d
WEAR_ARMS	structs.h	323;"	d
WEAR_BODY	struct.h	306;"	d
WEAR_BODY	structs.h	318;"	d
WEAR_FEET	struct.h	309;"	d
WEAR_FEET	structs.h	321;"	d
WEAR_FINGER_L	struct.h	303;"	d
WEAR_FINGER_L	structs.h	315;"	d
WEAR_FINGER_R	struct.h	302;"	d
WEAR_FINGER_R	structs.h	314;"	d
WEAR_HANDS	struct.h	310;"	d
WEAR_HANDS	structs.h	322;"	d
WEAR_HEAD	struct.h	307;"	d
WEAR_HEAD	structs.h	319;"	d
WEAR_HOLD	struct.h	318;"	d
WEAR_HOLD	structs.h	330;"	d
WEAR_LEGS	struct.h	308;"	d
WEAR_LEGS	structs.h	320;"	d
WEAR_LIGHT	struct.h	301;"	d
WEAR_LIGHT	structs.h	313;"	d
WEAR_NECK_1	struct.h	304;"	d
WEAR_NECK_1	structs.h	316;"	d
WEAR_NECK_2	struct.h	305;"	d
WEAR_NECK_2	structs.h	317;"	d
WEAR_SHIELD	struct.h	312;"	d
WEAR_SHIELD	structs.h	324;"	d
WEAR_WAIST	struct.h	314;"	d
WEAR_WAIST	structs.h	326;"	d
WEAR_WIELD	struct.h	317;"	d
WEAR_WIELD	structs.h	329;"	d
WEAR_WRIST_L	struct.h	316;"	d
WEAR_WRIST_L	structs.h	328;"	d
WEAR_WRIST_R	struct.h	315;"	d
WEAR_WRIST_R	structs.h	327;"	d
WELC_MESSG	config.c	/^char *WELC_MESSG =$/;"	v
WEST	struct.h	41;"	d
WEST	structs.h	46;"	d
WHITESPACE	handler.c	62;"	d	file:
WHO_FORMAT	act.informative.c	1818;"	d	file:
WILL_BANK_MONEY	shop.h	140;"	d
WILL_START_FIGHT	shop.h	139;"	d
WIZLIST_FILE	db.h	34;"	d
WLD_PREFIX	db.h	21;"	d
WOLF_CHANGING	spec_procs.c	1834;"	d	file:
WOLF_NOCHANGE	spec_procs.c	1835;"	d	file:
WOLF_NORMAL	spec_procs.c	1833;"	d	file:
WOLF_ROOM	mobact.c	37;"	d	file:
WOLF_VNUM	structs.h	587;"	d
WRITE_LVL	boards.h	38;"	d
WriteDebug	debug.c	/^void WriteDebug(char * SourceFile, long SourceLine, char *fmt, ...)$/;"	f
X	spell_parser.c	956;"	d	file:
XMAS_BOX	spec_procs.c	4186;"	d	file:
XMAS_CANDY	spec_procs.c	4189;"	d	file:
XMAS_LOWER	spec_procs.c	4188;"	d	file:
XMAS_STRING	spec_procs.c	4190;"	d	file:
XMAS_UPPER	spec_procs.c	4187;"	d	file:
XNAME_FILE	db.h	46;"	d
XOR	edit.h	24;"	d
YES	config.c	19;"	d	file:
YESNO	utils.h	122;"	d
Z	db.c	1121;"	d	file:
Z	db.c	1208;"	d	file:
ZCMD	db.c	830;"	d	file:
ZN_LR_10	struct.h	492;"	d
ZN_LR_10	structs.h	517;"	d
ZN_LR_15	struct.h	493;"	d
ZN_LR_15	structs.h	518;"	d
ZN_LR_20	struct.h	494;"	d
ZN_LR_20	structs.h	519;"	d
ZN_LR_25	struct.h	495;"	d
ZN_LR_25	structs.h	520;"	d
ZN_LR_30	struct.h	496;"	d
ZN_LR_30	structs.h	521;"	d
ZN_LR_35	struct.h	497;"	d
ZN_LR_35	structs.h	522;"	d
ZN_LR_40	struct.h	498;"	d
ZN_LR_40	structs.h	523;"	d
ZN_LR_45	struct.h	499;"	d
ZN_LR_45	structs.h	524;"	d
ZN_LR_5	struct.h	491;"	d
ZN_LR_5	structs.h	516;"	d
ZN_LR_50	struct.h	500;"	d
ZN_LR_50	structs.h	525;"	d
ZN_LR_55	struct.h	501;"	d
ZN_LR_55	structs.h	526;"	d
ZN_LR_60	struct.h	502;"	d
ZN_LR_60	structs.h	527;"	d
ZN_LR_65	struct.h	503;"	d
ZN_LR_65	structs.h	528;"	d
ZN_LR_70	struct.h	504;"	d
ZN_LR_70	structs.h	529;"	d
ZN_LR_75	struct.h	505;"	d
ZN_LR_75	structs.h	530;"	d
ZN_LR_80	struct.h	506;"	d
ZN_LR_80	structs.h	531;"	d
ZN_LR_85	struct.h	507;"	d
ZN_LR_85	structs.h	532;"	d
ZN_LR_90	struct.h	508;"	d
ZN_LR_90	structs.h	533;"	d
ZN_LR_95	struct.h	509;"	d
ZN_LR_95	structs.h	534;"	d
ZN_LR_ET	struct.h	510;"	d
ZN_LR_ET	structs.h	535;"	d
ZN_LR_IMM	struct.h	511;"	d
ZN_LR_IMM	structs.h	536;"	d
ZN_LR_IMP	struct.h	512;"	d
ZN_LR_IMP	structs.h	537;"	d
ZN_NEWBIE	struct.h	490;"	d
ZN_NEWBIE	structs.h	515;"	d
ZN_NO_STEAL	struct.h	513;"	d
ZN_NO_STEAL	structs.h	538;"	d
ZN_NO_TELE	struct.h	514;"	d
ZN_NO_TELE	structs.h	539;"	d
ZN_PK_ALLOWED	struct.h	489;"	d
ZN_PK_ALLOWED	structs.h	514;"	d
ZONE_ERROR	db.c	1435;"	d	file:
ZONE_MENU	edit.h	/^static char *ZONE_MENU =$/;"	v
ZON_PREFIX	db.h	24;"	d
ZO_DEAD	db.c	1350;"	d	file:
Z_KINGS_C	castle.c	40;"	d	file:
__COMM_C__	comm.c	15;"	d	file:
__CONFIG_C__	config.c	14;"	d	file:
__DB_C__	db.c	11;"	d	file:
__INTERPRETER_C__	interpreter.c	16;"	d	file:
__MSHELL__	memdbg.c	53;"	d	file:
_clrlevel	screen.h	35;"	d
_parse_name	interpreter.c	/^int _parse_name(char *arg, char *name)$/;"	f
_write_one_node	ban.c	/^void _write_one_node(FILE * fp, struct ban_list_element * node)$/;"	f
a_type	struct.h	/^   int	a_type;			\/* Attack type				*\/$/;"	m	struct:message_list
a_type	structs.h	/^   int	a_type;			\/* Attack type				*\/$/;"	m	struct:message_list
abilities	struct.h	/^   struct char_ability_data abilities;$/;"	m	struct:char_file_u
abilities	structs.h	/^   struct char_ability_data abilities;$/;"	m	struct:char_file_u
account	struct.h	/^   int	account;$/;"	m	struct:rent_info
account	structs.h	/^   int	account;$/;"	m	struct:rent_info
act	comm.c	/^void act(char *str, int hide_invisible, struct char_data * ch,$/;"	f
act	struct.h	/^   long	act;			\/* act flag for NPC's; player flag for PC's *\/$/;"	m	struct:char_special_data_saved
act	structs.h	/^   long	act;			\/* act flag for NPC's; player flag for PC's *\/$/;"	m	struct:char_special_data_saved
act_nr	act.social.c	/^  int act_nr;$/;"	m	struct:social_messg
action_bits	constants.c	/^const char *action_bits[] = {$/;"	v
action_description	struct.h	/^   char	*action_description;      \/* What to write when used          *\/$/;"	m	struct:obj_data
action_description	structs.h	/^   char	*action_description;      \/* What to write when used          *\/$/;"	m	struct:obj_data
add_clan_table	db.c	/^void add_clan_table(struct char_file_u ch)$/;"	f
add_follower	utils.c	/^void add_follower(struct char_data * ch, struct char_data * leader)$/;"	f
add_room_to_llist	llist.c	/^struct llist_node *add_room_to_llist(struct llist_node *llist_root, struct room_data *room)$/;"	f
add_room_to_llist	llist.h	/^struct llist_node *add_room_to_llist(struct llist_node *llist_root, struct room_data *room)$/;"	f
add_to_list	shop.c	/^int add_to_list(struct shop_buy_data * list, int type, int *len, int *val)$/;"	f
advance_level	class.c	/^void advance_level(struct char_data * ch)$/;"	f
aff_abils	struct.h	/^   struct char_ability_data aff_abils;	 \/* Abils with spells\/stones\/etc  *\/$/;"	m	struct:char_data
aff_abils	structs.h	/^   struct char_ability_data aff_abils;	 \/* Abils with spells\/stones\/etc  *\/$/;"	m	struct:char_data
affect_from_char	handler.c	/^void affect_from_char(struct char_data * ch, sh_int type)$/;"	f
affect_join	handler.c	/^void affect_join(struct char_data * ch, struct affected_type * af,$/;"	f
affect_modify	handler.c	/^void affect_modify(struct char_data * ch, byte loc, sbyte mod, long bitv,$/;"	f
affect_remove	handler.c	/^void affect_remove(struct char_data * ch, struct affected_type * af)$/;"	f
affect_to_char	handler.c	/^void affect_to_char(struct char_data * ch, struct affected_type * af)$/;"	f
affect_total	handler.c	/^void affect_total(struct char_data * ch)$/;"	f
affect_update	magic.c	/^void affect_update(void)$/;"	f
affected	struct.h	/^   struct affected_type *affected;       \/* affected by what spells       *\/$/;"	m	struct:char_data
affected	struct.h	/^   struct affected_type affected[MAX_AFFECT];$/;"	m	struct:char_file_u
affected	struct.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];  \/* affects *\/$/;"	m	struct:obj_data
affected	struct.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];$/;"	m	struct:obj_file_elem
affected	structs.h	/^   struct affected_type *affected;       \/* affected by what spells       *\/$/;"	m	struct:char_data
affected	structs.h	/^   struct affected_type affected[MAX_AFFECT];$/;"	m	struct:char_file_u
affected	structs.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];  \/* affects *\/$/;"	m	struct:obj_data
affected	structs.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];$/;"	m	struct:obj_file_elem
affected_bits	constants.c	/^const char *affected_bits[] =$/;"	v
affected_by	struct.h	/^   long	affected_by;		\/* Bitvector for spells\/skills affected by *\/$/;"	m	struct:char_special_data_saved
affected_by	structs.h	/^   long	affected_by;		\/* Bitvector for spells\/skills affected by *\/$/;"	m	struct:char_special_data_saved
affected_by_spell	handler.c	/^bool affected_by_spell(struct char_data * ch, sh_int type)$/;"	f
affected_type	struct.h	/^struct affected_type {$/;"	s
affected_type	structs.h	/^struct affected_type {$/;"	s
age	db.h	/^   int	age;                \/* current age of this zone (minutes) *\/$/;"	m	struct:zone_data
age	utils.c	/^struct time_info_data age(struct char_data * ch)$/;"	f
alias	interpreter.h	/^  char *alias;$/;"	m	struct:alias
alias	interpreter.h	/^struct alias {$/;"	s
aliased	struct.h	/^   int aliased;$/;"	m	struct:txt_block
aliased	structs.h	/^   int aliased;$/;"	m	struct:txt_block
aliases	struct.h	/^   struct alias *aliases;		\/* Character's aliases	*\/$/;"	m	struct:player_special_data
aliases	structs.h	/^   struct alias *aliases;		\/* Character's aliases	*\/$/;"	m	struct:player_special_data
alignment	struct.h	/^   int	alignment;		\/* +-1000 for alignments                *\/$/;"	m	struct:char_special_data_saved
alignment	structs.h	/^   int	alignment;		\/* +-1000 for alignments                *\/$/;"	m	struct:char_special_data_saved
allowed_room	act.movement.c	/^int allowed_room(struct char_data * ch,int flag)$/;"	f
allowed_zone	act.movement.c	/^int allowed_zone(struct char_data * ch,int flag)$/;"	f
already_has_obj	shop.c	/^int already_has_obj(struct char_data *ch, struct obj_data *obj, struct obj_data *list)$/;"	f
amount	structs.h	/^        int amount;                     \/\/ Bet$/;"	m	struct:game_item
another_hour	weather.c	/^void another_hour(int mode)$/;"	f
any_one_arg	interpreter.c	/^char *any_one_arg(char *argument, char *first_arg)$/;"	f
appear	fight.c	/^void appear(struct char_data * ch)$/;"	f
apply_ac	handler.c	/^int apply_ac(struct char_data * ch, int eq_pos)$/;"	f
apply_saving_throw	struct.h	/^   sh_int apply_saving_throw[5]; \/* Saving throw (Bonuses)		*\/$/;"	m	struct:char_special_data_saved
apply_saving_throw	structs.h	/^   sh_int apply_saving_throw[5]; \/* Saving throw (Bonuses)		*\/$/;"	m	struct:char_special_data_saved
apply_types	constants.c	/^const char *apply_types[] = {$/;"	v
areas	db.c	/^char *areas = NULL;		\/* areas, zones			 *\/$/;"	v
arg	db.h	/^char	arg[MAX_STRING_LENGTH];$/;"	v
arg1	db.h	/^   int	arg1;		\/*                                      *\/$/;"	m	struct:reset_com
arg2	db.h	/^   int	arg2;		\/* Arguments to the command             *\/$/;"	m	struct:reset_com
arg3	db.h	/^   int	arg3;		\/*                                      *\/$/;"	m	struct:reset_com
argument_interpreter	interpreter.h	40;"	d
armor	struct.h	/^   sh_int armor;        \/* Internal -100..100, external -10..10 AC *\/$/;"	m	struct:char_point_data
armor	structs.h	/^   sh_int armor;        \/* Internal -100..100, external -10..10 AC *\/$/;"	m	struct:char_point_data
assign_kings_castle	castle.c	/^void assign_kings_castle(void)$/;"	f
assign_mobiles	spec_assign.c	/^void assign_mobiles(void)$/;"	f
assign_objects	spec_assign.c	/^void assign_objects(void)$/;"	f
assign_rooms	spec_assign.c	/^void assign_rooms(void)$/;"	f
assign_the_shopkeepers	shop.c	/^void assign_the_shopkeepers(void)$/;"	f
assister	structs.h	/^  struct char_data *assister;$/;"	m	struct:assisters_type
assisters_type	structs.h	/^struct assisters_type {$/;"	s
atrium	house.h	/^   sh_int atrium;		\/* vnum of house's atrium	*\/$/;"	m	struct:house_control_rec
atrium	house.h	/^   sh_int atrium;		\/* vnum of house's atrium	*\/$/;"	m	struct:house_control_rec_old
attack_hit_text	fight.c	/^struct attack_hit_type attack_hit_text[] =$/;"	v
attack_hit_type	spells.h	/^struct attack_hit_type {$/;"	s
attack_type	struct.h	/^   int	attack_type;        \/* The Attack Type Bitvector for NPC's     *\/$/;"	m	struct:mob_special_data
attack_type	structs.h	/^   int	attack_type;        \/* The Attack Type Bitvector for NPC's     *\/$/;"	m	struct:mob_special_data
attacker_msg	struct.h	/^   char	*attacker_msg;  \/* message to attacker *\/$/;"	m	struct:msg_type
attacker_msg	structs.h	/^   char	*attacker_msg;  \/* message to attacker *\/$/;"	m	struct:msg_type
auto_save	config.c	/^int auto_save = YES;$/;"	v
autoassist	structs.h	/^   struct char_data *autoassist;  \/* The char to be autoassisted	*\/$/;"	m	struct:char_special_data
autoassisters	structs.h	/^   struct assisters_type *autoassisters;  \/* For players assisting char	  *\/$/;"	m	struct:char_data
autosave_time	config.c	/^int autosave_time = 5;$/;"	v
avail_descs	comm.c	/^int avail_descs = 0;		\/* max descriptors available *\/$/;"	v
background	db.c	/^char *background = NULL;	\/* background story		 *\/$/;"	v
backstr	structs.h	/^   char *backstr;               \/* added for handling abort buffers     *\/$/;"	m	struct:descriptor_data
bad_pws	struct.h	/^   ubyte	bad_pws;		\/* number of bad pw attemps this login	*\/$/;"	m	struct:descriptor_data
bad_pws	struct.h	/^   ubyte bad_pws;		\/* number of bad password attemps	*\/$/;"	m	struct:player_special_data_saved
bad_pws	structs.h	/^   ubyte	bad_pws;		\/* number of bad pw attemps this login	*\/$/;"	m	struct:descriptor_data
bad_pws	structs.h	/^   ubyte bad_pws;		\/* number of bad password attemps	*\/$/;"	m	struct:player_special_data_saved
ban_list	ban.c	/^struct ban_list_element *ban_list = NULL;$/;"	v
ban_list_element	db.h	/^struct ban_list_element {$/;"	s
ban_types	ban.c	/^char *ban_types[] = {$/;"	v
bankAccount	shop.h	/^   int	 bankAccount;		\/* Store all gold over 15000 (disabled)	*\/$/;"	m	struct:shop_data
bank_gold	struct.h	/^   int	bank_gold;	\/* Gold the char has in a bank account	   *\/$/;"	m	struct:char_point_data
bank_gold	structs.h	/^   int	bank_gold;	\/* Gold the char has in a bank account	   *\/$/;"	m	struct:char_point_data
banzaii	castle.c	/^int banzaii(struct char_data * ch)$/;"	f
bfs_clear_queue	graph.c	/^void bfs_clear_queue(void)$/;"	f
bfs_dequeue	graph.c	/^void bfs_dequeue(void)$/;"	f
bfs_enqueue	graph.c	/^void bfs_enqueue(sh_int room, char dir)$/;"	f
bfs_queue_struct	graph.c	/^struct bfs_queue_struct {$/;"	s	file:
big_wheel	gambling.c	/^void big_wheel(struct char_data *ch, char *guess, int bet)$/;"	f
birth	struct.h	/^   time_t birth;    \/* This represents the characters age                *\/$/;"	m	struct:time_data
birth	struct.h	/^   time_t birth;   \/* Time of birth of character     *\/$/;"	m	struct:char_file_u
birth	structs.h	/^   time_t birth;    \/* This represents the characters age                *\/$/;"	m	struct:time_data
birth	structs.h	/^   time_t birth;   \/* Time of birth of character     *\/$/;"	m	struct:char_file_u
bitvector	shop.h	/^   int	 bitvector;		\/* Can attack? Use bank? Cast here?	*\/$/;"	m	struct:shop_data
bitvector	struct.h	/^   long	bitvector;	\/* To set chars bits                *\/$/;"	m	struct:obj_flag_data
bitvector	struct.h	/^   long	bitvector;       \/* Tells which bits to set (AFF_XXX)       *\/$/;"	m	struct:affected_type
bitvector	struct.h	/^   long	bitvector;$/;"	m	struct:obj_file_elem
bitvector	structs.h	/^   long	bitvector;	\/* To set chars bits                *\/$/;"	m	struct:obj_flag_data
bitvector	structs.h	/^   long	bitvector;       \/* Tells which bits to set (AFF_XXX)       *\/$/;"	m	struct:affected_type
bitvector	structs.h	/^   long	bitvector;$/;"	m	struct:obj_file_elem
blackjack	structs.h	/^} blackjack;$/;"	v
blackjack_data	structs.h	/^struct blackjack_data {$/;"	s
block_type	mail.h	/^   long	block_type;		\/* -1 if header block, -2 if last data block$/;"	m	struct:data_block_type_d
block_type	mail.h	/^   long	block_type;		\/* is this a header or data block?	*\/$/;"	m	struct:header_block_type_d
block_way	castle.c	/^int block_way(struct char_data * ch, int cmd, char *arg, int iIn_room,$/;"	f
board_info	boards.c	/^struct board_info_type board_info[NUM_OF_BOARDS] = {$/;"	v
board_info_type	boards.h	/^struct board_info_type {$/;"	s
board_msginfo	boards.h	/^struct board_msginfo {$/;"	s
bonus	struct.h	/^   byte bonus;       \/* how many practices player gains per lev *\/$/;"	m	struct:wis_app_type
bonus	structs.h	/^   byte bonus;       \/* how many practices player gains per lev *\/$/;"	m	struct:wis_app_type
bool	struct.h	/^typedef char			bool;$/;"	t
bool	structs.h	/^typedef char			bool;$/;"	t
boot_db	db.c	/^void boot_db(void)$/;"	f
boot_social_messages	act.social.c	/^void boot_social_messages(void)$/;"	f
boot_the_shops	shop.c	/^void boot_the_shops(FILE * shop_f, char *filename, int rec_count)$/;"	f
boot_the_shops	shopconv.c	/^int	boot_the_shops(FILE *shop_f, FILE *newshop_f, char *filename)$/;"	f
boot_time	db.c	/^long boot_time = 0;		\/* time of mud boot		 *\/$/;"	v
buf	db.h	/^char	buf[MAX_STRING_LENGTH];$/;"	v
buf1	db.h	/^char	buf1[MAX_STRING_LENGTH];$/;"	v
buf2	db.h	/^char	buf2[MAX_STRING_LENGTH];$/;"	v
buf_largecount	comm.c	/^int buf_largecount = 0;		\/* # of large buffers which exist *\/$/;"	v
buf_overflows	comm.c	/^int buf_overflows = 0;		\/* # of overflows of output *\/$/;"	v
buf_switches	comm.c	/^int buf_switches = 0;		\/* # of switches from small to large buf *\/$/;"	v
bufpool	comm.c	/^struct txt_block *bufpool = 0;	\/* pool of large output buffers *\/$/;"	v
bufptr	struct.h	/^   int  bufptr;			\/* ptr to end of current output		*\/$/;"	m	struct:descriptor_data
bufptr	structs.h	/^   int  bufptr;			\/* ptr to end of current output		*\/$/;"	m	struct:descriptor_data
bufspace	struct.h	/^   int	bufspace;		\/* space left in the output buffer	*\/$/;"	m	struct:descriptor_data
bufspace	structs.h	/^   int	bufspace;		\/* space left in the output buffer	*\/$/;"	m	struct:descriptor_data
build_class_menu	class.c	/^void build_class_menu()$/;"	f
build_help_index	modify.c	/^struct help_index_element *build_help_index(FILE * fl, int *num)$/;"	f
build_player_index	db.c	/^void build_player_index(void)$/;"	f
built_on	house.h	/^   long built_on;		\/* date this house was built	*\/$/;"	m	struct:house_control_rec
built_on	house.h	/^   long built_on;		\/* date this house was built	*\/$/;"	m	struct:house_control_rec_old
buy_price	shop.c	/^int buy_price(struct obj_data * obj, int shop_nr)$/;"	f
byte	struct.h	/^typedef char			byte;$/;"	t
byte	structs.h	/^typedef char			byte;$/;"	t
bzero	utils.h	571;"	d
calcSlotResult	casino.c	/^void calcSlotResult(struct char_data *ch, int reel[5], int amount ){$/;"	f
call_magic	spell_parser.c	/^int call_magic(struct char_data * caster, struct char_data * cvict,$/;"	f
canSplit	casino.c	/^int canSplit(int playernum) {$/;"	f
can_take_obj	act.obj.c	/^int can_take_obj(struct char_data * ch, struct obj_data * obj)$/;"	f
carbon_copy	modify.c	/^void carbon_copy(struct descriptor_data *d, char *msg, int ccsize) {$/;"	f
cards	structs.h	/^        int cards[MAX_GAME_BETS * 2][6];\/\/ 5 cards for every player and every dealer and info card$/;"	m	struct:blackjack_data
carried_by	struct.h	/^   struct char_data *carried_by;  \/* Carried by :NULL in room\/conta   *\/$/;"	m	struct:obj_data
carried_by	structs.h	/^   struct char_data *carried_by;  \/* Carried by :NULL in room\/conta   *\/$/;"	m	struct:obj_data
carry_items	struct.h	/^   byte carry_items;		\/* Number of items carried		*\/$/;"	m	struct:char_special_data
carry_items	structs.h	/^   byte carry_items;		\/* Number of items carried		*\/$/;"	m	struct:char_special_data
carry_w	struct.h	/^   sh_int carry_w;  \/* Maximum weight that can be carrried *\/$/;"	m	struct:str_app_type
carry_w	structs.h	/^   sh_int carry_w;  \/* Maximum weight that can be carrried *\/$/;"	m	struct:str_app_type
carry_weight	struct.h	/^   int	carry_weight;		\/* Carried weight			*\/$/;"	m	struct:char_special_data
carry_weight	structs.h	/^   int	carry_weight;		\/* Carried weight			*\/$/;"	m	struct:char_special_data
carrying	struct.h	/^   struct obj_data *carrying;            \/* Head of list                  *\/$/;"	m	struct:char_data
carrying	structs.h	/^   struct obj_data *carrying;            \/* Head of list                  *\/$/;"	m	struct:char_data
casino	casino.h	/^SPECIAL(casino);$/;"	v
cassandra_in	act.wizard.c	/^void cassandra_in(struct char_data *ch)$/;"	f
cast_spell	spell_parser.c	/^int cast_spell(struct char_data * ch, struct char_data * tch,$/;"	f
ch	structs.h	/^        struct char_data *ch;           \/\/ Gambler$/;"	m	struct:game_item
cha	spells.h	/^   byte cha;$/;"	m	struct:spell_info_type
cha	struct.h	/^   sbyte cha;$/;"	m	struct:char_ability_data
cha	structs.h	/^   sbyte cha;$/;"	m	struct:char_ability_data
change	struct.h	/^   int	change;	\/* How fast and what way does it change. *\/$/;"	m	struct:weather_data
change	structs.h	/^   int	change;	\/* How fast and what way does it change. *\/$/;"	m	struct:weather_data
change_alignment	fight.c	/^void change_alignment(struct char_data * ch, struct char_data * victim)$/;"	f
char_ability_data	struct.h	/^struct char_ability_data {$/;"	s
char_ability_data	structs.h	/^struct char_ability_data {$/;"	s
char_auto	act.social.c	/^  char *char_auto;$/;"	m	struct:social_messg
char_clan_data	structs.h	/^struct char_clan_data {$/;"	s
char_data	struct.h	/^struct char_data {$/;"	s
char_data	structs.h	/^struct char_data {$/;"	s
char_file_u	struct.h	/^struct char_file_u {$/;"	s
char_file_u	structs.h	/^struct char_file_u {$/;"	s
char_found	act.social.c	/^  char *char_found;		\/* if NULL, read no further, ignore args *\/$/;"	m	struct:social_messg
char_from_room	handler.c	/^void char_from_room(struct char_data * ch)$/;"	f
char_no_arg	act.social.c	/^  char *char_no_arg;$/;"	m	struct:social_messg
char_player_data	struct.h	/^struct char_player_data {$/;"	s
char_player_data	structs.h	/^struct char_player_data {$/;"	s
char_point_data	struct.h	/^struct char_point_data {$/;"	s
char_point_data	structs.h	/^struct char_point_data {$/;"	s
char_special_data	struct.h	/^struct char_special_data {$/;"	s
char_special_data	structs.h	/^struct char_special_data {$/;"	s
char_special_data_saved	struct.h	/^struct char_special_data_saved {$/;"	s
char_special_data_saved	structs.h	/^struct char_special_data_saved {$/;"	s
char_specials	struct.h	/^   struct char_special_data char_specials;	\/* PC\/NPC specials	  *\/$/;"	m	struct:char_data
char_specials	structs.h	/^   struct char_special_data char_specials;	\/* PC\/NPC specials	  *\/$/;"	m	struct:char_data
char_specials_saved	struct.h	/^   struct char_special_data_saved char_specials_saved;$/;"	m	struct:char_file_u
char_specials_saved	structs.h	/^   struct char_special_data_saved char_specials_saved;$/;"	m	struct:char_file_u
char_to_room	handler.c	/^void char_to_room(struct char_data * ch, int room)$/;"	f
char_to_store	db.c	/^void char_to_store(struct char_data * ch, struct char_file_u * st)$/;"	f
char_wait_state	struct.h	/^   int char_wait_state;			\/* times for when BASH fails *\/$/;"	m	struct:player_special_data
char_wait_state	structs.h	/^   int char_wait_state;			\/* times for when BASH fails *\/$/;"	m	struct:player_special_data
character	struct.h	/^   struct char_data *character;	\/* linked to char			*\/$/;"	m	struct:descriptor_data
character	structs.h	/^   struct char_data *character;	\/* linked to char			*\/$/;"	m	struct:descriptor_data
character_list	db.c	/^struct char_data *character_list = NULL;	\/* global linked list of$/;"	v
check_autowiz	limits.c	/^void check_autowiz(struct char_data * ch)$/;"	f
check_blackjack	casino.c	/^void check_blackjack() {$/;"	f
check_clan	db.c	/^int check_clan ( struct char_data *ch , struct char_data *vict , int sub_allow  ) $/;"	f
check_environment_effect	act.movement.c	/^int check_environment_effect(struct char_data *ch)$/;"	f
check_games	casino.c	/^void check_games() {$/;"	f
check_idling	limits.c	/^void check_idling(struct char_data * ch)$/;"	f
check_killer	fight.c	/^void check_killer(struct char_data * ch, struct char_data * vict)$/;"	f
check_races	casino.c	/^void check_races() {$/;"	f
check_start_rooms	db.c	/^void check_start_rooms(void)$/;"	f
checkpointing	comm.c	/^void checkpointing()$/;"	f
circle_follow	utils.c	/^bool circle_follow(struct char_data * ch, struct char_data * victim)$/;"	f
circle_reboot	comm.c	/^int circle_reboot = 0;		\/* reboot the game after a shutdown *\/$/;"	v
circle_shutdown	comm.c	/^int circle_shutdown = 0;	\/* clean shutdown *\/$/;"	v
circlemud_version	constants.c	/^const char circlemud_version[] = {$/;"	v
clan_boot	db.c	/^void clan_boot ( void )$/;"	f
clan_data	struct.h	/^struct clan_data {$/;"	s
clan_data	structs.h	/^struct clan_data {$/;"	s
clan_info	db.h	/^struct clan_data clan_info[CLAN_NUM]; $/;"	v
clan_level	struct.h	/^   int clan_level;$/;"	m	struct:player_special_data_saved
clan_level	structs.h	/^   int clan_level;$/;"	m	struct:player_special_data_saved
clan_level	structs.h	/^  int clan_level;$/;"	m	struct:char_clan_data
clan_num	struct.h	/^   int clan_num;$/;"	m	struct:player_special_data_saved
clan_num	structs.h	/^   int clan_num;$/;"	m	struct:player_special_data_saved
clan_tables	db.h	/^char clan_tables[CLAN_NUM][MAX_STRING_LENGTH];  $/;"	v
class_abbrevs	class.c	/^const char *class_abbrevs[] = {$/;"	v
class_info	class.c	/^char class_info[15*50]="\\r\\n";$/;"	v
class_menu	class.c	/^char class_menu[15*50]="\\r\\n";$/;"	v
class_stat_menu	class.c	/^const char *class_stat_menu =$/;"	v
cleaning	castle.c	/^SPECIAL(cleaning);$/;"	v
clearMemory	mobact.c	/^void clearMemory(struct char_data * ch)$/;"	f
clear_char	db.c	/^void clear_char(struct char_data * ch)$/;"	f
clear_object	db.c	/^void clear_object(struct obj_data * obj)$/;"	f
close1	shop.h	/^   int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close2	shop.h	/^   int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close_socket	comm.c	/^void close_socket(struct descriptor_data * d)$/;"	f
clr	screen.h	37;"	d
cls	edit.h	39;"	d
cmd	act.wizard.c	/^  char *cmd;$/;"	m	struct:set_struct
cmd	db.h	/^   struct reset_com *cmd;   \/* command table for reset	          *\/$/;"	m	struct:zone_data
cmd	spec_procs.c	/^  char *cmd;$/;"	m	struct:social_type
cmd_emote	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_info	interpreter.c	/^const struct command_info cmd_info[] = {$/;"	v
cmd_puke	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_say	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_slap	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_sort_info	act.informative.c	/^} *cmd_sort_info = NULL;$/;"	v
cmd_tell	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
color_liquid	constants.c	/^const char *color_liquid[] =$/;"	v
combat_list	fight.c	/^struct char_data *combat_list = NULL;	\/* head of l-list of fighting chars *\/$/;"	v
command	db.h	/^   char	command;   \/* current command                      *\/$/;"	m	struct:reset_com
command	interpreter.h	/^   char *command;$/;"	m	struct:command_info
command_info	interpreter.h	/^struct command_info {$/;"	s
command_interpreter	interpreter.c	/^void command_interpreter(struct char_data * ch, char *argument)$/;"	f
command_pointer	interpreter.h	/^   void	(*command_pointer)$/;"	m	struct:command_info
con	spells.h	/^   byte con;$/;"	m	struct:spell_info_type
con	struct.h	/^   sbyte con;$/;"	m	struct:char_ability_data
con	structs.h	/^   sbyte con;$/;"	m	struct:char_ability_data
con_app	constants.c	/^struct con_app_type con_app[36] = {$/;"	v
con_app_type	struct.h	/^struct con_app_type {$/;"	s
con_app_type	structs.h	/^struct con_app_type {$/;"	s
conditions	struct.h	/^   sbyte conditions[3];         \/* Drunk, full, thirsty			*\/$/;"	m	struct:player_special_data_saved
conditions	structs.h	/^   sbyte conditions[3];         \/* Drunk, full, thirsty			*\/$/;"	m	struct:player_special_data_saved
connected	struct.h	/^   int	connected;		\/* mode of 'connectedness'		*\/$/;"	m	struct:descriptor_data
connected	structs.h	/^   int	connected;		\/* mode of 'connectedness'		*\/$/;"	m	struct:descriptor_data
connected_types	constants.c	/^const char *connected_types[] = {$/;"	v
container_bits	constants.c	/^const char *container_bits[] = {$/;"	v
contains	struct.h	/^   struct obj_data *contains;     \/* Contains objects                 *\/$/;"	m	struct:obj_data
contains	structs.h	/^   struct obj_data *contains;     \/* Contains objects                 *\/$/;"	m	struct:obj_data
contents	struct.h	/^   struct obj_data *contents;   \/* List of items in room              *\/$/;"	m	struct:room_data
contents	structs.h	/^   struct obj_data *contents;   \/* List of items in room              *\/$/;"	m	struct:room_data
copy_clan_tables	db.c	/^void copy_clan_tables(void)$/;"	f
cost	struct.h	/^   int	cost;		\/* Value when sold (gp.)            *\/$/;"	m	struct:obj_flag_data
cost	structs.h	/^   int	cost;		\/* Value when sold (gp.)            *\/$/;"	m	struct:obj_flag_data
cost_per_day	struct.h	/^   int	cost_per_day;	\/* Cost to keep pr. real day        *\/$/;"	m	struct:obj_flag_data
cost_per_day	structs.h	/^   int	cost_per_day;	\/* Cost to keep pr. real day        *\/$/;"	m	struct:obj_flag_data
count_hash_records	db.c	/^int count_hash_records(FILE * fl)$/;"	f
count_pages	modify.c	/^int count_pages(char *str)$/;"	f
crash_file_timeout	config.c	/^int crash_file_timeout = 10;$/;"	v
create_char	db.c	/^struct char_data *create_char(void)$/;"	f
create_entry	db.c	/^int create_entry(char *name)$/;"	f
create_money	handler.c	/^struct obj_data *create_money(int amount)$/;"	f
create_obj	db.c	/^struct obj_data *create_obj(void)$/;"	f
create_room	olc-wld.c	/^struct room_data *create_room(long vnum)$/;"	f
credits	db.c	/^char *credits = NULL;		\/* game credits			 *\/$/;"	v
ctypes	act.informative.c	/^static char *ctypes[] = {$/;"	v	file:
customer_string	shop.c	/^char *customer_string(int shop_nr, int detailed)$/;"	f
dam_message	fight.c	/^void dam_message(int dam, struct char_data * ch, struct char_data * victim,$/;"	f
damage	fight.c	/^void damage(struct char_data * ch, struct char_data * victim, int dam,int attacktype)$/;"	f
damnodice	struct.h	/^   ubyte damnodice;          \/* The number of damage dice's	       *\/$/;"	m	struct:mob_special_data
damnodice	structs.h	/^   ubyte damnodice;          \/* The number of damage dice's	       *\/$/;"	m	struct:mob_special_data
damroll	struct.h	/^   sbyte damroll;       \/* Any bonus or penalty to the damage roll *\/$/;"	m	struct:char_point_data
damroll	structs.h	/^   sbyte damroll;       \/* Any bonus or penalty to the damage roll *\/$/;"	m	struct:char_point_data
damsizedice	struct.h	/^   ubyte damsizedice;        \/* The size of the damage dice's           *\/$/;"	m	struct:mob_special_data
damsizedice	structs.h	/^   ubyte damsizedice;        \/* The size of the damage dice's           *\/$/;"	m	struct:mob_special_data
data	shop.h	/^   int data[100];$/;"	m	struct:stack_data
data_block_type	mail.h	/^typedef struct data_block_type_d data_block_type;$/;"	t
data_block_type_d	mail.h	/^struct data_block_type_d {$/;"	s
date	db.h	/^   long	date;$/;"	m	struct:ban_list_element
day	struct.h	/^   byte hours, day, month;$/;"	m	struct:time_info_data
day	structs.h	/^   byte hours, day, month;$/;"	m	struct:time_info_data
death_cry	fight.c	/^void death_cry(struct char_data * ch)$/;"	f
debug	edit.h	19;"	d
debug_fd	debug.c	/^FILE *debug_fd;$/;"	v
debugit	limits.c	/^int debugit(int rnum,struct char_data *ch,int num, int vnum)$/;"	f
default_pos	struct.h	/^   byte default_pos;        \/* Default position for NPC                *\/$/;"	m	struct:mob_special_data
default_pos	structs.h	/^   byte default_pos;        \/* Default position for NPC                *\/$/;"	m	struct:mob_special_data
defensive	struct.h	/^   sh_int defensive;$/;"	m	struct:dex_app_type
defensive	structs.h	/^   sh_int defensive;$/;"	m	struct:dex_app_type
delete_doubledollar	interpreter.c	/^char *delete_doubledollar(char *string)$/;"	f
delete_llist	llist.c	/^struct llist_node *delete_llist(struct llist_node *llist_root, struct room_data *room)$/;"	f
delete_llist	llist.h	/^struct llist_node *delete_llist(struct llist_node *llist_root, struct room_data *room)$/;"	f
delta_stat	class.c	/^int delta_stat(int abil)$/;"	f
demote_level	class.c	/^void demote_level(struct char_data * ch,int newlevel)$/;"	f
desc	struct.h	/^   struct descriptor_data *desc;         \/* NULL for mobiles              *\/$/;"	m	struct:char_data
desc	structs.h	/^   struct descriptor_data *desc;         \/* NULL for mobiles              *\/$/;"	m	struct:char_data
desc_num	struct.h	/^   int	desc_num;		\/* unique num assigned to desc		*\/$/;"	m	struct:descriptor_data
desc_num	structs.h	/^   int	desc_num;		\/* unique num assigned to desc		*\/$/;"	m	struct:descriptor_data
description	struct.h	/^   char	*description;		  \/* When in room                     *\/$/;"	m	struct:obj_data
description	struct.h	/^   char	*description;             \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description	struct.h	/^   char	*description;           \/* Shown when entered                 *\/$/;"	m	struct:room_data
description	struct.h	/^   char	*description;  \/* Extra descriptions                   *\/$/;"	m	struct:char_player_data
description	struct.h	/^   char	description[EXDSCR_LENGTH];$/;"	m	struct:char_file_u
description	structs.h	/^   char	*description;		  \/* When in room                     *\/$/;"	m	struct:obj_data
description	structs.h	/^   char	*description;             \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description	structs.h	/^   char	*description;           \/* Shown when entered                 *\/$/;"	m	struct:room_data
description	structs.h	/^   char	*description;  \/* Extra descriptions                   *\/$/;"	m	struct:char_player_data
description	structs.h	/^   char	description[EXDSCR_LENGTH];$/;"	m	struct:char_file_u
descriptor	struct.h	/^   int	descriptor;		\/* file descriptor for socket		*\/$/;"	m	struct:descriptor_data
descriptor	structs.h	/^   int	descriptor;		\/* file descriptor for socket		*\/$/;"	m	struct:descriptor_data
descriptor_data	struct.h	/^struct descriptor_data {$/;"	s
descriptor_data	structs.h	/^struct descriptor_data {$/;"	s
descriptor_list	comm.c	/^struct descriptor_data *descriptor_list = NULL;	\/* master desc list *\/$/;"	v
dex	spells.h	/^   byte dex;$/;"	m	struct:spell_info_type
dex	struct.h	/^   sbyte dex;$/;"	m	struct:char_ability_data
dex	structs.h	/^   sbyte dex;$/;"	m	struct:char_ability_data
dex_app	constants.c	/^struct dex_app_type dex_app[36] = {$/;"	v
dex_app_skill	constants.c	/^const struct dex_skill_type dex_app_skill[36] = {$/;"	v
dex_app_type	struct.h	/^struct dex_app_type {$/;"	s
dex_app_type	structs.h	/^struct dex_app_type {$/;"	s
dex_skill_type	struct.h	/^struct dex_skill_type {$/;"	s
dex_skill_type	structs.h	/^struct dex_skill_type {$/;"	s
diag_char_to_char	act.informative.c	/^void diag_char_to_char(struct char_data * i, struct char_data * ch)$/;"	f
dice	utils.c	/^int dice(int number, int size)$/;"	f
die	fight.c	/^void die(struct char_data *ch, struct char_data *killer)$/;"	f
die_assisting	utils.c	/^void die_assisting(struct char_data * ch)$/;"	f
die_clone	utils.c	/^void die_clone(struct char_data *ch, struct char_data *killer)$/;"	f
die_follower	utils.c	/^void die_follower(struct char_data * ch)$/;"	f
die_msg	struct.h	/^   struct msg_type die_msg;	\/* messages when death			*\/$/;"	m	struct:message_type
die_msg	structs.h	/^   struct msg_type die_msg;	\/* messages when death			*\/$/;"	m	struct:message_type
digits	utils.c	/^int digits(const long numb)$/;"	f
dir	graph.c	/^  char dir;$/;"	m	struct:bfs_queue_struct
dir_option	struct.h	/^   struct room_direction_data *dir_option[NUM_OF_DIRS]; \/* Directions *\/$/;"	m	struct:room_data
dir_option	structs.h	/^   struct room_direction_data *dir_option[NUM_OF_DIRS]; \/* Directions *\/$/;"	m	struct:room_data
directions	olc-wld.c	/^static char *directions[] = {"North", "East", "South", "West", "Up", "Down"};$/;"	v	file:
dirs	constants.c	/^const char *dirs[] =$/;"	v
discrete_load	db.c	/^void discrete_load(FILE * fl, int mode)$/;"	f
disp_name	struct.h	/^   char disp_name[MAX_LEN]; $/;"	m	struct:clan_data
disp_name	structs.h	/^   char disp_name[MAX_LEN]; $/;"	m	struct:clan_data
display_clan_table	act.informative.c	/^void display_clan_table(struct char_data *ch, struct clan_data *clan)$/;"	f
display_room	olc-wld.c	/^void display_room(struct room_data *room, struct char_data *coder)$/;"	f
do_action	interpreter.c	/^ACMD(do_action);$/;"	v
do_action	shop.c	/^ACMD(do_action);$/;"	v
do_advance	interpreter.c	/^ACMD(do_advance);$/;"	v
do_affects	interpreter.c	/^ACMD(do_affects);$/;"	v
do_alias	interpreter.c	/^ACMD(do_alias);$/;"	v
do_areas	interpreter.c	/^ACMD(do_areas);$/;"	v
do_arrows	act.other.c	/^void do_arrows() {$/;"	f
do_assasinate	interpreter.c	/^ACMD(do_assasinate);$/;"	v
do_assist	interpreter.c	/^ACMD(do_assist);$/;"	v
do_at	interpreter.c	/^ACMD(do_at);$/;"	v
do_auto_exits	act.informative.c	/^void do_auto_exits(struct char_data * ch)$/;"	f
do_autoassist	interpreter.c	/^ACMD(do_autoassist);$/;"	v
do_backstab	interpreter.c	/^ACMD(do_backstab);$/;"	v
do_ban	interpreter.c	/^ACMD(do_ban);$/;"	v
do_banish	interpreter.c	/^ACMD(do_banish);$/;"	v
do_bash	interpreter.c	/^ACMD(do_bash);$/;"	v
do_blackjack	interpreter.c	/^ACMD(do_blackjack);$/;"	v
do_board	interpreter.c	/^ACMD(do_board);$/;"	v
do_breakin	interpreter.c	/^ACMD(do_breakin);$/;"	v
do_cast	interpreter.c	/^ACMD(do_cast);$/;"	v
do_cast	spec_procs.c	/^ACMD(do_cast);$/;"	v
do_change	interpreter.c	/^ACMD(do_change);$/;"	v
do_charge	interpreter.c	/^ACMD(do_charge);$/;"	v
do_clan_table	interpreter.c	/^ACMD(do_clan_table);$/;"	v
do_clans	interpreter.c	/^ACMD(do_clans);$/;"	v
do_close	interpreter.c	/^ACMD(do_close);$/;"	v
do_color	interpreter.c	/^ACMD(do_color);$/;"	v
do_commands	interpreter.c	/^ACMD(do_commands);$/;"	v
do_compare	interpreter.c	/^ACMD(do_compare);$/;"	v
do_consider	interpreter.c	/^ACMD(do_consider);$/;"	v
do_credits	interpreter.c	/^ACMD(do_credits);$/;"	v
do_date	interpreter.c	/^ACMD(do_date);$/;"	v
do_dc	interpreter.c	/^ACMD(do_dc);$/;"	v
do_deimmort	interpreter.c	/^ACMD(do_deimmort);$/;"	v
do_demote	interpreter.c	/^ACMD(do_demote);$/;"	v
do_diagnose	interpreter.c	/^ACMD(do_diagnose);$/;"	v
do_dismount	interpreter.c	/^ACMD(do_dismount);$/;"	v
do_display	interpreter.c	/^ACMD(do_display);$/;"	v
do_drink	interpreter.c	/^ACMD(do_drink);$/;"	v
do_drop	interpreter.c	/^ACMD(do_drop);$/;"	v
do_eat	interpreter.c	/^ACMD(do_eat);$/;"	v
do_echo	interpreter.c	/^ACMD(do_echo);$/;"	v
do_echo	shop.c	/^ACMD(do_echo);$/;"	v
do_enter	interpreter.c	/^ACMD(do_enter);$/;"	v
do_equipment	interpreter.c	/^ACMD(do_equipment);$/;"	v
do_examine	interpreter.c	/^ACMD(do_examine);$/;"	v
do_exit	interpreter.c	/^ACMD(do_exit);$/;"	v
do_exits	act.informative.c	/^ACMD(do_exits);$/;"	v
do_exits	interpreter.c	/^ACMD(do_exits);$/;"	v
do_exp	interpreter.c	/^ACMD(do_exp);$/;"	v
do_fastrent	interpreter.c	/^ACMD(do_fastrent);$/;"	v
do_flee	fight.c	/^ACMD(do_flee);$/;"	v
do_flee	interpreter.c	/^ACMD(do_flee);$/;"	v
do_flee	spec_procs.c	/^ACMD(do_flee);$/;"	v
do_float	shopconv.c	/^void do_float(FILE *shop_f, FILE *newshop_f)$/;"	f
do_follow	interpreter.c	/^ACMD(do_follow);$/;"	v
do_force	interpreter.c	/^ACMD(do_force);$/;"	v
do_gecho	interpreter.c	/^ACMD(do_gecho);$/;"	v
do_gen_comm	interpreter.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	spec_procs.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_ps	interpreter.c	/^ACMD(do_gen_ps);$/;"	v
do_gen_tog	interpreter.c	/^ACMD(do_gen_tog);$/;"	v
do_gen_write	interpreter.c	/^ACMD(do_gen_write);$/;"	v
do_get	interpreter.c	/^ACMD(do_get);$/;"	v
do_give	interpreter.c	/^ACMD(do_give);$/;"	v
do_go	interpreter.c	/^ACMD(do_go);$/;"	v
do_gold	interpreter.c	/^ACMD(do_gold);$/;"	v
do_goto	interpreter.c	/^ACMD(do_goto);$/;"	v
do_grab	interpreter.c	/^ACMD(do_grab);$/;"	v
do_group	interpreter.c	/^ACMD(do_group);$/;"	v
do_gsay	interpreter.c	/^ACMD(do_gsay);$/;"	v
do_hcontrol	interpreter.c	/^ACMD(do_hcontrol);$/;"	v
do_help	interpreter.c	/^ACMD(do_help);$/;"	v
do_hide	interpreter.c	/^ACMD(do_hide);$/;"	v
do_hit	interpreter.c	/^ACMD(do_hit);$/;"	v
do_hit	spec_procs.c	/^ACMD(do_hit);$/;"	v
do_house	interpreter.c	/^ACMD(do_house);$/;"	v
do_ignore	interpreter.c	/^ACMD(do_ignore);$/;"	v
do_immort	interpreter.c	/^ACMD(do_immort);$/;"	v
do_info	interpreter.c	/^ACMD(do_info);$/;"	v
do_insult	interpreter.c	/^ACMD(do_insult);$/;"	v
do_int	shopconv.c	/^void do_int(FILE *shop_f, FILE *newshop_f)$/;"	f
do_inventory	interpreter.c	/^ACMD(do_inventory);$/;"	v
do_invis	interpreter.c	/^ACMD(do_invis);$/;"	v
do_join	interpreter.c	/^ACMD(do_join);$/;"	v
do_kick	interpreter.c	/^ACMD(do_kick);$/;"	v
do_kill	interpreter.c	/^ACMD(do_kill);$/;"	v
do_kill	spec_procs.c	/^ACMD(do_kill);$/;"	v
do_knight	interpreter.c	/^ACMD(do_knight);$/;"	v
do_lag	interpreter.c	/^ACMD(do_lag);$/;"	v
do_last	interpreter.c	/^ACMD(do_last);$/;"	v
do_laston	interpreter.c	/^ACMD(do_laston);$/;"	v
do_leave	interpreter.c	/^ACMD(do_leave);$/;"	v
do_levels	interpreter.c	/^ACMD(do_levels);$/;"	v
do_list	shopconv.c	/^void	do_list(FILE *shop_f, FILE *newshop_f, int max)$/;"	f
do_list_obj_values	act.wizard.c	/^void do_list_obj_values(struct obj_data *j, char * buf)$/;"	f
do_load	interpreter.c	/^ACMD(do_load);$/;"	v
do_loadweapon	interpreter.c	/^ACMD(do_loadweapon);$/;"	v
do_lock	interpreter.c	/^ACMD(do_lock);$/;"	v
do_look	interpreter.c	/^ACMD(do_look);$/;"	v
do_moon	interpreter.c	/^ACMD(do_moon);$/;"	v
do_mortal_kombat	interpreter.c	/^ACMD(do_mortal_kombat);$/;"	v
do_mount	interpreter.c	/^ACMD(do_mount);$/;"	v
do_move	interpreter.c	/^ACMD(do_move);$/;"	v
do_not_buy	shop.h	/^   char	*do_not_buy;		\/* If keeper dosn't buy such things	*\/$/;"	m	struct:shop_data
do_not_here	interpreter.c	/^ACMD(do_not_here);$/;"	v
do_npc_rescue	castle.c	/^int do_npc_rescue(struct char_data * ch_hero, struct char_data * ch_victim)$/;"	f
do_offer	interpreter.c	/^ACMD(do_offer);$/;"	v
do_ole_list	iedit.c	/^void do_ole_list(struct char_data * ch, struct obj_data * j)$/;"	f
do_open	interpreter.c	/^ACMD(do_open);$/;"	v
do_order	interpreter.c	/^ACMD(do_order);$/;"	v
do_page	interpreter.c	/^ACMD(do_page);$/;"	v
do_pick	interpreter.c	/^ACMD(do_pick);$/;"	v
do_pinch	interpreter.c	/^ACMD(do_pinch);$/;"	v
do_pkset	interpreter.c	/^ACMD(do_pkset);$/;"	v
do_playerhunt	graph.c	/^void do_playerhunt( struct char_data *ch, struct char_data *victim ) {$/;"	f
do_poofset	interpreter.c	/^ACMD(do_poofset);$/;"	v
do_pour	interpreter.c	/^ACMD(do_pour);$/;"	v
do_practice	interpreter.c	/^ACMD(do_practice);$/;"	v
do_promote	interpreter.c	/^ACMD(do_promote);$/;"	v
do_purge	interpreter.c	/^ACMD(do_purge);$/;"	v
do_put	interpreter.c	/^ACMD(do_put);$/;"	v
do_qcomm	interpreter.c	/^ACMD(do_qcomm);$/;"	v
do_questoff	interpreter.c	/^ACMD(do_questoff);$/;"	v
do_queston	interpreter.c	/^ACMD(do_queston);$/;"	v
do_quit	interpreter.c	/^ACMD(do_quit);$/;"	v
do_race	interpreter.c	/^ACMD(do_race);$/;"	v
do_reallyquit	interpreter.c	/^ACMD(do_reallyquit);$/;"	v
do_realtime	interpreter.c	/^ACMD(do_realtime);$/;"	v
do_reboot	interpreter.c	/^ACMD(do_reboot);$/;"	v
do_recruit	interpreter.c	/^ACMD(do_recruit);$/;"	v
do_remove	interpreter.c	/^ACMD(do_remove);$/;"	v
do_rent	interpreter.c	/^ACMD(do_rent);$/;"	v
do_reply	interpreter.c	/^ACMD(do_reply);$/;"	v
do_report	interpreter.c	/^ACMD(do_report);$/;"	v
do_rescue	interpreter.c	/^ACMD(do_rescue);$/;"	v
do_rest	interpreter.c	/^ACMD(do_rest);$/;"	v
do_restore	interpreter.c	/^ACMD(do_restore);$/;"	v
do_retreat	interpreter.c	/^ACMD(do_retreat);$/;"	v
do_return	interpreter.c	/^ACMD(do_return);$/;"	v
do_save	interpreter.c	/^ACMD(do_save);$/;"	v
do_say	interpreter.c	/^ACMD(do_say);$/;"	v
do_say	shop.c	/^ACMD(do_say);$/;"	v
do_say	spec_procs.c	/^ACMD(do_say);$/;"	v
do_scan	interpreter.c	/^ACMD(do_scan);$/;"	v
do_score	interpreter.c	/^ACMD(do_score);$/;"	v
do_scream	interpreter.c	/^ACMD(do_scream);$/;"	v
do_send	interpreter.c	/^ACMD(do_send);$/;"	v
do_set	interpreter.c	/^ACMD(do_set);$/;"	v
do_sethelp	interpreter.c	/^ACMD(do_sethelp);$/;"	v
do_shoot	interpreter.c	/^ACMD(do_shoot);$/;"	v
do_show	interpreter.c	/^ACMD(do_show);$/;"	v
do_shutdown	interpreter.c	/^ACMD(do_shutdown);$/;"	v
do_signup	interpreter.c	/^ACMD(do_signup);$/;"	v
do_simple_move	act.movement.c	/^int do_simple_move(struct char_data * ch, int dir, int need_specials_check)$/;"	f
do_sit	interpreter.c	/^ACMD(do_sit);$/;"	v
do_skillset	interpreter.c	/^ACMD(do_skillset);$/;"	v
do_skillshow	interpreter.c	/^ACMD(do_skillshow);$/;"	v
do_slay	interpreter.c	/^ACMD(do_slay);$/;"	v
do_sleep	interpreter.c	/^ACMD(do_sleep);$/;"	v
do_slots	interpreter.c	/^ACMD(do_slots);$/;"	v
do_sneak	interpreter.c	/^ACMD(do_sneak);$/;"	v
do_snoop	interpreter.c	/^ACMD(do_snoop);$/;"	v
do_spec_comm	interpreter.c	/^ACMD(do_spec_comm);$/;"	v
do_split	interpreter.c	/^ACMD(do_split);$/;"	v
do_spy	interpreter.c	/^ACMD(do_spy);$/;"	v
do_stand	interpreter.c	/^ACMD(do_stand);$/;"	v
do_start	class.c	/^void do_start(struct char_data * ch)$/;"	f
do_stat	interpreter.c	/^ACMD(do_stat);$/;"	v
do_stat_character	act.wizard.c	/^void do_stat_character(struct char_data * ch, struct char_data * k)$/;"	f
do_stat_object	act.wizard.c	/^void do_stat_object(struct char_data * ch, struct obj_data * j)$/;"	f
do_stat_room	act.wizard.c	/^void do_stat_room(struct char_data * ch)$/;"	f
do_steal	interpreter.c	/^ACMD(do_steal);$/;"	v
do_string	shopconv.c	/^void do_string(FILE *shop_f, FILE *newshop_f, char *msg)$/;"	f
do_switch	interpreter.c	/^ACMD(do_switch);$/;"	v
do_syslog	interpreter.c	/^ACMD(do_syslog);$/;"	v
do_tag	interpreter.c	/^ACMD(do_tag);$/;"	v
do_teleport	interpreter.c	/^ACMD(do_teleport);$/;"	v
do_tell	interpreter.c	/^ACMD(do_tell);$/;"	v
do_tell	objsave.c	/^ACMD(do_tell);$/;"	v
do_tell	shop.c	/^ACMD(do_tell);$/;"	v
do_throw	interpreter.c	/^ACMD(do_throw);$/;"	v
do_tic	interpreter.c	/^ACMD(do_tic);$/;"	v
do_time	interpreter.c	/^ACMD(do_time);$/;"	v
do_title	interpreter.c	/^ACMD(do_title);$/;"	v
do_toggle	interpreter.c	/^ACMD(do_toggle);$/;"	v
do_track	act.informative.c	/^ACMD(do_track);$/;"	v
do_track	interpreter.c	/^ACMD(do_track);$/;"	v
do_trans	interpreter.c	/^ACMD(do_trans);$/;"	v
do_unban	interpreter.c	/^ACMD(do_unban);$/;"	v
do_ungroup	interpreter.c	/^ACMD(do_ungroup);$/;"	v
do_unlock	interpreter.c	/^ACMD(do_unlock);$/;"	v
do_use	interpreter.c	/^ACMD(do_use);$/;"	v
do_users	interpreter.c	/^ACMD(do_users);$/;"	v
do_visible	interpreter.c	/^ACMD(do_visible);$/;"	v
do_vnum	interpreter.c	/^ACMD(do_vnum);$/;"	v
do_vstat	interpreter.c	/^ACMD(do_vstat);$/;"	v
do_wake	interpreter.c	/^ACMD(do_wake);$/;"	v
do_wear	interpreter.c	/^ACMD(do_wear);$/;"	v
do_weather	interpreter.c	/^ACMD(do_weather);$/;"	v
do_where	interpreter.c	/^ACMD(do_where);$/;"	v
do_who	interpreter.c	/^ACMD(do_who);$/;"	v
do_wield	interpreter.c	/^ACMD(do_wield);$/;"	v
do_wimpy	interpreter.c	/^ACMD(do_wimpy);$/;"	v
do_wizlock	interpreter.c	/^ACMD(do_wizlock);$/;"	v
do_wiznet	interpreter.c	/^ACMD(do_wiznet);$/;"	v
do_wizutil	interpreter.c	/^ACMD(do_wizutil);$/;"	v
do_write	interpreter.c	/^ACMD(do_write);$/;"	v
do_zreset	interpreter.c	/^ACMD(do_zreset);$/;"	v
donation_room_1	config.c	/^sh_int donation_room_1 = 90;$/;"	v
donation_room_2	config.c	/^sh_int donation_room_2 = NOWHERE; 	\/* unused - room for expansion *\/$/;"	v
donation_room_3	config.c	/^sh_int donation_room_3 = 22031;	\/* unused - room for expansion *\/$/;"	v
drink_aff	constants.c	/^const int drink_aff[][3] = {$/;"	v
drinknames	constants.c	/^const char *drinknames[] =$/;"	v
drinks	constants.c	/^const char *drinks[] =$/;"	v
dts_are_dumps	config.c	/^int dts_are_dumps = NO;$/;"	v
dummy_mob	db.c	/^struct player_special_data dummy_mob;	\/* dummy spec area for mobs	 *\/$/;"	v
duration	struct.h	/^   sh_int duration;      \/* For how long its effects will last      *\/$/;"	m	struct:affected_type
duration	structs.h	/^   sh_int duration;      \/* For how long its effects will last      *\/$/;"	m	struct:affected_type
echo_off	utils.c	/^void echo_off(struct descriptor_data *d)$/;"	f
echo_on	utils.c	/^void echo_on(struct descriptor_data *d)$/;"	f
edit_func	olc-wld.c	/^void edit_func(struct descriptor_data *d, char arg)$/;"	f
edit_help	olc-wld.c	/^void edit_help(struct descriptor_data *d)$/;"	f
edit_room	olc-wld.c	/^void edit_room(struct room_data *room, struct descriptor_data *d)$/;"	f
endBJGame	casino.c	/^void endBJGame(struct game_item *bjitem, int playernum) { $/;"	f
end_read_list	shop.c	/^int end_read_list(struct shop_buy_data * list, int len, int error)$/;"	f
equip_char	handler.c	/^void equip_char(struct char_data * ch, struct obj_data * obj, int pos)$/;"	f
equipment	struct.h	/^   struct obj_data *equipment[NUM_WEARS];\/* Equipment array               *\/$/;"	m	struct:char_data
equipment	structs.h	/^   struct obj_data *equipment[NUM_WEARS];\/* Equipment array               *\/$/;"	m	struct:char_data
equipment_types	constants.c	/^const char *equipment_types[] = {$/;"	v
eternal_start_room	config.c	/^sh_int eternal_start_room = 102;$/;"	v
evaluate_expression	shop.c	/^int evaluate_expression(struct obj_data * obj, char *expr)$/;"	f
evaluate_operation	shop.c	/^void evaluate_operation(struct stack_data * ops, struct stack_data * vals)$/;"	f
ex_description	struct.h	/^   struct extra_descr_data *ex_description; \/* extra descriptions     *\/$/;"	m	struct:obj_data
ex_description	struct.h	/^   struct extra_descr_data *ex_description; \/* for examine\/look       *\/$/;"	m	struct:room_data
ex_description	structs.h	/^   struct extra_descr_data *ex_description; \/* extra descriptions     *\/$/;"	m	struct:obj_data
ex_description	structs.h	/^   struct extra_descr_data *ex_description; \/* for examine\/look       *\/$/;"	m	struct:room_data
exit_bits	constants.c	/^const char *exit_bits[] = {$/;"	v
exit_info	struct.h	/^   sh_int exit_info;		\/* Exit info				*\/$/;"	m	struct:room_direction_data
exit_info	structs.h	/^   sh_int exit_info;		\/* Exit info				*\/$/;"	m	struct:room_direction_data
exp	struct.h	/^   int	exp;            \/* The experience of the player            *\/$/;"	m	struct:char_point_data
exp	struct.h	/^   int	exp;$/;"	m	struct:title_type
exp	structs.h	/^   int	exp;            \/* The experience of the player            *\/$/;"	m	struct:char_point_data
exp	structs.h	/^   int	exp;$/;"	m	struct:title_type
ext_flag	struct.h	/^   long	ext_flag;$/;"	m	struct:player_special_data_saved
ext_flag	structs.h	/^   long	ext_flag;$/;"	m	struct:player_special_data_saved
extended_bits	constants.c	/^const char *extended_bits[] = {$/;"	v
extra_bits	constants.c	/^const char *extra_bits[] = {$/;"	v
extra_desc	olc-wld.c	/^void extra_desc(struct room_data *room, struct char_data *coder)$/;"	f
extra_desc2	olc-wld.c	/^void extra_desc2(struct room_data *room, struct char_data *coder)$/;"	f
extra_descr_data	struct.h	/^struct extra_descr_data {$/;"	s
extra_descr_data	structs.h	/^struct extra_descr_data {$/;"	s
extra_flags	struct.h	/^   long	extra_flags;	\/* If it hums, glows, etc.	    *\/$/;"	m	struct:obj_flag_data
extra_flags	struct.h	/^   long	extra_flags;$/;"	m	struct:obj_file_elem
extra_flags	structs.h	/^   long	extra_flags;	\/* If it hums, glows, etc.	    *\/$/;"	m	struct:obj_flag_data
extra_flags	structs.h	/^   long	extra_flags;$/;"	m	struct:obj_file_elem
extract_char	handler.c	/^void extract_char(struct char_data * ch)$/;"	f
extract_obj	handler.c	/^void extract_obj(struct obj_data * obj)$/;"	f
fields	act.wizard.c	/^} fields[] = {$/;"	v
fight_messages	db.c	/^struct message_list fight_messages[MAX_MESSAGES];	\/* fighting messages	 *\/$/;"	v
fighting	struct.h	/^   struct char_data *fighting;	\/* Opponent				*\/$/;"	m	struct:char_special_data
fighting	structs.h	/^   struct char_data *fighting;	  \/* Opponent				*\/$/;"	m	struct:char_special_data
file_end_pos	mail.c	/^long file_end_pos = 0;		\/* length of file *\/$/;"	v
file_to_string	db.c	/^int file_to_string(char *name, char *buf)$/;"	f
file_to_string_alloc	db.c	/^int file_to_string_alloc(char *name, char **buf)$/;"	f
filename	boards.h	/^   char	filename[50];	\/* file to save this board to *\/$/;"	m	struct:board_info_type
fill	interpreter.c	/^char *fill[] =$/;"	v
fill_word	interpreter.c	/^int fill_word(char *argument)$/;"	f
find_action	act.social.c	/^int find_action(int cmd)$/;"	f
find_alias	interpreter.c	/^struct alias *find_alias(struct alias * alias_list, char *str)$/;"	f
find_all_dots	handler.c	/^int find_all_dots(char *arg)$/;"	f
find_board	boards.c	/^int find_board(struct char_data * ch)$/;"	f
find_char_in_index	mail.c	/^mail_index_type *find_char_in_index(long searchee)$/;"	f
find_class_bitvector	class.c	/^long find_class_bitvector(char* arg)$/;"	f
find_command	interpreter.c	/^int find_command(char *command)$/;"	f
find_door	act.movement.c	/^int find_door(struct char_data * ch, char *type, char *dir)$/;"	f
find_eq_pos	act.obj.c	/^int find_eq_pos(struct char_data * ch, struct obj_data * obj, char *arg)$/;"	f
find_exdesc	act.informative.c	/^char *find_exdesc(char *word, struct extra_descr_data * list)$/;"	f
find_first_step	graph.c	/^int find_first_step(sh_int src, sh_int target)$/;"	f
find_guard	castle.c	/^struct char_data *find_guard(struct char_data * chAtChar)$/;"	f
find_house	house.c	/^find_house (sh_int vnum)$/;"	f
find_name	interpreter.c	/^int find_name(char *name)$/;"	f
find_npc_by_name	castle.c	/^struct char_data *find_npc_by_name(struct char_data * chAtChar, char *pszName,$/;"	f
find_oper_num	shop.c	/^int find_oper_num(char token)$/;"	f
find_room_llist	llist.c	/^struct room_data *find_room_llist(struct llist_node *llist_root, int vnum)$/;"	f
find_room_llist	llist.h	/^struct room_data *find_room_llist(struct llist_node *llist_root, int vnum)$/;"	f
find_skill_num	spell_parser.c	/^int find_skill_num(char *name)$/;"	f
find_slot	boards.c	/^int find_slot(void)$/;"	f
find_target_room	act.wizard.c	/^sh_int find_target_room(struct char_data * ch, char *rawroomstr)$/;"	f
flag	act.movement.c	/^long flag=0;$/;"	v
flush_queues	comm.c	/^void flush_queues(struct descriptor_data * d)$/;"	f
fname	handler.c	/^char *fname(char *namelist)$/;"	f
follow_type	struct.h	/^struct follow_type {$/;"	s
follow_type	structs.h	/^struct follow_type {$/;"	s
follower	struct.h	/^   struct char_data *follower;$/;"	m	struct:follow_type
follower	structs.h	/^   struct char_data *follower;$/;"	m	struct:follow_type
followers	struct.h	/^   struct follow_type *followers;        \/* List of chars followers       *\/$/;"	m	struct:char_data
followers	structs.h	/^   struct follow_type *followers;        \/* List of chars followers       *\/$/;"	m	struct:char_data
forget	mobact.c	/^void forget(struct char_data * ch, struct char_data * victim)$/;"	f
format_text	utils.c	/^void format_text(char **ptr_string, int mode, struct descriptor_data *d, int maxlen) {$/;"	f
fread_action	act.social.c	/^char *fread_action(FILE * fl, int nr)$/;"	f
fread_string	db.c	/^char *fread_string(FILE * fl, char *error)$/;"	f
fread_string	shopconv.c	/^char    *fread_string(FILE *fl, char *error)$/;"	f
free	memdbg.h	44;"	d
free	memdbg.h	49;"	d
free_alias	interpreter.c	/^void free_alias(struct alias * a)$/;"	f
free_char	db.c	/^void free_char(struct char_data * ch)$/;"	f
free_list	mail.c	/^position_list_type *free_list = 0;	\/* list of free positions in file *\/$/;"	v
free_obj	db.c	/^void free_obj(struct obj_data * obj)$/;"	f
free_rent	config.c	/^int free_rent = YES;$/;"	v
freeze_level	struct.h	/^   ubyte freeze_level;		\/* Level of god who froze char, if any	*\/$/;"	m	struct:player_special_data_saved
freeze_level	structs.h	/^   ubyte freeze_level;		\/* Level of god who froze char, if any	*\/$/;"	m	struct:player_special_data_saved
from	mail.h	/^   long from;			\/* idnum of the mail's sender		*\/$/;"	m	struct:header_data_type
frozen_start_room	config.c	/^sh_int frozen_start_room = 501;$/;"	v
fry_victim	castle.c	/^void fry_victim(struct char_data * ch)$/;"	f
fullness	constants.c	/^const char *fullness[] =$/;"	v
gain_condition	limits.c	/^void gain_condition(struct char_data * ch, int condition, int value)$/;"	f
gain_exp	limits.c	/^void gain_exp(struct char_data * ch, int gain)$/;"	f
gain_exp_regardless	limits.c	/^void gain_exp_regardless(struct char_data * ch, int newlevel)$/;"	f
gamble_blackjack	casino.c	/^void gamble_blackjack(struct char_data *ch, char *arg) {$/;"	f
gamble_race	casino.c	/^void gamble_race(struct char_data *ch, char *arg) {$/;"	f
gamble_slots	casino.c	/^void gamble_slots(struct char_data *ch, char *arg) {$/;"	f
game_data	structs.h	/^struct game_data {$/;"	s
game_item	structs.h	/^struct game_item {$/;"	s
game_loop	comm.c	/^void game_loop(int mother_desc)$/;"	f
gen_receptionist	objsave.c	/^int gen_receptionist(struct char_data * ch, struct char_data * recep,$/;"	f
genders	constants.c	/^const char *genders[] =$/;"	v
general_description	struct.h	/^   char	*general_description;       \/* When look DIR.			*\/$/;"	m	struct:room_direction_data
general_description	structs.h	/^   char	*general_description;       \/* When look DIR.			*\/$/;"	m	struct:room_direction_data
generic_find	handler.c	/^int generic_find(char *arg, int bitvector, struct char_data * ch,$/;"	f
getCard	casino.c	/^int getCard() {$/;"	f
getCardName	casino.c	/^char *getCardName(int card) {$/;"	f
getGamePlayer	casino.c	/^struct game_item *getGamePlayer(struct char_data *ch, char game) {$/;"	f
getMeHere	graph.c	/^int getMeHere(sh_int chroom, sh_int victroom) {$/;"	f
get_avail_descs	comm.c	/^int get_avail_descs(void)$/;"	f
get_char	handler.c	/^struct char_data *get_char(char *name)$/;"	f
get_char_num	handler.c	/^struct char_data *get_char_num(int nr)$/;"	f
get_char_room	handler.c	/^struct char_data *get_char_room(char *name, int room)$/;"	f
get_char_room_vis	handler.c	/^struct char_data *get_char_room_vis(struct char_data * ch, char *name)$/;"	f
get_char_vis	handler.c	/^struct char_data *get_char_vis(struct char_data * ch, char *name,int all_worlds)$/;"	f
get_check_money	act.obj.c	/^void get_check_money(struct char_data * ch, struct obj_data * obj)$/;"	f
get_clan_by_name	handler.c	/^struct clan_data *get_clan_by_name(char *name)$/;"	f
get_clan_by_num	handler.c	/^struct clan_data *get_clan_by_num(int num)$/;"	f
get_clan_disp	db.c	/^char *get_clan_disp ( struct char_data *ch ) $/;"	f
get_clan_name	db.c	/^char *get_clan_name ( int cnum ) $/;"	f
get_clan_rank	db.c	/^char *get_clan_rank ( struct char_data *ch ) $/;"	f
get_directions	olc-wld.c	/^void get_directions(struct room_data *room, struct char_data *coder, char arg)$/;"	f
get_filename	utils.c	/^int get_filename(char *orig_name, char *filename, int mode)$/;"	f
get_from_container	act.obj.c	/^void get_from_container(struct char_data * ch, struct obj_data * cont,$/;"	f
get_from_q	comm.c	/^int get_from_q(struct txt_q * queue, char *dest, int *aliased)$/;"	f
get_from_room	act.obj.c	/^void get_from_room(struct char_data * ch, char *arg)$/;"	f
get_hash_obj_vis	shop.c	/^struct obj_data *get_hash_obj_vis(struct char_data * ch, char *name,$/;"	f
get_id_by_name	db.c	/^long get_id_by_name(char *name)$/;"	f
get_line	utils.c	/^int get_line(FILE * fl, char *buf)$/;"	f
get_name_by_id	db.c	/^char *get_name_by_id(long id)$/;"	f
get_number	handler.c	/^int get_number(char **name)$/;"	f
get_obj_in_list_num	handler.c	/^struct obj_data *get_obj_in_list_num(int num, struct obj_data * list, int type)$/;"	f
get_obj_in_list_vis	handler.c	/^struct obj_data *get_obj_in_list_vis(struct char_data * ch, char *name,$/;"	f
get_obj_num	handler.c	/^struct obj_data *get_obj_num(int nr)$/;"	f
get_obj_vis	handler.c	/^struct obj_data *get_obj_vis(struct char_data * ch, char *name)$/;"	f
get_object_in_equip_vis	handler.c	/^struct obj_data *get_object_in_equip_vis(struct char_data * ch,$/;"	f
get_player_id	handler.c	/^struct char_data *get_player_id(long idnum)$/;"	f
get_player_vis	handler.c	/^struct char_data *get_player_vis(struct char_data * ch, char *name)$/;"	f
get_purchase_obj	shop.c	/^struct obj_data *get_purchase_obj(struct char_data * ch, char *arg,$/;"	f
get_selling_obj	shop.c	/^struct obj_data *get_selling_obj(struct char_data * ch, char *name,$/;"	f
get_slide_obj_vis	shop.c	/^struct obj_data *get_slide_obj_vis(struct char_data * ch, char *name,$/;"	f
get_victim	castle.c	/^struct char_data *get_victim(struct char_data * chAtChar)$/;"	f
get_vnum	olc-wld.c	/^void get_vnum(struct room_data *room, struct char_data *coder)$/;"	f
get_world	utils.c	/^int get_world(struct char_data *ch)$/;"	f
get_world_letter	utils.c	/^char *get_world_letter(struct char_data *ch)$/;"	f
give_find_vict	act.obj.c	/^struct char_data *give_find_vict(struct char_data * ch, char *arg)$/;"	f
god_msg	struct.h	/^   struct msg_type god_msg;	\/* messages when hit on god		*\/$/;"	m	struct:message_type
god_msg	structs.h	/^   struct msg_type god_msg;	\/* messages when hit on god		*\/$/;"	m	struct:message_type
gold	struct.h	/^   int	gold;           \/* Money carried                           *\/$/;"	m	struct:char_point_data
gold	struct.h	/^   int	gold;$/;"	m	struct:rent_info
gold	structs.h	/^   int	gold;           \/* Money carried                           *\/$/;"	m	struct:char_point_data
gold	structs.h	/^   int	gold;$/;"	m	struct:rent_info
graf	limits.c	/^int graf(int age, int p0, int p1, int p2, int p3, int p4, int p5, int p6)$/;"	f
group_gain	fight.c	/^void group_gain(struct char_data * ch, struct char_data * victim)$/;"	f
guests	house.h	/^   long guests[10];	\/* idnums of house's guests	*\/$/;"	m	struct:house_control_rec_old
guests	house.h	/^   long guests[MAX_GUESTS];	\/* idnums of house's guests	*\/$/;"	m	struct:house_control_rec
guild_info	class.c	/^int guild_info[][3] = {$/;"	v
half_chop	interpreter.c	/^void half_chop(char *string, char *arg1, char *arg2)$/;"	f
handbook	db.c	/^char *handbook = NULL;		\/* handbook for new immortals	 *\/$/;"	v
handle_detailed_list	shop.c	/^void handle_detailed_list(char *buf, char *buf1, struct char_data * ch)$/;"	f
handle_hit	casino.c	/^void handle_hit(struct char_data *ch) {$/;"	f
handle_split	casino.c	/^void handle_split(int counter) {$/;"	f
hasBlackjack	casino.c	/^int hasBlackjack(int playernum) {$/;"	f
has_key	act.movement.c	/^int has_key(struct char_data * ch, int key)$/;"	f
has_mail	mail.c	/^int has_mail(long recipient)$/;"	f
has_stats_for_skill	utils.c	/^int has_stats_for_skill(struct char_data *ch, int skillnum)$/;"	f
hcontrol_build_house	house.c	/^hcontrol_build_house (struct char_data *ch, char *arg)$/;"	f
hcontrol_destroy_house	house.c	/^hcontrol_destroy_house (struct char_data *ch, char *arg)$/;"	f
hcontrol_list_houses	house.c	/^hcontrol_list_houses (struct char_data *ch)$/;"	f
hcontrol_pay_house	house.c	/^hcontrol_pay_house (struct char_data *ch, char *arg)$/;"	f
head	db.h	/^   struct reset_q_element *head;$/;"	m	struct:reset_q_type
head	struct.h	/^   struct txt_block *head;$/;"	m	struct:txt_q
head	structs.h	/^   struct txt_block *head;$/;"	m	struct:txt_q
header_block_type	mail.h	/^typedef struct header_block_type_d header_block_type;$/;"	t
header_block_type_d	mail.h	/^struct header_block_type_d {$/;"	s
header_data	mail.h	/^   struct header_data_type header_data;	\/* other header data		*\/$/;"	m	struct:header_block_type_d
header_data_type	mail.h	/^struct header_data_type {$/;"	s
heading	boards.h	/^   char	*heading;     \/* pointer to message's heading *\/$/;"	m	struct:board_msginfo
heading_len	boards.h	/^   int	heading_len;  \/* size of header (for file write) *\/$/;"	m	struct:board_msginfo
height	struct.h	/^   ubyte height;       \/* PC \/ NPC's height                    *\/$/;"	m	struct:char_player_data
height	struct.h	/^   ubyte height;$/;"	m	struct:char_file_u
height	structs.h	/^   ubyte height;       \/* PC \/ NPC's height                    *\/$/;"	m	struct:char_player_data
height	structs.h	/^   ubyte height;$/;"	m	struct:char_file_u
help	act.wizard.c	/^  char *help;$/;"	m	struct:set_struct
help	db.c	/^char *help = NULL;		\/* help screen			 *\/$/;"	v
help_fl	db.c	/^FILE *help_fl = NULL;		\/* file for help text		 *\/$/;"	v
help_index	db.c	/^struct help_index_element *help_index = 0;	\/* the help table	 *\/$/;"	v
help_index_element	db.h	/^struct help_index_element {$/;"	s
hide	act.social.c	/^  int hide;$/;"	m	struct:social_messg
hide	struct.h	/^   sh_int hide;$/;"	m	struct:dex_skill_type
hide	structs.h	/^   sh_int hide;$/;"	m	struct:dex_skill_type
hit	fight.c	/^void hit(struct char_data * ch, struct char_data * victim, int type)$/;"	f
hit	struct.h	/^   sh_int hit;$/;"	m	struct:char_point_data
hit	structs.h	/^   sh_int hit;$/;"	m	struct:char_point_data
hit_gain	limits.c	/^int hit_gain(struct char_data * ch)$/;"	f
hit_msg	struct.h	/^   struct msg_type hit_msg;	\/* messages when hit			*\/$/;"	m	struct:message_type
hit_msg	structs.h	/^   struct msg_type hit_msg;	\/* messages when hit			*\/$/;"	m	struct:message_type
hitp	struct.h	/^   sh_int hitp;$/;"	m	struct:con_app_type
hitp	structs.h	/^   sh_int hitp;$/;"	m	struct:con_app_type
hitroll	struct.h	/^   sbyte hitroll;       \/* Any bonus or penalty to the hit roll    *\/$/;"	m	struct:char_point_data
hitroll	structs.h	/^   sbyte hitroll;       \/* Any bonus or penalty to the hit roll    *\/$/;"	m	struct:char_point_data
holler_move_cost	config.c	/^int holler_move_cost = 50;$/;"	v
hometown	struct.h	/^   int	hometown;      \/* PC s Hometown (zone)                 *\/$/;"	m	struct:char_player_data
hometown	struct.h	/^   sh_int hometown;$/;"	m	struct:char_file_u
hometown	structs.h	/^   int	hometown;      \/* PC s Hometown (zone)                 *\/$/;"	m	struct:char_player_data
hometown	structs.h	/^   sh_int hometown;$/;"	m	struct:char_file_u
host	struct.h	/^   char	host[HOST_LENGTH+1];	\/* hostname				*\/$/;"	m	struct:descriptor_data
host	struct.h	/^   char host[HOST_LENGTH+1];	\/* host of last logon *\/$/;"	m	struct:char_file_u
host	structs.h	/^   char	host[HOST_LENGTH+1];	\/* hostname				*\/$/;"	m	struct:descriptor_data
host	structs.h	/^   char host[HOST_LENGTH+1];	\/* host of last logon *\/$/;"	m	struct:char_file_u
hours	struct.h	/^   byte hours, day, month;$/;"	m	struct:time_info_data
hours	structs.h	/^   byte hours, day, month;$/;"	m	struct:time_info_data
house_control	house.c	/^struct house_control_rec house_control[MAX_HOUSES];$/;"	v
house_control_rec	house.h	/^struct house_control_rec {$/;"	s
house_control_rec_old	house.h	/^struct house_control_rec_old {$/;"	s
how_good	spec_procs.c	/^char *how_good(int percent)$/;"	f
hunt_victim	graph.c	/^void hunt_victim(struct char_data * ch)$/;"	f
hunting	struct.h	/^   struct char_data *hunting;	\/* Char hunted by this char		*\/$/;"	m	struct:char_special_data
hunting	structs.h	/^   struct char_data *hunting;	  \/* Char hunted by this char		*\/$/;"	m	struct:char_special_data
hupsig	comm.c	/^void hupsig()$/;"	f
id	db.h	/^   long id;$/;"	m	struct:player_index_element
id	struct.h	/^   long	id;$/;"	m	struct:memory_rec_struct
id	structs.h	/^   long	id;$/;"	m	struct:memory_rec_struct
idnum	struct.h	/^   long	idnum;			\/* player's idnum; -1 for mobiles	*\/$/;"	m	struct:char_special_data_saved
idnum	structs.h	/^   long	idnum;			\/* player's idnum; -1 for mobiles	*\/$/;"	m	struct:char_special_data_saved
idnum	structs.h	/^  int idnum;$/;"	m	struct:char_clan_data
if_flag	db.h	/^   bool if_flag;	\/* if TRUE: exe only if preceding exe'd *\/$/;"	m	struct:reset_com
ignore1	struct.h	/^   int ignore1;   $/;"	m	struct:player_special_data_saved
ignore1	structs.h	/^   int ignore1;   $/;"	m	struct:player_special_data_saved
ignore2	struct.h	/^   int ignore2;   $/;"	m	struct:player_special_data_saved
ignore2	structs.h	/^   int ignore2;   $/;"	m	struct:player_special_data_saved
ignore3	struct.h	/^   int ignore3;   $/;"	m	struct:player_special_data_saved
ignore3	structs.h	/^   int ignore3;   $/;"	m	struct:player_special_data_saved
ignorelev	struct.h	/^   int ignorelev;   $/;"	m	struct:player_special_data_saved
ignorelev	structs.h	/^   int ignorelev;   $/;"	m	struct:player_special_data_saved
ignorenum	struct.h	/^   int ignorenum;$/;"	m	struct:player_special_data_saved
ignorenum	structs.h	/^   int ignorenum;$/;"	m	struct:player_special_data_saved
immlist	db.c	/^char *immlist = NULL;		\/* list of peon gods		 *\/$/;"	v
immort_start_room	config.c	/^sh_int immort_start_room = 100;$/;"	v
imotd	db.c	/^char *imotd = NULL;		\/* message of the day - immorts *\/$/;"	v
in_obj	struct.h	/^   struct obj_data *in_obj;       \/* In what object NULL when none    *\/$/;"	m	struct:obj_data
in_obj	structs.h	/^   struct obj_data *in_obj;       \/* In what object NULL when none    *\/$/;"	m	struct:obj_data
in_room	shop.h	/^   int	*in_room;		\/* Where is the shop?			*\/$/;"	m	struct:shop_data
in_room	struct.h	/^   room_num in_room;		\/* In what room -1 when conta\/carr	*\/$/;"	m	struct:obj_data
in_room	struct.h	/^   room_num in_room;                     \/* Location (real room number)	  *\/$/;"	m	struct:char_data
in_room	structs.h	/^   room_num in_room;		\/* In what room -1 when conta\/carr	*\/$/;"	m	struct:obj_data
in_room	structs.h	/^   room_num in_room;                     \/* Location (real room number)	  *\/$/;"	m	struct:char_data
inbuf	struct.h	/^   char	inbuf[MAX_RAW_INPUT_LENGTH];  \/* buffer for raw input		*\/$/;"	m	struct:descriptor_data
inbuf	structs.h	/^   char	inbuf[MAX_RAW_INPUT_LENGTH];  \/* buffer for raw input		*\/$/;"	m	struct:descriptor_data
index_boot	db.c	/^void index_boot(int mode)$/;"	f
index_data	struct.h	/^struct index_data {$/;"	s
index_data	structs.h	/^struct index_data {$/;"	s
index_mail	mail.c	/^void index_mail(long id_to_index, long pos)$/;"	f
info	db.c	/^char *info = NULL;		\/* info page			 *\/$/;"	v
info_channel	utils.c	/^void info_channel( char *str , struct char_data *ch )$/;"	f
init_blackjack	casino.c	/^void init_blackjack() {$/;"	f
init_boards	boards.c	/^void init_boards(void)$/;"	f
init_char	db.c	/^void init_char(struct char_data * ch)$/;"	f
init_game	comm.c	/^void init_game(int port)$/;"	f
init_games	casino.c	/^void init_games() {$/;"	f
init_race	casino.c	/^void init_race(void) {$/;"	f
init_socket	comm.c	/^int init_socket(int port)$/;"	f
inorder_llist	llist.c	/^void inorder_llist(struct llist_node *ptr)$/;"	f
inorder_llist	llist.h	/^void inorder_llist(struct llist_node *ptr)$/;"	f
input	struct.h	/^   struct txt_q input;		\/* q of unprocessed input		*\/$/;"	m	struct:descriptor_data
input	structs.h	/^   struct txt_q input;		\/* q of unprocessed input		*\/$/;"	m	struct:descriptor_data
insert_llist	llist.c	/^struct llist_node *insert_llist (struct llist_node *llist_root, struct room_data *room)$/;"	f
insert_llist	llist.h	/^struct llist_node *insert_llist (struct llist_node *llist_root, struct room_data *room)$/;"	f
int_app	constants.c	/^struct int_app_type int_app[36] = {$/;"	v
int_app_type	struct.h	/^struct int_app_type {$/;"	s
int_app_type	structs.h	/^struct int_app_type {$/;"	s
intel	struct.h	/^   sbyte intel;$/;"	m	struct:char_ability_data
intel	structs.h	/^   sbyte intel;$/;"	m	struct:char_ability_data
intl	spells.h	/^   byte intl;$/;"	m	struct:spell_info_type
invalid_class	class.c	/^int invalid_class(struct char_data *ch, struct obj_data *obj) {$/;"	f
invalid_level	class.c	/^int invalid_level(struct char_data *ch, struct obj_data *object)$/;"	f
invalid_list	ban.c	/^namestring *invalid_list = NULL;$/;"	v
invis_level	struct.h	/^   sh_int invis_level;		\/* level of invisibility		*\/$/;"	m	struct:player_special_data_saved
invis_level	structs.h	/^   sh_int invis_level;		\/* level of invisibility		*\/$/;"	m	struct:player_special_data_saved
invis_type_flag	structs.h	/^   int invis_type_flag;  \/* Get me a 'char' variable DM! <whap> *\/$/;"	m	struct:player_special_data_saved
isInGame	casino.c	/^int isInGame(struct char_data *ch, char game) {$/;"	f
is_abbrev	interpreter.c	/^int is_abbrev(char *arg1, char *arg2)$/;"	f
is_carrying	utils.c	/^int is_carrying(struct char_data *ch, int item_type)$/;"	f
is_colour	color.c	/^int is_colour(char code)$/;"	f
is_empty	db.c	/^int is_empty(int zone_nr)$/;"	f
is_number	interpreter.c	/^int is_number(char *str)$/;"	f
is_ok	shop.c	/^int is_ok(struct char_data * keeper, struct char_data * ch, int shop_nr)$/;"	f
is_ok_char	shop.c	/^int is_ok_char(struct char_data * keeper, struct char_data * ch, int shop_nr)$/;"	f
is_open	shop.c	/^int is_open(struct char_data * keeper, int shop_nr, int msg)$/;"	f
is_social	act.informative.c	/^  byte is_social;$/;"	m	struct:sort_struct
is_trash	castle.c	/^int is_trash(struct obj_data * i)$/;"	f
is_wearing	utils.c	/^int is_wearing(struct char_data *ch, int item_type)$/;"	f
isbanned	ban.c	/^int isbanned(char *hostname)$/;"	f
isname	handler.c	/^int isname(char *str, char *namelist)$/;"	f
isnum	color.c	/^int isnum(char s)$/;"	f
item_number	struct.h	/^   obj_num item_number;		\/* Where in data-base			*\/$/;"	m	struct:obj_data
item_number	struct.h	/^   obj_num item_number;$/;"	m	struct:obj_file_elem
item_number	structs.h	/^   obj_num item_number;		\/* Where in data-base			*\/$/;"	m	struct:obj_data
item_number	structs.h	/^   obj_num item_number;$/;"	m	struct:obj_file_elem
item_types	constants.c	/^const char *item_types[] = {$/;"	v
jerry	castle.c	/^SPECIAL(jerry);$/;"	v
john_in	act.wizard.c	/^void john_in(struct char_data *ch)$/;"	f
keeper	shop.h	/^   int	 keeper;		\/* The mobil who owns the shop (virtual)*\/$/;"	m	struct:shop_data
key	struct.h	/^   obj_num key;			\/* Key's number (-1 for no key)		*\/$/;"	m	struct:room_direction_data
key	structs.h	/^   obj_num key;			\/* Key's number (-1 for no key)		*\/$/;"	m	struct:room_direction_data
keyword	db.h	/^   char	*keyword;$/;"	m	struct:help_index_element
keyword	struct.h	/^   char	*keyword;		\/* for open\/close			*\/$/;"	m	struct:room_direction_data
keyword	struct.h	/^   char	*keyword;                 \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
keyword	structs.h	/^   char	*keyword;		\/* for open\/close			*\/$/;"	m	struct:room_direction_data
keyword	structs.h	/^   char	*keyword;                 \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
keywords	shop.h	/^   char *keywords;$/;"	m	struct:shop_buy_data
king_welmar	castle.c	/^SPECIAL(king_welmar);$/;"	v
lag_save_char	act.other.c	/^void lag_save_char(struct char_data *ch, long pid) {$/;"	f
large_outbuf	struct.h	/^   struct txt_block *large_outbuf; \/* ptr to large buffer, if we need it *\/$/;"	m	struct:descriptor_data
large_outbuf	structs.h	/^   struct txt_block *large_outbuf; \/* ptr to large buffer, if we need it *\/$/;"	m	struct:descriptor_data
last_direction	struct.h	/^   byte last_direction;     \/* The last direction the monster went     *\/$/;"	m	struct:mob_special_data
last_direction	structs.h	/^   byte last_direction;     \/* The last direction the monster went     *\/$/;"	m	struct:mob_special_data
last_input	struct.h	/^   char	last_input[MAX_INPUT_LENGTH]; \/* the last input			*\/$/;"	m	struct:descriptor_data
last_input	structs.h	/^   char	last_input[MAX_INPUT_LENGTH]; \/* the last input			*\/$/;"	m	struct:descriptor_data
last_logon	struct.h	/^   time_t last_logon;		\/* Time (in secs) of last logon *\/$/;"	m	struct:char_file_u
last_logon	structs.h	/^   time_t last_logon;		\/* Time (in secs) of last logon *\/$/;"	m	struct:char_file_u
last_olc_mode	struct.h	/^   int last_olc_mode;$/;"	m	struct:player_special_data
last_olc_mode	structs.h	/^   int last_olc_mode;$/;"	m	struct:player_special_data
last_olc_targ	struct.h	/^   void *last_olc_targ;$/;"	m	struct:player_special_data
last_olc_targ	structs.h	/^   void *last_olc_targ;$/;"	m	struct:player_special_data
last_payment	house.h	/^   long last_payment;		\/* date of last house payment   *\/$/;"	m	struct:house_control_rec
last_payment	house.h	/^   long last_payment;		\/* date of last house payment   *\/$/;"	m	struct:house_control_rec_old
last_tell	struct.h	/^   struct char_data *last_tell;		\/* last tell from	*\/$/;"	m	struct:player_special_data
last_tell	structs.h	/^   struct char_data *last_tell;		\/* last tell from	*\/$/;"	m	struct:player_special_data
lastsort	shop.h	/^   int	 lastsort;		\/* How many items are sorted in inven?	*\/$/;"	m	struct:shop_data
learn	struct.h	/^   byte learn;       \/* how many % a player learns a spell\/skill *\/$/;"	m	struct:int_app_type
learn	structs.h	/^   byte learn;       \/* how many % a player learns a spell\/skill *\/$/;"	m	struct:int_app_type
len	shop.h	/^   int len;$/;"	m	struct:stack_data
length	modify.c	/^int length[] =$/;"	v
level	act.wizard.c	/^  unsigned char level;$/;"	m	struct:set_struct
level	boards.h	/^   int	level;        \/* level of poster *\/$/;"	m	struct:board_msginfo
level	struct.h	/^   ubyte level;         \/* PC \/ NPC's level                     *\/$/;"	m	struct:char_player_data
level	struct.h	/^   ubyte level;$/;"	m	struct:char_file_u
level	structs.h	/^   ubyte level;         \/* PC \/ NPC's level                     *\/$/;"	m	struct:char_player_data
level	structs.h	/^   ubyte level;$/;"	m	struct:char_file_u
level_can_shout	config.c	/^int level_can_shout = 2;$/;"	v
level_exp	class.c	/^const unsigned long int level_exp[LVL_CHAMP + 1] = {$/;"	v
lifespan	db.h	/^   int	lifespan;           \/* how long between resets (minutes)  *\/$/;"	m	struct:zone_data
light	struct.h	/^   byte light;                  \/* Number of lightsources in room     *\/$/;"	m	struct:room_data
light	structs.h	/^   byte light;                  \/* Number of lightsources in room     *\/$/;"	m	struct:room_data
line	db.h	/^   int line;		\/* line number this command appears on  *\/$/;"	m	struct:reset_com
list	structs.h	/^        struct game_item list[MAX_GAME_BETS];   \/\/ List of bets$/;"	m	struct:game_data
list	structs.h	/^        struct game_item list[MAX_GAME_BETS];   \/\/ Player list$/;"	m	struct:blackjack_data
list_all_shops	shop.c	/^void list_all_shops(struct char_data * ch)$/;"	f
list_char_to_char	act.informative.c	/^void list_char_to_char(struct char_data * list, struct char_data * ch)$/;"	f
list_detailed_shop	shop.c	/^void list_detailed_shop(struct char_data * ch, int shop_nr)$/;"	f
list_obj_to_char	act.informative.c	/^void list_obj_to_char(struct obj_data * list, struct char_data * ch, int mode,$/;"	f
list_obj_to_char	list_obj.c	/^void list_obj_to_char(struct obj_data * list, struct char_data * ch, int mode,$/;"	f
list_obj_to_char2	act.informative.c	/^void list_obj_to_char2(struct obj_data * list, struct char_data * ch, int mode,$/;"	f
list_obj_to_char2	list_obj.c	/^void list_obj_to_char2(struct obj_data * list, struct char_data * ch, int mode,$/;"	f
list_object	shop.c	/^char *list_object(struct obj_data * obj, int cnt, int index, int shop_nr)$/;"	f
list_one_char	act.informative.c	/^void list_one_char(struct char_data * i, struct char_data * ch)$/;"	f
list_rider	act.informative.c	/^void list_rider(struct char_data *i, struct char_data *ch, int mode ) {$/;"	f
list_skills	spec_procs.c	/^void list_skills(struct char_data * ch)$/;"	f
list_start	mail.h	/^   position_list_type *list_start;	\/* list of mail positions	*\/$/;"	m	struct:mail_index_type_d
list_top	act.social.c	/^static int list_top = -1;$/;"	v	file:
load_aliases	db.c	/^void load_aliases(struct char_data *ch)$/;"	f
load_banned	ban.c	/^void load_banned(void)$/;"	f
load_char	db.c	/^int load_char(char *name, struct char_file_u * char_element)$/;"	f
load_messages	fight.c	/^void load_messages(void)$/;"	f
load_room	struct.h	/^   room_num load_room;		\/* Which room to place char in		*\/$/;"	m	struct:player_special_data_saved
load_room	structs.h	/^   room_num load_room;		\/* Which room to place char in		*\/$/;"	m	struct:player_special_data_saved
load_zones	db.c	/^void load_zones(FILE * fl, char *zonename)$/;"	f
location	struct.h	/^   byte location;        \/* Tells which ability to change(APPLY_XXX)*\/$/;"	m	struct:affected_type
location	struct.h	/^   byte location;      \/* Which ability to change (APPLY_XXX) *\/$/;"	m	struct:obj_affected_type
location	structs.h	/^   byte location;        \/* Tells which ability to change(APPLY_XXX)*\/$/;"	m	struct:affected_type
location	structs.h	/^   byte location;      \/* Which ability to change (APPLY_XXX) *\/$/;"	m	struct:obj_affected_type
log	utils.c	/^void log(char *str)$/;"	f
log_death_trap	utils.c	/^void log_death_trap(struct char_data * ch)$/;"	f
log_zone_error	db.c	/^void log_zone_error(int zone, int cmd_no, char *message)$/;"	f
login_time	struct.h	/^   long	login_time;		\/* when the person connected		*\/$/;"	m	struct:descriptor_data
login_time	structs.h	/^   long	login_time;		\/* when the person connected		*\/$/;"	m	struct:descriptor_data
logon	struct.h	/^   time_t logon;    \/* Time of the last logon (used to calculate played) *\/$/;"	m	struct:time_data
logon	structs.h	/^   time_t logon;    \/* Time of the last logon (used to calculate played) *\/$/;"	m	struct:time_data
logtypes	act.wizard.c	/^static char *logtypes[] = {$/;"	v	file:
long_descr	struct.h	/^   char	*long_descr;   \/* for 'look'			       *\/$/;"	m	struct:char_player_data
long_descr	structs.h	/^   char	*long_descr;   \/* for 'look'			       *\/$/;"	m	struct:char_player_data
look_at_char	act.informative.c	/^void look_at_char(struct char_data * i, struct char_data * ch)$/;"	f
look_at_room	act.informative.c	/^void look_at_room(struct char_data * ch, int ignore_brief)$/;"	f
look_at_target	act.informative.c	/^void look_at_target(struct char_data * ch, char *arg)$/;"	f
look_in_direction	act.informative.c	/^void look_in_direction(struct char_data * ch, int dir)$/;"	f
look_in_obj	act.informative.c	/^void look_in_obj(struct char_data * ch, char *arg)$/;"	f
mag_affects	magic.c	/^void mag_affects(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mag_alter_objs	magic.c	/^void mag_alter_objs(int level, struct char_data * ch, struct obj_data * obj,$/;"	f
mag_areas	magic.c	/^void mag_areas(byte level, struct char_data * ch, int spellnum, int savetype)$/;"	f
mag_assign_spells	spell_parser.c	/^void mag_assign_spells(void)$/;"	f
mag_creations	magic.c	/^void mag_creations(int level, struct char_data * ch, int spellnum)$/;"	f
mag_damage	magic.c	/^void mag_damage(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mag_group_switch	magic.c	/^void mag_group_switch(int level, struct char_data * ch, struct char_data * tch,$/;"	f
mag_groups	magic.c	/^void mag_groups(int level, struct char_data * ch, int spellnum, int savetype)$/;"	f
mag_manacost	spell_parser.c	/^int mag_manacost(struct char_data * ch, int spellnum)$/;"	f
mag_masses	magic.c	/^void mag_masses(int level, struct char_data * ch, int spellnum, int savetype)$/;"	f
mag_materials	magic.c	/^int mag_materials(struct char_data * ch, int item0, int item1, int item2,$/;"	f
mag_objectmagic	spell_parser.c	/^void mag_objectmagic(struct char_data * ch, struct obj_data * obj,$/;"	f
mag_objects	magic.c	/^void mag_objects(int level, struct char_data * ch, struct obj_data * obj,$/;"	f
mag_points	magic.c	/^void mag_points(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mag_savingthrow	magic.c	/^int mag_savingthrow(struct char_data * ch, int type)$/;"	f
mag_summon_fail_msgs	magic.c	/^static char *mag_summon_fail_msgs[] = {$/;"	v	file:
mag_summon_msgs	magic.c	/^static char *mag_summon_msgs[] = {$/;"	v	file:
mag_summons	magic.c	/^void mag_summons(int level, struct char_data * ch, struct obj_data * obj,$/;"	f
mag_unaffects	magic.c	/^void mag_unaffects(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mail_index	mail.c	/^mail_index_type *mail_index = 0;\/* list of recs in the mail file  *\/$/;"	v
mail_index_type	mail.h	/^typedef struct mail_index_type_d mail_index_type;$/;"	t
mail_index_type_d	mail.h	/^struct mail_index_type_d {$/;"	s
mail_time	mail.h	/^   long	mail_time;		\/* when was the letter mailed?		*\/$/;"	m	struct:header_data_type
mail_to	struct.h	/^   long	mail_to;		\/* name for mail system			*\/$/;"	m	struct:descriptor_data
mail_to	structs.h	/^   long	mail_to;		\/* name for mail system			*\/$/;"	m	struct:descriptor_data
main	comm.c	/^int main(int argc, char **argv)$/;"	f
main	purge_guests.c	/^main()$/;"	f
main	purgeplay.c	/^main(int argc, char *argv[])$/;"	f
main	shopconv.c	/^void main(int argc, char *argv[])$/;"	f
mainten	db.c	/^int mainten = 0;		\/* maintenence mode		 *\/$/;"	v
make_corpse	fight.c	/^struct obj_data *make_corpse(struct char_data * ch)$/;"	f
make_prompt	comm.c	/^void make_prompt(struct descriptor_data * d)$/;"	f
malloc	memdbg.h	42;"	d
malloc	memdbg.h	47;"	d
mana	struct.h	/^   sh_int mana;$/;"	m	struct:char_point_data
mana	structs.h	/^   sh_int mana;$/;"	m	struct:char_point_data
mana_change	spells.h	/^   ubyte mana_change;	\/* Change in mana used by spell from lev to lev *\/$/;"	m	struct:spell_info_type
mana_gain	limits.c	/^int mana_gain(struct char_data * ch)$/;"	f
mana_max	spells.h	/^   ubyte mana_max;	\/* Max amount of mana used by a spell (lowest lev) *\/$/;"	m	struct:spell_info_type
mana_min	spells.h	/^   ubyte mana_min;	\/* Min amount of mana used by a spell (highest lev) *\/$/;"	m	struct:spell_info_type
master	struct.h	/^   struct char_data *master;             \/* Who is char following?        *\/$/;"	m	struct:char_data
master	structs.h	/^   struct char_data *master;             \/* Who is char following?        *\/$/;"	m	struct:char_data
max_exp_gain	config.c	/^int max_exp_gain = 3000000;	\/* max gainable per kill *\/$/;"	v
max_exp_loss	config.c	/^int max_exp_loss = 1000000;	\/* max losable per death *\/$/;"	v
max_filesize	config.c	/^int max_filesize = 50000;$/;"	v
max_hit	struct.h	/^   sh_int max_hit;      \/* Max hit for PC\/NPC                      *\/$/;"	m	struct:char_point_data
max_hit	structs.h	/^   sh_int max_hit;      \/* Max hit for PC\/NPC                      *\/$/;"	m	struct:char_point_data
max_mana	struct.h	/^   sh_int max_mana;     \/* Max move for PC\/NPC			   *\/$/;"	m	struct:char_point_data
max_mana	structs.h	/^   sh_int max_mana;     \/* Max move for PC\/NPC			   *\/$/;"	m	struct:char_point_data
max_move	struct.h	/^   sh_int max_move;     \/* Max move for PC\/NPC                     *\/$/;"	m	struct:char_point_data
max_move	structs.h	/^   sh_int max_move;     \/* Max move for PC\/NPC                     *\/$/;"	m	struct:char_point_data
max_npc_corpse_time	config.c	/^int max_npc_corpse_time = 5;$/;"	v
max_obj_save	config.c	/^int max_obj_save = 90;$/;"	v
max_pc_corpse_time	config.c	/^int max_pc_corpse_time = 40;$/;"	v
max_str	struct.h	/^   int	max_str;		\/*		-			*\/$/;"	m	struct:descriptor_data
max_str	structs.h	/^   int	max_str;		\/*		-			*\/$/;"	m	struct:descriptor_data
mem_alloc	memdbg.c	/^ mem_alloc($/;"	f
mem_debug_fd	memdbg.c	/^static FILE *mem_debug_fd;$/;"	v	file:
mem_free	memdbg.c	/^ mem_free($/;"	f
mem_list_add	memdbg.c	/^ mem_list_add($/;"	f	file:
mem_list_delete	memdbg.c	/^ mem_list_delete($/;"	f	file:
mem_realloc	memdbg.c	/^ mem_realloc($/;"	f
mem_size	memdbg.c	/^static unsigned long mem_size = 0;	\/* Amount of memory used *\/$/;"	v	file:
mem_strdup	memdbg.c	/^ mem_strdup($/;"	f
mem_tag_err	memdbg.c	/^ mem_tag_err($/;"	f	file:
member_of_royal_guard	castle.c	/^int member_of_royal_guard(struct char_data * chChar)$/;"	f
member_of_staff	castle.c	/^int member_of_staff(struct char_data * chChar)$/;"	f
memlist	memdbg.c	/^static MEMHDR *memlist = NULL;	\/* List of memory blocks *\/$/;"	v	file:
memnod	memdbg.c	/^typedef struct memnod		\/* Memory block header info   *\/$/;"	s	file:
memory	struct.h	/^   memory_rec *memory;	    \/* List of attackers to remember	       *\/$/;"	m	struct:mob_special_data
memory	structs.h	/^   memory_rec *memory;	    \/* List of attackers to remember	       *\/$/;"	m	struct:mob_special_data
memory_rec	struct.h	/^typedef struct memory_rec_struct memory_rec;$/;"	t
memory_rec	structs.h	/^typedef struct memory_rec_struct memory_rec;$/;"	t
memory_rec_struct	struct.h	/^struct memory_rec_struct {$/;"	s
memory_rec_struct	structs.h	/^struct memory_rec_struct {$/;"	s
message_buy	shop.h	/^   char	*message_buy;		\/* Message when player buys item	*\/$/;"	m	struct:shop_data
message_len	boards.h	/^   int	message_len;  \/* size of message text (for file write) *\/$/;"	m	struct:board_msginfo
message_list	struct.h	/^struct message_list {$/;"	s
message_list	structs.h	/^struct message_list {$/;"	s
message_sell	shop.h	/^   char	*message_sell;		\/* Message when player sells item	*\/$/;"	m	struct:shop_data
message_type	struct.h	/^struct message_type {$/;"	s
message_type	structs.h	/^struct message_type {$/;"	s
mh_file	memdbg.c	/^    char *mh_file;		\/* File allocation was from   *\/$/;"	m	struct:memnod
mh_line	memdbg.c	/^    unsigned int mh_line;	\/* Line allocation was from   *\/$/;"	m	struct:memnod
mh_next	memdbg.c	/^    struct memnod *mh_next;	\/* Next memory block      *\/$/;"	m	struct:memnod
mh_prev	memdbg.c	/^    struct memnod *mh_prev;	\/* Previous memory block   *\/$/;"	m	struct:memnod
mh_size	memdbg.c	/^    size_t mh_size;		\/* Size of allocation block   *\/$/;"	m	struct:memnod
mh_tag	memdbg.c	/^    unsigned int mh_tag;	\/* Special ident tag      *\/$/;"	m	struct:memnod
min_level	spells.h	/^   ubyte min_level[NUM_CLASSES];$/;"	m	struct:spell_info_type
min_position	spells.h	/^   byte min_position;	\/* Position for caster	 *\/$/;"	m	struct:spell_info_type
min_rent_cost	config.c	/^int min_rent_cost = 10;$/;"	v
min_victim_position	act.social.c	/^  int min_victim_position;	\/* Position of victim *\/$/;"	m	struct:social_messg
min_wizlist_lev	config.c	/^int min_wizlist_lev = LVL_IS_GOD;$/;"	v
mini_mud	db.c	/^int mini_mud = 0;		\/* mini-mud mode?		 *\/$/;"	v
minimum_level	interpreter.h	/^   sh_int minimum_level;$/;"	m	struct:command_info
minimum_position	interpreter.h	/^   byte minimum_position;$/;"	m	struct:command_info
miss_att	struct.h	/^   sh_int miss_att;$/;"	m	struct:dex_app_type
miss_att	structs.h	/^   sh_int miss_att;$/;"	m	struct:dex_app_type
miss_msg	struct.h	/^   struct msg_type miss_msg;	\/* messages when miss			*\/$/;"	m	struct:message_type
miss_msg	structs.h	/^   struct msg_type miss_msg;	\/* messages when miss			*\/$/;"	m	struct:message_type
missing_cash1	shop.h	/^   char	*missing_cash1;		\/* Message if keeper hasn't got cash	*\/$/;"	m	struct:shop_data
missing_cash2	shop.h	/^   char	*missing_cash2;		\/* Message if player hasn't got cash	*\/$/;"	m	struct:shop_data
mob_index	db.c	/^struct index_data *mob_index;	\/* index table for mobile file	 *\/$/;"	v
mob_proto	db.c	/^struct char_data *mob_proto;	\/* prototypes for mobs		 *\/$/;"	v
mob_special_data	struct.h	/^struct mob_special_data {$/;"	s
mob_special_data	structs.h	/^struct mob_special_data {$/;"	s
mob_specials	struct.h	/^   struct mob_special_data mob_specials;	\/* NPC specials		  *\/$/;"	m	struct:char_data
mob_specials	structs.h	/^   struct mob_special_data mob_specials;	\/* NPC specials		  *\/$/;"	m	struct:char_data
mobile_activity	mobact.c	/^void mobile_activity(void)$/;"	f
mode	house.h	/^   int mode;			\/* mode of ownership		*\/$/;"	m	struct:house_control_rec
mode	house.h	/^   int mode;			\/* mode of ownership		*\/$/;"	m	struct:house_control_rec_old
modifier	struct.h	/^   sbyte modifier;       \/* This is added to apropriate ability     *\/$/;"	m	struct:affected_type
modifier	struct.h	/^   sbyte modifier;     \/* How much it changes by              *\/$/;"	m	struct:obj_affected_type
modifier	structs.h	/^   sbyte modifier;       \/* This is added to apropriate ability     *\/$/;"	m	struct:affected_type
modifier	structs.h	/^   sbyte modifier;     \/* How much it changes by              *\/$/;"	m	struct:obj_affected_type
money_desc	handler.c	/^char *money_desc(int amount)$/;"	f
month	struct.h	/^   byte hours, day, month;$/;"	m	struct:time_info_data
month	structs.h	/^   byte hours, day, month;$/;"	m	struct:time_info_data
month_name	constants.c	/^const char *month_name[17] = {$/;"	v
moon	struct.h	/^   int  moon;   \/* state of the moon - Vader *\/$/;"	m	struct:weather_data
moon	structs.h	/^   int  moon;   \/* state of the moon - Vader *\/$/;"	m	struct:weather_data
moon_mesg	constants.c	/^const char *moon_mesg[] = {$/;"	v
mortal_start_room	config.c	/^sh_int mortal_start_room = 10;$/;"	v
motd	db.c	/^char *motd = NULL;		\/* message of the day - mortals *\/$/;"	v
mount_violence	fight.c	/^void mount_violence(struct char_data *rider ) {$/;"	f
mounting	structs.h	/^   struct char_data *mounting;	  \/* char mounted by this char		*\/$/;"	m	struct:char_special_data
mounting_obj	structs.h	/^   struct obj_data *mounting_obj; \/* obj mounted by this char		*\/$/;"	m	struct:char_special_data
move	struct.h	/^   sh_int move;$/;"	m	struct:char_point_data
move	structs.h	/^   sh_int move;$/;"	m	struct:char_point_data
move_falcon	act.obj.c	/^void move_falcon(void)$/;"	f
move_gain	limits.c	/^int move_gain(struct char_data * ch)$/;"	f
move_ship	act.obj.c	/^void move_ship(void)$/;"	f
movement_loss	constants.c	/^const int movement_loss[] =$/;"	v
msg	struct.h	/^   struct message_type *msg;	\/* List of messages.			*\/$/;"	m	struct:message_list
msg	structs.h	/^   struct message_type *msg;	\/* List of messages.			*\/$/;"	m	struct:message_list
msg_index	boards.c	/^struct board_msginfo msg_index[NUM_OF_BOARDS][MAX_BOARD_MESSAGES];$/;"	v
msg_storage	boards.c	/^char *msg_storage[INDEX_SIZE];$/;"	v
msg_storage_taken	boards.c	/^int msg_storage_taken[INDEX_SIZE];$/;"	v
msg_type	struct.h	/^struct msg_type {$/;"	s
msg_type	structs.h	/^struct msg_type {$/;"	s
mud_time_passed	utils.c	/^struct time_info_data mud_time_passed(time_t t2, time_t t1)$/;"	f
mudlog	utils.c	/^void mudlog(char *str, char type, ubyte level, byte file)$/;"	f
my_dignal	comm.c	1397;"	d	file:
my_real_room	olc-wld.c	/^struct room_data *my_real_room(int vnum)$/;"	f
my_room_bits	olc-wld.c	/^static int my_room_bits[] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};$/;"	v	file:
my_room_flag_bits	olc-wld.c	/^static char *my_room_flag_bits[] = $/;"	v	file:
my_signal	comm.c	/^sigfunc *my_signal(int signo, sigfunc * func)$/;"	f
my_world	olc-wld.c	/^static struct llist_node *my_world = 0;        $/;"	v	file:
name	db.h	/^   char	*name;		    \/* name of this zone                  *\/$/;"	m	struct:zone_data
name	db.h	/^   char	*name;$/;"	m	struct:player_index_element
name	db.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:ban_list_element
name	struct.h	/^   char	*name;	       \/* PC \/ NPC s name (kill ...  )         *\/$/;"	m	struct:char_player_data
name	struct.h	/^   char	*name;                    \/* Title of object :get etc.        *\/$/;"	m	struct:obj_data
name	struct.h	/^   char	*name;                  \/* Rooms name 'You are ...'           *\/$/;"	m	struct:room_data
name	struct.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:char_file_u
name	struct.h	/^   char name [MAX_LEN];$/;"	m	struct:clan_data
name	structs.h	/^   char	*name;	       \/* PC \/ NPC s name (kill ...  )         *\/$/;"	m	struct:char_player_data
name	structs.h	/^   char	*name;                    \/* Title of object :get etc.        *\/$/;"	m	struct:obj_data
name	structs.h	/^   char	*name;                  \/* Rooms name 'You are ...'           *\/$/;"	m	struct:room_data
name	structs.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:char_file_u
name	structs.h	/^   char name [MAX_LEN];$/;"	m	struct:clan_data
name_from_drinkcon	act.obj.c	/^void name_from_drinkcon(struct obj_data * obj)$/;"	f
name_to_drinkcon	act.obj.c	/^void name_to_drinkcon(struct obj_data * obj, int type)$/;"	f
nameserver_is_slow	config.c	/^int nameserver_is_slow = NO;$/;"	v
namestring	ban.c	/^typedef char namestring[MAX_NAME_LENGTH];$/;"	t	file:
nanny	interpreter.c	/^void nanny(struct descriptor_data * d, char *arg)$/;"	f
net_cost_per_diem	struct.h	/^   int	net_cost_per_diem;$/;"	m	struct:rent_info
net_cost_per_diem	structs.h	/^   int	net_cost_per_diem;$/;"	m	struct:rent_info
new	spell_parser.c	/^  char *new;$/;"	m	struct:syllable
new_descriptor	comm.c	/^int new_descriptor(int s)$/;"	f
new_id	purgeplay.c	/^int new_id=10050;$/;"	v
newbie_equip	class.c	/^void newbie_equip(struct char_data * ch)$/;"	f
news	db.c	/^char *news = NULL;		\/* mud news			 *\/$/;"	v
next	db.h	/^   struct ban_list_element *next;$/;"	m	struct:ban_list_element
next	db.h	/^   struct reset_q_element *next;$/;"	m	struct:reset_q_element
next	graph.c	/^  struct bfs_queue_struct *next;$/;"	m	struct:bfs_queue_struct
next	interpreter.h	/^  struct alias *next;$/;"	m	struct:alias
next	mail.h	/^   struct mail_index_type_d *next;	\/* link to next one		*\/$/;"	m	struct:mail_index_type_d
next	mail.h	/^   struct position_list_type_d *next;$/;"	m	struct:position_list_type_d
next	struct.h	/^   struct affected_type *next;$/;"	m	struct:affected_type
next	struct.h	/^   struct char_data *next;             \/* For either monster or ppl-list  *\/$/;"	m	struct:char_data
next	struct.h	/^   struct descriptor_data *next; \/* link to next descriptor		*\/$/;"	m	struct:descriptor_data
next	struct.h	/^   struct extra_descr_data *next; \/* Next in list                     *\/$/;"	m	struct:extra_descr_data
next	struct.h	/^   struct follow_type *next;$/;"	m	struct:follow_type
next	struct.h	/^   struct memory_rec_struct *next;$/;"	m	struct:memory_rec_struct
next	struct.h	/^   struct message_type *next;	\/* to next messages of this kind.	*\/$/;"	m	struct:message_type
next	struct.h	/^   struct obj_data *next;         \/* For the object list              *\/$/;"	m	struct:obj_data
next	struct.h	/^   struct txt_block *next;$/;"	m	struct:txt_block
next	structs.h	/^   struct affected_type *next;$/;"	m	struct:affected_type
next	structs.h	/^   struct char_data *next;             \/* For either monster or ppl-list  *\/$/;"	m	struct:char_data
next	structs.h	/^   struct descriptor_data *next; \/* link to next descriptor		*\/$/;"	m	struct:descriptor_data
next	structs.h	/^   struct extra_descr_data *next; \/* Next in list                     *\/$/;"	m	struct:extra_descr_data
next	structs.h	/^   struct follow_type *next;$/;"	m	struct:follow_type
next	structs.h	/^   struct memory_rec_struct *next;$/;"	m	struct:memory_rec_struct
next	structs.h	/^   struct message_type *next;	\/* to next messages of this kind.	*\/$/;"	m	struct:message_type
next	structs.h	/^   struct obj_data *next;         \/* For the object list              *\/$/;"	m	struct:obj_data
next	structs.h	/^   struct txt_block *next;$/;"	m	struct:txt_block
next	structs.h	/^  struct assisters_type *next;$/;"	m	struct:assisters_type
next	structs.h	/^  struct char_clan_data *next;$/;"	m	struct:char_clan_data
next_block	mail.h	/^   long	next_block;		\/* if header block, link to next block	*\/$/;"	m	struct:header_data_type
next_combat_list	fight.c	/^struct char_data *next_combat_list = NULL;$/;"	v
next_content	struct.h	/^   struct obj_data *next_content; \/* For 'contains' lists             *\/$/;"	m	struct:obj_data
next_content	structs.h	/^   struct obj_data *next_content; \/* For 'contains' lists             *\/$/;"	m	struct:obj_data
next_fighting	struct.h	/^   struct char_data *next_fighting;    \/* For fighting list               *\/$/;"	m	struct:char_data
next_fighting	structs.h	/^   struct char_data *next_fighting;    \/* For fighting list               *\/$/;"	m	struct:char_data
next_in_room	struct.h	/^   struct char_data *next_in_room;     \/* For room->people - list         *\/$/;"	m	struct:char_data
next_in_room	structs.h	/^   struct char_data *next_in_room;     \/* For room->people - list         *\/$/;"	m	struct:char_data
next_line	spec_procs.c	/^  int next_line;$/;"	m	struct:social_type
next_page	modify.c	/^char *next_page(char *str)$/;"	f
nitems	struct.h	/^   int	nitems;$/;"	m	struct:rent_info
nitems	structs.h	/^   int	nitems;$/;"	m	struct:rent_info
no_mail	db.c	/^int no_mail = 0;		\/* mail disabled?		 *\/$/;"	v
no_rent_check	db.c	/^int no_rent_check = 0;		\/* skip rent check on boot?	 *\/$/;"	v
no_specials	comm.c	/^int no_specials = 0;		\/* Suppress ass. of special routines *\/$/;"	v
no_such_item1	shop.h	/^   char	*no_such_item1;		\/* Message if keeper hasn't got an item	*\/$/;"	m	struct:shop_data
no_such_item2	shop.h	/^   char	*no_such_item2;		\/* Message if player hasn't got an item	*\/$/;"	m	struct:shop_data
nonblock	comm.c	/^void nonblock(int s)$/;"	f
not_found	act.social.c	/^  char *not_found;$/;"	m	struct:social_messg
npc_class_types	constants.c	/^const char *npc_class_types[] = {$/;"	v
nr	struct.h	/^   sh_int nr;                            \/* Mob's rnum			  *\/$/;"	m	struct:char_data
nr	structs.h	/^   sh_int nr;                            \/* Mob's rnum			  *\/$/;"	m	struct:char_data
num_attacks	utils.c	/^int num_attacks(struct char_data *ch)$/;"	f
num_invalid	ban.c	/^int num_invalid = 0;$/;"	v
num_items_room	utils.c	/^int num_items_room(struct obj_data *tobj)$/;"	f
num_of_cmds	act.informative.c	/^int num_of_cmds;$/;"	v
num_of_guests	house.h	/^   int num_of_guests;		\/* how many guests for house	*\/$/;"	m	struct:house_control_rec
num_of_guests	house.h	/^   int num_of_guests;		\/* how many guests for house	*\/$/;"	m	struct:house_control_rec_old
num_of_houses	house.c	/^int num_of_houses = 0;$/;"	v
num_of_msgs	boards.c	/^int num_of_msgs[NUM_OF_BOARDS];$/;"	v
number	db.h	/^   int	number;		    \/* virtual number of this zone	  *\/$/;"	m	struct:zone_data
number	struct.h	/^   int	number;     \/* number of existing units of this mob\/obj	*\/$/;"	m	struct:index_data
number	struct.h	/^   room_num number;		\/* Rooms number	(vnum)		      *\/$/;"	m	struct:room_data
number	structs.h	/^   int	number;     \/* number of existing units of this mob\/obj	*\/$/;"	m	struct:index_data
number	structs.h	/^   room_num number;		\/* Rooms number	(vnum)		      *\/$/;"	m	struct:room_data
number	utils.c	/^int number(int from, int to)$/;"	f
number_of_attacks	struct.h	/^   int	number_of_attacks;	\/* How many attack messages to chose from. *\/$/;"	m	struct:message_list
number_of_attacks	structs.h	/^   int	number_of_attacks;	\/* How many attack messages to chose from. *\/$/;"	m	struct:message_list
numbets	structs.h	/^        int numbets;                    \/\/ Number of bets on race$/;"	m	struct:game_data
numplayers	structs.h	/^        int numplayers;                 \/\/ Number of players $/;"	m	struct:blackjack_data
obj_affected_type	struct.h	/^struct obj_affected_type {$/;"	s
obj_affected_type	structs.h	/^struct obj_affected_type {$/;"	s
obj_data	struct.h	/^struct obj_data {$/;"	s
obj_data	structs.h	/^struct obj_data {$/;"	s
obj_file_elem	struct.h	/^struct obj_file_elem {$/;"	s
obj_file_elem	structs.h	/^struct obj_file_elem {$/;"	s
obj_flag_data	struct.h	/^struct obj_flag_data {$/;"	s
obj_flag_data	structs.h	/^struct obj_flag_data {$/;"	s
obj_flags	struct.h	/^   struct obj_flag_data obj_flags;\/* Object information               *\/$/;"	m	struct:obj_data
obj_flags	structs.h	/^   struct obj_flag_data obj_flags;\/* Object information               *\/$/;"	m	struct:obj_data
obj_from_char	handler.c	/^void obj_from_char(struct obj_data * object)$/;"	f
obj_from_obj	handler.c	/^void obj_from_obj(struct obj_data * obj)$/;"	f
obj_from_room	handler.c	/^void obj_from_room(struct obj_data * object)$/;"	f
obj_index	db.c	/^struct index_data *obj_index;	\/* index table for object file	 *\/$/;"	v
obj_num	struct.h	/^typedef sh_int	obj_num;$/;"	t
obj_num	structs.h	/^typedef sh_int	obj_num;$/;"	t
obj_proto	db.c	/^struct obj_data *obj_proto;	\/* prototypes for objs		 *\/$/;"	v
obj_to_char	handler.c	/^void obj_to_char(struct obj_data * object, struct char_data * ch)$/;"	f
obj_to_obj	handler.c	/^void obj_to_obj(struct obj_data * obj, struct obj_data * obj_to)$/;"	f
obj_to_room	handler.c	/^void obj_to_room(struct obj_data * object, int room)$/;"	f
object_list	db.c	/^struct obj_data *object_list = NULL;	\/* global linked list of objs	 *\/$/;"	v
object_list_new_owner	handler.c	/^void object_list_new_owner(struct obj_data * list, struct char_data * ch)$/;"	f
ok_damage_shopkeeper	shop.c	/^int ok_damage_shopkeeper(struct char_data * ch, struct char_data * victim)$/;"	f
ok_shop_room	shop.c	/^int ok_shop_room(int shop_nr, int room)$/;"	f
ole_ListObjExtras	iedit.c	/^void  ole_ListObjExtras(struct obj_data *wobj,struct char_data *ch)$/;"	f
ole_ListObjType	iedit.c	/^void  ole_ListObjType(struct obj_data *wobj,struct char_data *ch)$/;"	f
ole_ListObjValues	iedit.c	/^void  ole_ListObjValues(struct obj_data *wobj,struct char_data *ch)$/;"	f
ole_ListObjWear	iedit.c	/^void  ole_ListObjWear(struct obj_data *wobj,struct char_data *ch)$/;"	f
ole_SetSettingBit	iedit.c	/^void ole_SetSettingBit(struct char_data *ch,int setting)$/;"	f
ole_obj	struct.h	/^   struct obj_data *ole_obj;$/;"	m	struct:descriptor_data
ole_obj	structs.h	/^   struct obj_data *ole_obj;$/;"	m	struct:descriptor_data
ole_set_number	iedit.c	/^void ole_set_number(int* dest, char* src, struct char_data *ch)$/;"	f
ole_set_string	iedit.c	/^void ole_set_string(char* dest, char* src, struct char_data *ch)$/;"	f
ole_setting	struct.h	/^   long ole_setting[4];$/;"	m	struct:descriptor_data
ole_setting	structs.h	/^   long ole_setting[4];$/;"	m	struct:descriptor_data
ole_state	struct.h	/^   int ole_state;$/;"	m	struct:descriptor_data
ole_state	structs.h	/^   int ole_state;$/;"	m	struct:descriptor_data
one_argument	interpreter.c	/^char *one_argument(char *argument, char *first_arg)$/;"	f
one_word	modify.c	/^char *one_word(char *argument, char *first_arg)$/;"	f
open1	shop.h	/^   int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open2	shop.h	/^   int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
operator_str	shop.h	/^const char *operator_str[] = {$/;"	v
org	spell_parser.c	/^  char *org;$/;"	m	struct:syllable
original	struct.h	/^   struct char_data *original;	\/* original char if switched		*\/$/;"	m	struct:descriptor_data
original	structs.h	/^   struct char_data *original;	\/* original char if switched		*\/$/;"	m	struct:descriptor_data
others_auto	act.social.c	/^  char *others_auto;$/;"	m	struct:social_messg
others_found	act.social.c	/^  char *others_found;$/;"	m	struct:social_messg
others_no_arg	act.social.c	/^  char *others_no_arg;$/;"	m	struct:social_messg
output	struct.h	/^   char *output;		\/* ptr to the current output buffer	*\/$/;"	m	struct:descriptor_data
output	structs.h	/^   char *output;		\/* ptr to the current output buffer	*\/$/;"	m	struct:descriptor_data
owner	house.h	/^   long owner;			\/* idnum of house's owner	*\/$/;"	m	struct:house_control_rec
owner	house.h	/^   long owner;			\/* idnum of house's owner	*\/$/;"	m	struct:house_control_rec_old
p_locks	struct.h	/^   sh_int p_locks;$/;"	m	struct:dex_skill_type
p_locks	structs.h	/^   sh_int p_locks;$/;"	m	struct:dex_skill_type
p_pocket	struct.h	/^   sh_int p_pocket;$/;"	m	struct:dex_skill_type
p_pocket	structs.h	/^   sh_int p_pocket;$/;"	m	struct:dex_skill_type
page_string	modify.c	/^void page_string(struct descriptor_data *d, char *str, int keep_internal)$/;"	f
paginate_string	modify.c	/^void paginate_string(char *str, struct descriptor_data *d)$/;"	f
parse_action	modify.c	/^void parse_action(int command, char *string, struct descriptor_data *d) {$/;"	f
parse_class	class.c	/^int parse_class(char* arg)$/;"	f
parse_mobile	db.c	/^void parse_mobile(FILE * mob_f, int nr)$/;"	f
parse_object	db.c	/^char *parse_object(FILE * obj_f, int nr)$/;"	f
parse_room	db.c	/^void parse_room(FILE * fl, int virtual_nr)$/;"	f
pc_class_types	class.c	/^const char *pc_class_types[] = {$/;"	v
pcnpc	act.wizard.c	/^  char pcnpc;$/;"	m	struct:set_struct
people	struct.h	/^   struct char_data *people;    \/* List of NPC \/ PC in room           *\/$/;"	m	struct:room_data
people	structs.h	/^   struct char_data *people;    \/* List of NPC \/ PC in room           *\/$/;"	m	struct:room_data
perform_act	comm.c	/^void perform_act(char *orig, struct char_data * ch, struct obj_data * obj,$/;"	f
perform_alias	interpreter.c	/^int perform_alias(struct descriptor_data * d, char *orig)$/;"	f
perform_complex_alias	interpreter.c	/^void perform_complex_alias(struct txt_q *input_q, char *orig, struct alias *a)$/;"	f
perform_drop	act.obj.c	/^int perform_drop(struct char_data * ch, struct obj_data * obj,$/;"	f
perform_drop_gold	act.obj.c	/^void perform_drop_gold(struct char_data * ch, int amount,$/;"	f
perform_get_from_container	act.obj.c	/^void perform_get_from_container(struct char_data * ch, struct obj_data * obj,$/;"	f
perform_get_from_room	act.obj.c	/^int perform_get_from_room(struct char_data * ch, struct obj_data * obj)$/;"	f
perform_give	act.obj.c	/^void perform_give(struct char_data * ch, struct char_data * vict,$/;"	f
perform_give_gold	act.obj.c	/^void perform_give_gold(struct char_data * ch, struct char_data * vict,$/;"	f
perform_group_gain	fight.c	/^void perform_group_gain(struct char_data * ch, int base,$/;"	f
perform_immort_invis	act.wizard.c	/^void perform_immort_invis(struct char_data *ch, int level)$/;"	f
perform_immort_vis	act.wizard.c	/^void perform_immort_vis(struct char_data *ch)$/;"	f
perform_immort_where	act.informative.c	/^void perform_immort_where(struct char_data * ch, char *arg)$/;"	f
perform_mortal_where	act.informative.c	/^void perform_mortal_where(struct char_data * ch, char *arg)$/;"	f
perform_move	act.movement.c	/^int perform_move(struct char_data * ch, int dir, int need_specials_check)$/;"	f
perform_put	act.obj.c	/^void perform_put(struct char_data * ch, struct obj_data * obj,$/;"	f
perform_remove	act.obj.c	/^void perform_remove(struct char_data * ch, int pos)$/;"	f
perform_subst	comm.c	/^int perform_subst(struct descriptor_data * t, char *orig, char *subst)$/;"	f
perform_tell	act.comm.c	/^void perform_tell(struct char_data *ch, struct char_data *vict, char *arg)$/;"	f
perform_violence	fight.c	/^void perform_violence(void)$/;"	f
perform_wear	act.obj.c	/^void perform_wear(struct char_data * ch, struct obj_data * obj, int where)$/;"	f
peter	castle.c	/^SPECIAL(peter);$/;"	v
pk_allowed	config.c	/^int pk_allowed = NO;$/;"	v
play_craps	gambling.c	/^void play_craps(struct char_data *ch, struct char_data *dealer, int bet, int minbet, int maxbet)$/;"	f
play_high_dice	gambling.c	/^void play_high_dice(struct char_data *ch, struct char_data *dealer, int bet, int minbet, int maxbet)$/;"	f
play_roulette	gambling.c	/^void play_roulette(struct char_data *ch, struct char_data *dealer, char *guess, int bet, int minbet, int maxbet)$/;"	f
play_seven	gambling.c	/^void play_seven(struct char_data *ch, struct char_data *dealer, char *guess, int bet, int minbet, int maxbet)$/;"	f
play_slots	casino.c	/^void play_slots(struct char_data *ch, int amount) {$/;"	f
play_slots	gambling.c	/^void play_slots(struct char_data *ch)$/;"	f
play_slots1	gambling.c	/^void play_slots1(struct char_data *ch)$/;"	f
play_slots2	gambling.c	/^void play_slots2(struct char_data *ch)$/;"	f
play_slots3	gambling.c	/^void play_slots3(struct char_data *ch)$/;"	f
play_triples	gambling.c	/^void play_triples(struct char_data *ch, struct char_data *dealer, char *guess, int bet, int minbet, int maxbet) $/;"	f
played	struct.h	/^   int	played;     \/* This is the total accumulated time played in secs *\/$/;"	m	struct:time_data
played	struct.h	/^   int	played;    \/* Number of secs played in total *\/$/;"	m	struct:char_file_u
played	structs.h	/^   int	played;     \/* This is the total accumulated time played in secs *\/$/;"	m	struct:time_data
played	structs.h	/^   int	played;    \/* Number of secs played in total *\/$/;"	m	struct:char_file_u
player	struct.h	/^   struct char_player_data player;       \/* Normal data                   *\/$/;"	m	struct:char_data
player	structs.h	/^   struct char_player_data player;       \/* Normal data                   *\/$/;"	m	struct:char_data
player	structs.h	/^  struct char_player_data player;$/;"	m	struct:char_clan_data
player_bits	constants.c	/^const char *player_bits[] = {$/;"	v
player_fl	db.c	/^FILE *player_fl = NULL;		\/* file desc of player file	 *\/$/;"	v
player_index_element	db.h	/^struct player_index_element {$/;"	s
player_special_data	struct.h	/^struct player_special_data {$/;"	s
player_special_data	structs.h	/^struct player_special_data {$/;"	s
player_special_data_saved	struct.h	/^struct player_special_data_saved {$/;"	s
player_special_data_saved	structs.h	/^struct player_special_data_saved {$/;"	s
player_specials	struct.h	/^   struct player_special_data *player_specials; \/* PC specials		  *\/$/;"	m	struct:char_data
player_specials	structs.h	/^   struct player_special_data *player_specials; \/* PC specials		  *\/$/;"	m	struct:char_data
player_specials_saved	struct.h	/^   struct player_special_data_saved player_specials_saved;$/;"	m	struct:char_file_u
player_specials_saved	structs.h	/^   struct player_special_data_saved player_specials_saved;$/;"	m	struct:char_file_u
player_table	db.c	/^struct player_index_element *player_table = NULL;	\/* index to plr file	 *\/$/;"	v
plural	spells.h	/^   char	*plural;$/;"	m	struct:attack_hit_type
point_update	limits.c	/^void point_update(void)$/;"	f
points	struct.h	/^   struct char_point_data points;        \/* Points                        *\/$/;"	m	struct:char_data
points	struct.h	/^   struct char_point_data points;$/;"	m	struct:char_file_u
points	structs.h	/^   struct char_point_data points;        \/* Points                        *\/$/;"	m	struct:char_data
points	structs.h	/^   struct char_point_data points;$/;"	m	struct:char_file_u
policies	db.c	/^char *policies = NULL;		\/* policies page		 *\/$/;"	v
poofin	struct.h	/^   char	*poofin;		\/* Description on arrival of a god.     *\/$/;"	m	struct:player_special_data
poofin	structs.h	/^   char	*poofin;		\/* Description on arrival of a god.     *\/$/;"	m	struct:player_special_data
poofout	struct.h	/^   char	*poofout;		\/* Description upon a god's exit.       *\/$/;"	m	struct:player_special_data
poofout	structs.h	/^   char	*poofout;		\/* Description upon a god's exit.       *\/$/;"	m	struct:player_special_data
pop	shop.c	/^int pop(struct stack_data * stack)$/;"	f
pop_free_list	mail.c	/^long pop_free_list(void)$/;"	f
pos	db.h	/^   long	pos;$/;"	m	struct:help_index_element
pos	struct.h	/^   int	pos;			\/* position in player-file		*\/$/;"	m	struct:descriptor_data
pos	structs.h	/^   int	pos;			\/* position in player-file		*\/$/;"	m	struct:descriptor_data
position	mail.h	/^   long	position;$/;"	m	struct:position_list_type_d
position	struct.h	/^   byte position;		\/* Standing, fighting, sleeping, etc.	*\/$/;"	m	struct:char_special_data
position	structs.h	/^   byte position;		\/* Standing, fighting, sleeping, etc.	*\/$/;"	m	struct:char_special_data
position_list_type	mail.h	/^typedef struct position_list_type_d position_list_type;$/;"	t
position_list_type_d	mail.h	/^struct position_list_type_d {$/;"	s
position_types	constants.c	/^const char *position_types[] = {$/;"	v
postmaster_check_mail	mail.c	/^void postmaster_check_mail(struct char_data * ch, struct char_data *mailman,$/;"	f
postmaster_receive_mail	mail.c	/^void postmaster_receive_mail(struct char_data * ch, struct char_data *mailman,$/;"	f
postmaster_send_mail	mail.c	/^void postmaster_send_mail(struct char_data * ch, struct char_data *mailman,$/;"	f
prac_types	spec_procs.c	/^char *prac_types[] = {$/;"	v
pre_buf	memdbg.c	/^	unsigned char pre_buf[MEMBUFZONE];  $/;"	m	struct:memnod
pref	struct.h	/^   long	pref;			\/* preference flags for PC's.		*\/$/;"	m	struct:player_special_data_saved
pref	structs.h	/^   long	pref;			\/* preference flags for PC's.		*\/$/;"	m	struct:player_special_data_saved
preference_bits	constants.c	/^const char *preference_bits[] = {$/;"	v
pressure	struct.h	/^   int	pressure;	\/* How is the pressure ( Mb ) *\/$/;"	m	struct:weather_data
pressure	structs.h	/^   int	pressure;	\/* How is the pressure ( Mb ) *\/$/;"	m	struct:weather_data
print_llist	llist.c	/^void print_llist(struct llist_node *llist_root)$/;"	f
print_llist	llist.h	/^void print_llist(struct llist_node *llist_root)$/;"	f
print_node_llist	llist.c	/^void print_node_llist(struct llist_node *ptr)$/;"	f
print_node_llist	llist.h	/^void print_node_llist(struct llist_node *ptr)$/;"	f
print_object_location	act.informative.c	/^void print_object_location(int num, struct obj_data * obj, struct char_data * ch,$/;"	f
print_zone_to_buf	act.wizard.c	/^void print_zone_to_buf(char *bufptr, int zone)$/;"	f
proc_color	color.c	/^void proc_color(char *inbuf, int colour)$/;"	f
process_input	comm.c	/^int process_input(struct descriptor_data * t)$/;"	f
process_output	comm.c	/^int process_output(struct descriptor_data * t)$/;"	f
producing	shop.h	/^   int	*producing;		\/* Which item to produce (virtual)	*\/$/;"	m	struct:shop_data
profit_buy	shop.h	/^   float profit_buy;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
profit_sell	shop.h	/^   float profit_sell;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
prompt_mode	struct.h	/^   int	prompt_mode;		\/* control of prompt-printing		*\/$/;"	m	struct:descriptor_data
prompt_mode	structs.h	/^   int	prompt_mode;		\/* control of prompt-printing		*\/$/;"	m	struct:descriptor_data
pt_allowed	config.c	/^int pt_allowed = NO;$/;"	v
pulse	comm.c	/^int pulse =0;$/;"	v
purge	purgeplay.c	/^void	purge(char *filename)$/;"	f
push	shop.c	/^void push(struct stack_data * stack, int pushval)$/;"	f
push_free_list	mail.c	/^void push_free_list(long pos)$/;"	f
pwd	struct.h	/^   char	pwd[MAX_PWD_LENGTH+1];	\/* password				*\/$/;"	m	struct:descriptor_data
pwd	struct.h	/^   char	pwd[MAX_PWD_LENGTH+1];$/;"	m	struct:char_file_u
pwd	structs.h	/^   char	pwd[MAX_PWD_LENGTH+1];	\/* password				*\/$/;"	m	struct:descriptor_data
pwd	structs.h	/^   char	pwd[MAX_PWD_LENGTH+1];$/;"	m	struct:char_file_u
quest_item_number	spec_procs.c	/^int quest_item_number = 0;$/;"	v
queue_head	graph.c	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	file:
queue_tail	graph.c	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	file:
r_eternal_start_room	db.c	/^sh_int r_eternal_start_room;	\/* rnum of eternal start room	 *\/$/;"	v
r_frozen_start_room	db.c	/^sh_int r_frozen_start_room;	\/* rnum of frozen start room	 *\/$/;"	v
r_immort_start_room	db.c	/^sh_int r_immort_start_room;	\/* rnum of immort start room	 *\/$/;"	v
r_mortal_start_room	db.c	/^sh_int r_mortal_start_room;	\/* rnum of mortal start room	 *\/$/;"	v
race	structs.h	/^} race;$/;"	v
race_stats	class.c	/^const int race_stats[][6] = {$/;"	v
random	utils.h	519;"	d
range	act.wizard.c	/^  char *range;$/;"	m	struct:set_struct
ranks	struct.h	/^   char ranks[RANK_NUM][MAX_LEN];$/;"	m	struct:clan_data
ranks	structs.h	/^   char ranks[RANK_NUM][MAX_LEN];$/;"	m	struct:clan_data
raw_kill	fight.c	/^void raw_kill(struct char_data *ch, struct char_data *killer)$/;"	f
reaction	struct.h	/^   sh_int reaction;$/;"	m	struct:dex_app_type
reaction	structs.h	/^   sh_int reaction;$/;"	m	struct:dex_app_type
read_delete	mail.c	/^char *read_delete(long recipient)$/;"	f
read_from_file	mail.c	/^void read_from_file(void *buf, int size, long filepos)$/;"	f
read_list	shop.c	/^int read_list(FILE * shop_f, struct shop_buy_data * list, int new_format,$/;"	f
read_lvl	boards.h	/^   int	read_lvl;	\/* min level to read messages on this board *\/$/;"	m	struct:board_info_type
read_mobile	db.c	/^struct char_data *read_mobile(int nr, int type)$/;"	f
read_object	db.c	/^struct obj_data *read_object(int nr, int type)$/;"	f
read_type_list	shop.c	/^int read_type_list(FILE * shop_f, struct shop_buy_data * list,$/;"	f
real_abils	struct.h	/^   struct char_ability_data real_abils;	 \/* Abilities without modifiers   *\/$/;"	m	struct:char_data
real_abils	structs.h	/^   struct char_ability_data real_abils;	 \/* Abilities without modifiers   *\/$/;"	m	struct:char_data
real_mobile	db.c	/^int real_mobile(int virtual)$/;"	f
real_object	db.c	/^int real_object(int virtual)$/;"	f
real_room	db.c	/^int real_room(int virtual)$/;"	f
real_time_passed	utils.c	/^struct time_info_data real_time_passed(time_t t2, time_t t1)$/;"	f
realloc	memdbg.h	43;"	d
realloc	memdbg.h	48;"	d
reboot_wizlists	db.c	/^void reboot_wizlists(void)$/;"	f
receptionist	objsave.c	/^SPECIAL(receptionist);$/;"	v
recipient	mail.h	/^   long recipient;			\/* who is this mail for?	*\/$/;"	m	struct:mail_index_type_d
record_usage	comm.c	/^void record_usage(void)$/;"	f
reimburse_levels	interpreter.c	/^void reimburse_levels(struct char_data *ch)$/;"	f
release_room	olc-wld.c	/^void release_room(long vnum)$/;"	f
remember	mobact.c	/^void remember(struct char_data * ch, struct char_data * victim)$/;"	f
removeBJPlayer	casino.c	/^void removeBJPlayer(int playernum) {$/;"	f
remove_lvl	boards.h	/^   int	remove_lvl;	\/* min level to remove messages from this board *\/$/;"	m	struct:board_info_type
remove_room_from_llist	llist.c	/^struct llist_node *remove_room_from_llist(struct llist_node *llist_root, struct room_data *room)$/;"	f
remove_room_from_llist	llist.h	/^struct llist_node *remove_room_from_llist(struct llist_node *llist_root, struct room_data *room)$/;"	f
remove_spaces	olc-wld.c	/^void remove_spaces(char *str)$/;"	f
remove_vnum_from_llist	llist.c	/^struct llist_node *remove_vnum_from_llist(struct llist_node *llist_root, int vnum)$/;"	f
remove_vnum_from_llist	llist.h	/^struct llist_node *remove_vnum_from_llist(struct llist_node *llist_root, int vnum)$/;"	f
rent_discount	config.c	/^int rent_discount = 90;$/;"	v
rent_file_timeout	config.c	/^int rent_file_timeout = 35;$/;"	v
rent_info	struct.h	/^struct rent_info {$/;"	s
rent_info	structs.h	/^struct rent_info {$/;"	s
rent_per_day	config.c	/^int rent_per_day = YES;$/;"	v
rentcode	struct.h	/^   int	rentcode;$/;"	m	struct:rent_info
rentcode	structs.h	/^   int	rentcode;$/;"	m	struct:rent_info
renum_new_world	olc-wld.c	/^void renum_new_world()$/;"	f
renum_world	db.c	/^void renum_world(void)$/;"	f
renum_zone_table	db.c	/^void renum_zone_table(void)$/;"	f
replace_str	utils.c	/^int replace_str(char **string, char *pattern, char *replacement, int rep_all,$/;"	f
replace_string	fight.c	/^char *replace_string(char *str, char *weapon_singular, char *weapon_plural)$/;"	f
replacement	interpreter.h	/^  char *replacement;$/;"	m	struct:alias
reread_wizlists	comm.c	/^void reread_wizlists()$/;"	f
reserved	interpreter.c	/^char *reserved[] =$/;"	v
reserved_word	interpreter.c	/^int reserved_word(char *argument)$/;"	f
reset_char	db.c	/^void reset_char(struct char_data * ch)$/;"	f
reset_com	db.h	/^struct reset_com {$/;"	s
reset_mode	db.h	/^   int	reset_mode;         \/* conditions for reset (see below)   *\/$/;"	m	struct:zone_data
reset_q	db.c	/^struct reset_q_type reset_q;	\/* queue of zones to be reset	 *\/$/;"	v
reset_q_element	db.h	/^struct reset_q_element {$/;"	s
reset_q_type	db.h	/^struct reset_q_type {$/;"	s
reset_time	db.c	/^void reset_time(void)$/;"	f
reset_zone	db.c	/^void reset_zone(int zone)$/;"	f
restrict	db.c	/^int restrict = 0;		\/* level of game restriction	 *\/$/;"	v
rev_dir	constants.c	/^const int rev_dir[] =$/;"	v
ridden_by	structs.h	/^   struct char_data *ridden_by;	  \/* ridden by?			      *\/$/;"	m	struct:obj_data
rnum	boards.h	/^   int	rnum;		\/* rnum of this board *\/$/;"	m	struct:board_info_type
roll_real_abils	class.c	/^void roll_real_abils(struct char_data * ch)$/;"	f
room	graph.c	/^  sh_int room;$/;"	m	struct:bfs_queue_struct
room_being_edited	olc-wld.c	/^int room_being_edited(long vnum)$/;"	f
room_bits	constants.c	/^const char *room_bits[] = {$/;"	v
room_data	struct.h	/^struct room_data {$/;"	s
room_data	structs.h	/^struct room_data {$/;"	s
room_desc	olc-wld.c	/^void room_desc(struct room_data *room, struct char_data *coder)$/;"	f
room_direction_data	struct.h	/^struct room_direction_data {$/;"	s
room_direction_data	structs.h	/^struct room_direction_data {$/;"	s
room_flags	olc-wld.c	/^void room_flags(struct room_data *room, struct char_data *coder, char ch1)$/;"	f
room_flags	struct.h	/^   long room_flags;		\/* DEATH,DARK ... etc                 *\/$/;"	m	struct:room_data
room_flags	structs.h	/^   long room_flags;		\/* DEATH,DARK ... etc                 *\/$/;"	m	struct:room_data
room_msg	struct.h	/^   char	*room_msg;      \/* message to room     *\/$/;"	m	struct:msg_type
room_msg	structs.h	/^   char	*room_msg;      \/* message to room     *\/$/;"	m	struct:msg_type
room_num	struct.h	/^typedef sh_int	room_num;$/;"	t
room_num	structs.h	/^typedef sh_int	room_num;$/;"	t
room_title	olc-wld.c	/^void room_title(struct room_data *room, struct char_data *coder)$/;"	f
rooms_in_use	olc-wld.c	/^static struct llist_node *rooms_in_use = 0;$/;"	v	file:
routines	spells.h	/^   int routines;$/;"	m	struct:spell_info_type
same_obj	shop.c	/^int same_obj(struct obj_data * obj1, struct obj_data * obj2)$/;"	f
same_world	utils.c	/^int same_world(struct char_data *ch,struct char_data *ch2)$/;"	f
save_aliases	db.c	/^void save_aliases(struct char_data *ch)$/;"	f
save_char	db.c	/^void save_char(struct char_data * ch, sh_int load_room)$/;"	f
save_entry	olc-wld.c	/^void save_entry(struct room_data *room)$/;"	f
save_etext	db.c	/^void save_etext(struct char_data * ch)$/;"	f
save_world	olc-wld.c	/^void save_world()$/;"	f
saved	struct.h	/^   struct char_special_data_saved saved; \/* constants saved in plrfile	*\/$/;"	m	struct:char_special_data
saved	struct.h	/^   struct player_special_data_saved saved;$/;"	m	struct:player_special_data
saved	structs.h	/^   struct char_special_data_saved saved; \/* constants saved in plrfile	*\/$/;"	m	struct:char_special_data
saved	structs.h	/^   struct player_special_data_saved saved;$/;"	m	struct:player_special_data
saving_throws	magic.c	/^const byte saving_throws[2][5][41] = {$/;"	v
say_spell	spell_parser.c	/^void say_spell(struct char_data * ch, int spellnum, struct char_data * tch,$/;"	f
sbyte	struct.h	/^typedef signed char		sbyte;$/;"	t
sbyte	structs.h	/^typedef signed char		sbyte;$/;"	t
scan_buffer_for_xword	act.comm.c	/^int scan_buffer_for_xword(char* buf)$/;"	f
scan_file	mail.c	/^int scan_file(void)$/;"	f
search_block	interpreter.c	/^int search_block(char *arg, char **list, bool exact)$/;"	f
search_llist	llist.c	/^struct llist_node *search_llist(struct llist_node *llist_root, int vnum)$/;"	f
search_llist	llist.h	/^struct llist_node *search_llist(struct llist_node *llist_root, int vnum)$/;"	f
sector_type	olc-wld.c	/^void sector_type(struct room_data *room, struct char_data *coder, char sec)$/;"	f
sector_type	struct.h	/^   int	sector_type;            \/* sector type (move\/hide)            *\/$/;"	m	struct:room_data
sector_type	structs.h	/^   int	sector_type;            \/* sector type (move\/hide)            *\/$/;"	m	struct:room_data
sector_type2	olc-wld.c	/^void sector_type2(struct room_data *room, struct char_data *coder)$/;"	f
sector_types	constants.c	/^const char *sector_types[] = {$/;"	v
sell_price	shop.c	/^int sell_price(struct char_data * ch, struct obj_data * obj, int shop_nr)$/;"	f
send_to_all	comm.c	/^void send_to_all(char *messg)$/;"	f
send_to_char	comm.c	/^void send_to_char(char *messg, struct char_data * ch)$/;"	f
send_to_outdoor	comm.c	/^void send_to_outdoor(char *messg)$/;"	f
send_to_room	comm.c	/^void send_to_room(char *messg, int room)$/;"	f
setBJScore	casino.c	/^void setBJScore(struct game_item *bjitem, int playernum) {$/;"	f
set_fighting	fight.c	/^void set_fighting(struct char_data * ch, struct char_data * vict)$/;"	f
set_struct	act.wizard.c	/^struct set_struct {$/;"	s	file:
set_title	limits.c	/^void set_title(struct char_data * ch, char *title)$/;"	f
setup_dir	db.c	/^void setup_dir(FILE * fl, int room, int dir)$/;"	f
sex	struct.h	/^   byte sex;           \/* PC \/ NPC's sex                       *\/$/;"	m	struct:char_player_data
sex	struct.h	/^   byte sex;$/;"	m	struct:char_file_u
sex	structs.h	/^   byte sex;           \/* PC \/ NPC's sex                       *\/$/;"	m	struct:char_player_data
sex	structs.h	/^   byte sex;$/;"	m	struct:char_file_u
sh_int	struct.h	/^typedef signed short int	sh_int;$/;"	t
sh_int	structs.h	/^typedef signed short int	sh_int;$/;"	t
sharp	constants.c	/^const int sharp[] = {$/;"	v
shock	struct.h	/^   sh_int shock;$/;"	m	struct:con_app_type
shock	structs.h	/^   sh_int shock;$/;"	m	struct:con_app_type
shop_bits	shop.h	/^char *shop_bits[] = {$/;"	v
shop_buy_data	shop.h	/^struct shop_buy_data {$/;"	s
shop_data	shop.h	/^struct shop_data {$/;"	s
shop_index	shop.c	/^struct shop_data *shop_index;$/;"	v
shop_keeper	act.other.c	/^SPECIAL(shop_keeper);$/;"	v
shop_producing	shop.c	/^int shop_producing(struct obj_data * item, int shop_nr)$/;"	f
shopping_buy	shop.c	/^void shopping_buy(char *arg, struct char_data * ch,$/;"	f
shopping_list	shop.c	/^void shopping_list(char *arg, struct char_data * ch,$/;"	f
shopping_sell	shop.c	/^void shopping_sell(char *arg, struct char_data * ch,$/;"	f
shopping_value	shop.c	/^void shopping_value(char *arg, struct char_data * ch,$/;"	f
short_descr	struct.h	/^   char	*short_descr;  \/* for NPC 'actions'                    *\/$/;"	m	struct:char_player_data
short_descr	structs.h	/^   char	*short_descr;  \/* for NPC 'actions'                    *\/$/;"	m	struct:char_player_data
short_description	struct.h	/^   char	*short_description;       \/* when worn\/carry\/in cont.         *\/$/;"	m	struct:obj_data
short_description	structs.h	/^   char	*short_description;       \/* when worn\/carry\/in cont.         *\/$/;"	m	struct:obj_data
showBJHand	casino.c	/^void showBJHand(struct game_item *bjitem, int playernum) {$/;"	f
show_exits	olc-wld.c	/^void show_exits(struct room_data *room, struct char_data *coder)$/;"	f
show_extra_keywords	olc-wld.c	/^void show_extra_keywords(struct room_data *room, struct char_data *coder)$/;"	f
show_obj_to_char	act.informative.c	/^void show_obj_to_char(struct obj_data * object, struct char_data * ch,$/;"	f
show_room_flags	olc-wld.c	/^void show_room_flags(int rflag, struct char_data *coder)$/;"	f
show_shops	shop.c	/^void show_shops(struct char_data * ch, char *arg)$/;"	f
show_string	modify.c	/^void show_string(struct descriptor_data *d, char *input)$/;"	f
showstr_count	structs.h	/^   int  showstr_count;          \/* number of pages to page through      *\/$/;"	m	struct:descriptor_data
showstr_head	struct.h	/^   char	*showstr_head;		\/* for paging through texts		*\/$/;"	m	struct:descriptor_data
showstr_head	structs.h	/^   char	*showstr_head;		\/* for paging through texts		*\/$/;"	m	struct:descriptor_data
showstr_page	structs.h	/^   int  showstr_page;           \/* which page are we currently showing? *\/$/;"	m	struct:descriptor_data
showstr_point	struct.h	/^   char	*showstr_point;		\/*		-			*\/$/;"	m	struct:descriptor_data
showstr_point	structs.h	/^   char	*showstr_point;		\/*		-			*\/$/;"	m	struct:descriptor_data
showstr_vector	structs.h	/^   char **showstr_vector;       \/* for paging through texts             *\/$/;"	m	struct:descriptor_data
sigfunc	comm.h	/^typedef void sigfunc(int);$/;"	t
signal_setup	comm.c	/^void signal_setup(void)$/;"	f
singular	spells.h	/^   char	*singular;$/;"	m	struct:attack_hit_type
site	db.h	/^   char	site[BANNED_SITE_LENGTH+1];$/;"	m	struct:ban_list_element
skill_message	fight.c	/^int skill_message(int dam, struct char_data * ch, struct char_data * vict,$/;"	f
skills	struct.h	/^   ubyte skills[MAX_SKILLS+1];	\/* array of skills plus skill 0		*\/$/;"	m	struct:player_special_data_saved
skills	structs.h	/^   ubyte skills[MAX_SKILLS+1];	\/* array of skills plus skill 0		*\/$/;"	m	struct:player_special_data_saved
skip_spaces	interpreter.c	/^void skip_spaces(char **string)$/;"	f
sky	struct.h	/^   int	sky;	\/* How is the sky. *\/$/;"	m	struct:weather_data
sky	structs.h	/^   int	sky;	\/* How is the sky. *\/$/;"	m	struct:weather_data
slide_obj	shop.c	/^struct obj_data *slide_obj(struct obj_data * obj, struct char_data * keeper,$/;"	f
slot_num	boards.h	/^   int	slot_num;     \/* pos of message in "master index" *\/$/;"	m	struct:board_msginfo
small_outbuf	struct.h	/^   char small_outbuf[SMALL_BUFSIZE];  \/* standard output buffer		*\/$/;"	m	struct:descriptor_data
small_outbuf	structs.h	/^   char small_outbuf[SMALL_BUFSIZE];  \/* standard output buffer		*\/$/;"	m	struct:descriptor_data
sneak	struct.h	/^   sh_int sneak;$/;"	m	struct:dex_skill_type
sneak	structs.h	/^   sh_int sneak;$/;"	m	struct:dex_skill_type
snoop_by	struct.h	/^   struct descriptor_data *snoop_by; \/* And who is snooping this char	*\/$/;"	m	struct:descriptor_data
snoop_by	structs.h	/^   struct descriptor_data *snoop_by; \/* And who is snooping this char	*\/$/;"	m	struct:descriptor_data
snooping	struct.h	/^   struct descriptor_data *snooping; \/* Who is this char snooping	*\/$/;"	m	struct:descriptor_data
snooping	structs.h	/^   struct descriptor_data *snooping; \/* Who is this char snooping	*\/$/;"	m	struct:descriptor_data
soc_mess_list	act.social.c	/^}           *soc_mess_list = NULL;$/;"	v
social_messg	act.social.c	/^struct social_messg {$/;"	s	file:
social_type	spec_procs.c	/^struct social_type {$/;"	s	file:
sort_commands	act.informative.c	/^void sort_commands(void)$/;"	f
sort_keeper_objs	shop.c	/^void sort_keeper_objs(struct char_data * keeper, int shop_nr)$/;"	f
sort_pos	act.informative.c	/^  int sort_pos;$/;"	m	struct:sort_struct
sort_spells	spec_procs.c	/^void sort_spells(void)$/;"	f
sort_struct	act.informative.c	/^struct sort_struct {$/;"	s	file:
spare0	house.h	/^   long spare0;$/;"	m	struct:house_control_rec
spare0	house.h	/^   long spare0;$/;"	m	struct:house_control_rec_old
spare0	struct.h	/^   int	spare0;$/;"	m	struct:rent_info
spare0	structs.h	/^   int	spare0;$/;"	m	struct:rent_info
spare1	house.h	/^   long spare1;$/;"	m	struct:house_control_rec
spare1	house.h	/^   long spare1;$/;"	m	struct:house_control_rec_old
spare1	struct.h	/^   int	spare1;$/;"	m	struct:rent_info
spare1	structs.h	/^   int	spare1;$/;"	m	struct:rent_info
spare16	struct.h	/^   int spare16;$/;"	m	struct:player_special_data_saved
spare18	struct.h	/^   long	spare18;$/;"	m	struct:player_special_data_saved
spare18	structs.h	/^   long	spare18;$/;"	m	struct:player_special_data_saved
spare19	struct.h	/^   long	spare19;$/;"	m	struct:player_special_data_saved
spare19	structs.h	/^   long	spare19;$/;"	m	struct:player_special_data_saved
spare2	house.h	/^   long spare2;$/;"	m	struct:house_control_rec
spare2	house.h	/^   long spare2;$/;"	m	struct:house_control_rec_old
spare2	struct.h	/^   int	spare2;$/;"	m	struct:rent_info
spare2	structs.h	/^   int	spare2;$/;"	m	struct:rent_info
spare20	struct.h	/^   long	spare20;$/;"	m	struct:player_special_data_saved
spare20	structs.h	/^   long	spare20;$/;"	m	struct:player_special_data_saved
spare21	struct.h	/^   long	spare21;$/;"	m	struct:player_special_data_saved
spare21	structs.h	/^   long	spare21;$/;"	m	struct:player_special_data_saved
spare3	house.h	/^   long spare3;$/;"	m	struct:house_control_rec
spare3	house.h	/^   long spare3;$/;"	m	struct:house_control_rec_old
spare3	struct.h	/^   int	spare3;$/;"	m	struct:rent_info
spare3	structs.h	/^   int	spare3;$/;"	m	struct:rent_info
spare4	house.h	/^   long spare4;$/;"	m	struct:house_control_rec
spare4	house.h	/^   long spare4;$/;"	m	struct:house_control_rec_old
spare4	struct.h	/^   int	spare4;$/;"	m	struct:rent_info
spare4	structs.h	/^   int	spare4;$/;"	m	struct:rent_info
spare5	house.h	/^   long spare5;$/;"	m	struct:house_control_rec
spare5	house.h	/^   long spare5;$/;"	m	struct:house_control_rec_old
spare5	struct.h	/^   int	spare5;$/;"	m	struct:rent_info
spare5	structs.h	/^   int	spare5;$/;"	m	struct:rent_info
spare6	house.h	/^   long spare6;$/;"	m	struct:house_control_rec
spare6	house.h	/^   long spare6;$/;"	m	struct:house_control_rec_old
spare6	struct.h	/^   int	spare6;$/;"	m	struct:rent_info
spare6	structs.h	/^   int	spare6;$/;"	m	struct:rent_info
spare7	house.h	/^   long spare7;$/;"	m	struct:house_control_rec
spare7	house.h	/^   long spare7;$/;"	m	struct:house_control_rec_old
spare7	struct.h	/^   int	spare7;$/;"	m	struct:rent_info
spare7	structs.h	/^   int	spare7;$/;"	m	struct:rent_info
special	interpreter.c	/^int special(struct char_data * ch, int cmd, char *arg)$/;"	f
special_item_mount_message	act.movement.c	/^void special_item_mount_message(struct char_data *ch) {$/;"	f
spell_charm	spells.h	/^ASPELL(spell_charm);$/;"	v
spell_control_weather	spells.h	/^ASPELL(spell_control_weather);$/;"	v
spell_create_water	spells.h	/^ASPELL(spell_create_water);$/;"	v
spell_enchant_weapon	spells.h	/^ASPELL(spell_enchant_weapon);$/;"	v
spell_fear	spells.h	/^ASPELL(spell_fear);$/;"	v
spell_fingerdeath	spells.h	/^ASPELL(spell_fingerdeath);$/;"	v
spell_gate	spells.h	/^ASPELL(spell_gate);$/;"	v
spell_identify	spells.h	/^ASPELL(spell_identify);$/;"	v
spell_info	spec_procs.c	/^struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];$/;"	v
spell_info	spell_parser.c	/^struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];$/;"	v
spell_info	utils.c	/^struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];$/;"	v
spell_info_type	spells.h	/^struct spell_info_type {$/;"	s
spell_information	spells.h	/^ASPELL(spell_information);$/;"	v
spell_locate_object	spells.h	/^ASPELL(spell_locate_object);$/;"	v
spell_recall	spells.h	/^ASPELL(spell_recall);$/;"	v
spell_sort_info	spec_procs.c	/^int spell_sort_info[MAX_SKILLS+1];$/;"	v
spell_summon	spells.h	/^ASPELL(spell_summon);$/;"	v
spell_teleport	spells.h	/^ASPELL(spell_teleport);$/;"	v
spell_wear_off_msg	constants.c	/^const char *spell_wear_off_msg[] = {$/;"	v
spello	spell_parser.c	/^void spello(int spl, int mlev, int clev, int tlev, int wlev,$/;"	f
spells	spell_parser.c	/^char *spells[] =$/;"	v
spells_to_learn	struct.h	/^   ubyte spells_to_learn;	\/* How many can you learn yet this level*\/$/;"	m	struct:player_special_data_saved
spells_to_learn	structs.h	/^   ubyte spells_to_learn;	\/* How many can you learn yet this level*\/$/;"	m	struct:player_special_data_saved
sprintbit	utils.c	/^void sprintbit(long vektor, char *names[], char *result)$/;"	f
sprinttype	utils.c	/^void sprinttype(int type, char *names[], char *result)$/;"	f
srandom	utils.h	518;"	d
stack_data	shop.h	/^struct stack_data {$/;"	s
stat_count	struct.h	/^   int stat_count; \/* used when initially rolling char *\/$/;"	m	struct:descriptor_data
stat_count	structs.h	/^   int stat_count; \/* used when initially rolling char *\/$/;"	m	struct:descriptor_data
stat_order	struct.h	/^   ubyte stat_order[6];$/;"	m	struct:player_special_data_saved
stat_order	structs.h	/^   ubyte stat_order[6];$/;"	m	struct:player_special_data_saved
stop_assisters	utils.c	/^void stop_assisters(struct char_data *ch)$/;"	f
stop_assisting	utils.c	/^void stop_assisting(struct char_data * ch)$/;"	f
stop_fighting	fight.c	/^void stop_fighting(struct char_data * ch)$/;"	f
stop_follower	utils.c	/^void stop_follower(struct char_data * ch)$/;"	f
stop_snooping	act.wizard.c	/^void stop_snooping(struct char_data * ch)$/;"	f
store_mail	mail.c	/^void store_mail(long to, long from, char *message_pointer)$/;"	f
store_to_char	db.c	/^void store_to_char(struct char_file_u * st, struct char_data * ch)$/;"	f
str	spells.h	/^   byte str;$/;"	m	struct:spell_info_type
str	struct.h	/^   char	**str;			\/* for the modify-str system		*\/$/;"	m	struct:descriptor_data
str	struct.h	/^   sbyte str;$/;"	m	struct:char_ability_data
str	structs.h	/^   char	**str;			\/* for the modify-str system		*\/$/;"	m	struct:descriptor_data
str	structs.h	/^   sbyte str;$/;"	m	struct:char_ability_data
str_add	struct.h	/^   sbyte str_add;      \/* 000 - 100 if strength 18             *\/$/;"	m	struct:char_ability_data
str_add	structs.h	/^   sbyte str_add;      \/* 000 - 100 if strength 18             *\/$/;"	m	struct:char_ability_data
str_app	constants.c	/^const struct str_app_type str_app[35] = {$/;"	v
str_app_type	struct.h	/^struct str_app_type {$/;"	s
str_app_type	structs.h	/^struct str_app_type {$/;"	s
str_cmp	utils.c	/^int str_cmp(char *arg1, char *arg2)$/;"	f
str_dup	utils.c	/^char *str_dup(const char *source)$/;"	f
strdup	memdbg.h	45;"	d
strdup	memdbg.h	50;"	d
string_add	modify.c	/^void string_add(struct descriptor_data * d, char *str)$/;"	f
string_fields	modify.c	/^char *string_fields[] =$/;"	v
string_write	modify.c	/^void string_write(struct descriptor_data *d, char **writeto, size_t len, long mailto, void *data)$/;"	f
strn_cmp	utils.c	/^int strn_cmp(char *arg1, char *arg2, int n)$/;"	f
subcmd	interpreter.h	/^   int	subcmd;$/;"	m	struct:command_info
sunlight	struct.h	/^   int	sunlight;	\/* And how much sun. *\/$/;"	m	struct:weather_data
sunlight	structs.h	/^   int	sunlight;	\/* And how much sun. *\/$/;"	m	struct:weather_data
syllable	spell_parser.c	/^struct syllable {$/;"	s	file:
syls	spell_parser.c	/^struct syllable syls[] = {$/;"	v
table	structs.h	/^   char *table;$/;"	m	struct:clan_data
tail	db.h	/^   struct reset_q_element *tail;$/;"	m	struct:reset_q_type
tail	struct.h	/^   struct txt_block *tail;$/;"	m	struct:txt_q
tail	structs.h	/^   struct txt_block *tail;$/;"	m	struct:txt_q
talks	struct.h	/^   bool talks[MAX_TONGUE];	\/* PC s Tongues 0 for NPC		*\/$/;"	m	struct:player_special_data_saved
talks	structs.h	/^   bool talks[MAX_TONGUE];	\/* PC s Tongues 0 for NPC		*\/$/;"	m	struct:player_special_data_saved
targets	spells.h	/^   sh_int targets;         \/* See below for use with TAR_XXX  *\/$/;"	m	struct:spell_info_type
temper1	shop.h	/^   int	 temper1;		\/* How does keeper react if no money	*\/$/;"	m	struct:shop_data
test	olc-wld.c	/^void test()$/;"	f
text	struct.h	/^   char	*text;$/;"	m	struct:txt_block
text	structs.h	/^   char	*text;$/;"	m	struct:txt_block
thaco	class.c	/^int thaco(struct char_data * ch)$/;"	f
tics	comm.c	/^int tics = 0;			\/* for extern checkpointing *\/$/;"	v
tim	castle.c	/^SPECIAL(tim);$/;"	v
time	struct.h	/^   int	time;$/;"	m	struct:rent_info
time	struct.h	/^   struct time_data time;  \/* PC's AGE in days                 *\/$/;"	m	struct:char_player_data
time	structs.h	/^   int	time;$/;"	m	struct:rent_info
time	structs.h	/^   struct time_data time;  \/* PC's AGE in days                 *\/$/;"	m	struct:char_player_data
time_data	struct.h	/^struct time_data {$/;"	s
time_data	structs.h	/^struct time_data {$/;"	s
time_info	db.c	/^struct time_info_data time_info;\/* the infomation about the time    *\/$/;"	v
time_info_data	struct.h	/^struct time_info_data {$/;"	s
time_info_data	structs.h	/^struct time_info_data {$/;"	s
timediff	comm.c	/^struct timeval timediff(struct timeval * a, struct timeval * b)$/;"	f
timer	struct.h	/^   int	timer;			\/* Timer for update			*\/$/;"	m	struct:char_special_data
timer	struct.h	/^   int	timer;		\/* Timer for object                 *\/$/;"	m	struct:obj_flag_data
timer	struct.h	/^   int	timer;$/;"	m	struct:obj_file_elem
timer	structs.h	/^   int	timer;			\/* Timer for update			*\/$/;"	m	struct:char_special_data
timer	structs.h	/^   int	timer;		\/* Timer for object                 *\/$/;"	m	struct:obj_flag_data
timer	structs.h	/^   int	timer;$/;"	m	struct:obj_file_elem
times_message	shop.c	/^char *times_message(struct obj_data * obj, char *name, int num)$/;"	f
timetogame	structs.h	/^        int timetogame;                 \/\/ State of race$/;"	m	struct:game_data
titan	fight.c	/^SPECIAL(titan);$/;"	v
title	struct.h	/^   char	*title;        \/* PC \/ NPC's title                     *\/$/;"	m	struct:char_player_data
title	struct.h	/^   char	title[MAX_TITLE_LENGTH+1];$/;"	m	struct:char_file_u
title	structs.h	/^   char	*title;        \/* PC \/ NPC's title                     *\/$/;"	m	struct:char_player_data
title	structs.h	/^   char	title[MAX_TITLE_LENGTH+1];$/;"	m	struct:char_file_u
title_f	struct.h	/^   char	*title_f;$/;"	m	struct:title_type
title_f	structs.h	/^   char	*title_f;$/;"	m	struct:title_type
title_m	struct.h	/^   char	*title_m;$/;"	m	struct:title_type
title_m	structs.h	/^   char	*title_m;$/;"	m	struct:title_type
title_no_good	act.other.c	/^int title_no_good(const char *title)$/;"	f
title_type	struct.h	/^struct title_type {$/;"	s
title_type	structs.h	/^struct title_type {$/;"	s
to	mail.h	/^   long to;			\/* idnum of mail's recipient		*\/$/;"	m	struct:header_data_type
to_room	olc-wld.c	/^struct room_direction_data *to_room(struct room_direction_data *dir, struct char_data *coder)$/;"	f
to_room	struct.h	/^   room_num to_room;		\/* Where direction leads (NOWHERE)	*\/$/;"	m	struct:room_direction_data
to_room	structs.h	/^   room_num to_room;		\/* Where direction leads (NOWHERE)	*\/$/;"	m	struct:room_direction_data
todam	struct.h	/^   sh_int todam;    \/* Damage Bonus\/Penalty                *\/$/;"	m	struct:str_app_type
todam	structs.h	/^   sh_int todam;    \/* Damage Bonus\/Penalty                *\/$/;"	m	struct:str_app_type
toggle_display	act.informative.c	/^void toggle_display(struct char_data *ch, struct char_data *vict)$/;"	f
tohit	struct.h	/^   sh_int tohit;    \/* To Hit (THAC0) Bonus\/Penalty        *\/$/;"	m	struct:str_app_type
tohit	structs.h	/^   sh_int tohit;    \/* To Hit (THAC0) Bonus\/Penalty        *\/$/;"	m	struct:str_app_type
tom	castle.c	/^SPECIAL(tom);$/;"	v
top	db.h	/^   int	top;                \/* upper limit for rooms in this zone *\/$/;"	m	struct:zone_data
top	shop.c	/^int top(struct stack_data * stack)$/;"	f
top_idnum	db.c	/^long top_idnum = 0;		\/* highest idnum in use		 *\/$/;"	v
top_of_helpt	db.c	/^int top_of_helpt;		\/* top of help index table	 *\/$/;"	v
top_of_mobt	db.c	/^int top_of_mobt = 0;		\/* top of mobile index table	 *\/$/;"	v
top_of_objt	db.c	/^int top_of_objt = 0;		\/* top of object index table	 *\/$/;"	v
top_of_p_file	db.c	/^int top_of_p_file = 0;		\/* ref of size of p file	 *\/$/;"	v
top_of_p_table	db.c	/^int top_of_p_table = 0;		\/* ref to top of table		 *\/$/;"	v
top_of_world	db.c	/^int top_of_world = 0;		\/* ref to top element of world	 *\/$/;"	v
top_of_zone_table	db.c	/^int top_of_zone_table = 0;	\/* top element of zone tab	 *\/$/;"	v
top_shop	shop.c	/^int top_shop = 0;$/;"	v
touch	utils.c	/^int touch(char *path)$/;"	f
trade_letters	shop.h	/^const char *trade_letters[] = {$/;"	v
trade_with	shop.c	/^int trade_with(struct obj_data * item, int shop_nr)$/;"	f
training_master	castle.c	/^SPECIAL(training_master);$/;"	v
transaction_amt	shop.c	/^int transaction_amt(char *arg)$/;"	f
traps	struct.h	/^   sh_int traps;$/;"	m	struct:dex_skill_type
traps	structs.h	/^   sh_int traps;$/;"	m	struct:dex_skill_type
two_arguments	interpreter.c	/^char *two_arguments(char *argument, char *first_arg, char *second_arg)$/;"	f
txt	mail.h	/^   char	txt[DATA_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:data_block_type_d
txt	mail.h	/^   char	txt[HEADER_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:header_block_type_d
txt_block	struct.h	/^struct txt_block {$/;"	s
txt_block	structs.h	/^struct txt_block {$/;"	s
txt_q	struct.h	/^struct txt_q {$/;"	s
txt_q	structs.h	/^struct txt_q {$/;"	s
type	act.wizard.c	/^  char type;$/;"	m	struct:set_struct
type	db.h	/^   int	type;$/;"	m	struct:ban_list_element
type	interpreter.h	/^  int type;$/;"	m	struct:alias
type	shop.h	/^   int type;$/;"	m	struct:shop_buy_data
type	shop.h	/^   struct shop_buy_data *type;	\/* Which items to trade			*\/$/;"	m	struct:shop_data
type	struct.h	/^   sh_int type;          \/* The type of spell that caused this      *\/$/;"	m	struct:affected_type
type	structs.h	/^        int type;                       \/\/ Type of bet -- long, short, medium(default)$/;"	m	struct:game_item
type	structs.h	/^   sh_int type;          \/* The type of spell that caused this      *\/$/;"	m	struct:affected_type
type_flag	struct.h	/^   byte type_flag;	\/* Type of item			    *\/$/;"	m	struct:obj_flag_data
type_flag	structs.h	/^   byte type_flag;	\/* Type of item			    *\/$/;"	m	struct:obj_flag_data
ubyte	struct.h	/^typedef unsigned char		ubyte;$/;"	t
ubyte	structs.h	/^typedef unsigned char		ubyte;$/;"	t
unequip_char	handler.c	/^struct obj_data *unequip_char(struct char_data * ch, int pos)$/;"	f
unrestrict_game	comm.c	/^void unrestrict_game()$/;"	f
update_char_objects	handler.c	/^void update_char_objects(struct char_data * ch)$/;"	f
update_obj_file	objsave.c	/^void update_obj_file(void)$/;"	f
update_object	handler.c	/^void update_object(struct obj_data * obj, int use)$/;"	f
update_pos	fight.c	/^void update_pos(struct char_data * victim)$/;"	f
use_autowiz	config.c	/^int use_autowiz = NO;$/;"	v
ush_int	struct.h	/^typedef unsigned short int	ush_int;$/;"	t
ush_int	structs.h	/^typedef unsigned short int	ush_int;$/;"	t
value	struct.h	/^   int	value[4];	\/* Values of the item (see list)    *\/$/;"	m	struct:obj_flag_data
value	struct.h	/^   int	value[4];$/;"	m	struct:obj_file_elem
value	structs.h	/^   int	value[4];	\/* Values of the item (see list)    *\/$/;"	m	struct:obj_flag_data
value	structs.h	/^   int	value[4];$/;"	m	struct:obj_file_elem
vict_found	act.social.c	/^  char *vict_found;$/;"	m	struct:social_messg
victim_msg	struct.h	/^   char	*victim_msg;    \/* message to victim   *\/$/;"	m	struct:msg_type
victim_msg	structs.h	/^   char	*victim_msg;    \/* message to victim   *\/$/;"	m	struct:msg_type
violent	spells.h	/^   byte violent;$/;"	m	struct:spell_info_type
vnum	boards.h	/^   int	vnum;		\/* vnum of this board *\/$/;"	m	struct:board_info_type
vnum	house.h	/^   sh_int vnum;			\/* vnum of this house		*\/$/;"	m	struct:house_control_rec
vnum	house.h	/^   sh_int vnum;			\/* vnum of this house		*\/$/;"	m	struct:house_control_rec_old
vnum_mobile	db.c	/^int vnum_mobile(char *searchname, struct char_data * ch)$/;"	f
vnum_object	db.c	/^int vnum_object(char *searchname, struct char_data * ch)$/;"	f
wait	struct.h	/^   int	wait;			\/* wait for how many loops		*\/$/;"	m	struct:descriptor_data
wait	structs.h	/^   int	wait;			\/* wait for how many loops		*\/$/;"	m	struct:descriptor_data
wait_state	struct.h	/^   int wait_state;          \/* Wait state for bashed mobs              *\/$/;"	m	struct:mob_special_data
wait_state	structs.h	/^   int wait_state;          \/* Wait state for bashed mobs              *\/$/;"	m	struct:mob_special_data
was_in_room	struct.h	/^   room_num was_in_room;		 \/* location for linkdead people  *\/$/;"	m	struct:char_data
was_in_room	structs.h	/^   room_num was_in_room;		 \/* location for linkdead people  *\/$/;"	m	struct:char_data
wear_bits	constants.c	/^const char *wear_bits[] = {$/;"	v
wear_flags	struct.h	/^   int	wear_flags;	\/* Where you can wear it	    *\/$/;"	m	struct:obj_flag_data
wear_flags	structs.h	/^   int	wear_flags;	\/* Where you can wear it	    *\/$/;"	m	struct:obj_flag_data
wear_message	act.obj.c	/^void wear_message(struct char_data * ch, struct obj_data * obj, int where)$/;"	f
weather_and_time	weather.c	/^void weather_and_time(int mode)$/;"	f
weather_change	weather.c	/^void weather_change(void)$/;"	f
weather_data	struct.h	/^struct weather_data {$/;"	s
weather_data	structs.h	/^struct weather_data {$/;"	s
weather_info	db.c	/^struct weather_data weather_info;	\/* the infomation about the weather *\/$/;"	v
weekdays	constants.c	/^const char *weekdays[7] = {$/;"	v
weight	struct.h	/^   int	weight;		\/* Weigt what else                  *\/$/;"	m	struct:obj_flag_data
weight	struct.h	/^   int	weight;$/;"	m	struct:obj_file_elem
weight	struct.h	/^   ubyte weight;       \/* PC \/ NPC's weight                    *\/$/;"	m	struct:char_player_data
weight	struct.h	/^   ubyte weight;$/;"	m	struct:char_file_u
weight	structs.h	/^   int	weight;		\/* Weigt what else                  *\/$/;"	m	struct:obj_flag_data
weight	structs.h	/^   int	weight;$/;"	m	struct:obj_file_elem
weight	structs.h	/^   ubyte weight;       \/* PC \/ NPC's weight                    *\/$/;"	m	struct:char_player_data
weight	structs.h	/^   ubyte weight;$/;"	m	struct:char_file_u
weight_change_object	act.obj.c	/^void weight_change_object(struct obj_data * obj, int weight)$/;"	f
where	constants.c	/^const char *where[] = {$/;"	v
wield_w	struct.h	/^   sh_int wield_w;  \/* Maximum weight that can be wielded  *\/$/;"	m	struct:str_app_type
wield_w	structs.h	/^   sh_int wield_w;  \/* Maximum weight that can be wielded  *\/$/;"	m	struct:str_app_type
wimp_level	struct.h	/^   int	wimp_level;		\/* Below this # of hit points, flee!	*\/$/;"	m	struct:player_special_data_saved
wimp_level	structs.h	/^   int	wimp_level;		\/* Below this # of hit points, flee!	*\/$/;"	m	struct:player_special_data_saved
wis	spells.h	/^   byte wis;$/;"	m	struct:spell_info_type
wis	struct.h	/^   sbyte wis;$/;"	m	struct:char_ability_data
wis	structs.h	/^   sbyte wis;$/;"	m	struct:char_ability_data
wis_app	constants.c	/^struct wis_app_type wis_app[36] = {$/;"	v
wis_app_type	struct.h	/^struct wis_app_type {$/;"	s
wis_app_type	structs.h	/^struct wis_app_type {$/;"	s
with_who	shop.h	/^   int	 with_who;		\/* Who does the shop trade with?	*\/$/;"	m	struct:shop_data
wizlist	db.c	/^char *wizlist = NULL;		\/* list of higher gods		 *\/$/;"	v
world	db.c	/^struct room_data *world = NULL;	\/* array of rooms		 *\/$/;"	v
world	db.h	/^   int  world;		    \/* what world the zone is in - DM	  *\/$/;"	m	struct:zone_data
world_entry	struct.h	/^   int world_entry[3];   \/* Entry\/recall point for each world... *\/$/;"	m	struct:player_special_data_saved
world_entry	structs.h	/^   int world_entry[3];   \/* Entry\/recall point for each world... *\/$/;"	m	struct:player_special_data_saved
world_start_room	config.c	/^sh_int world_start_room[3] = {15,13235,22031};$/;"	v
worn_by	struct.h	/^   struct char_data *worn_by;	  \/* Worn by?			      *\/$/;"	m	struct:obj_data
worn_by	structs.h	/^   struct char_data *worn_by;	  \/* Worn by?			      *\/$/;"	m	struct:obj_data
worn_on	struct.h	/^   sh_int worn_on;		  \/* Worn where?		      *\/$/;"	m	struct:obj_data
worn_on	structs.h	/^   sh_int worn_on;		  \/* Worn where?		      *\/$/;"	m	struct:obj_data
write_ban_list	ban.c	/^void write_ban_list(void)$/;"	f
write_lvl	boards.h	/^   int	write_lvl;	\/* min level to write messages on this board *\/$/;"	m	struct:board_info_type
write_to_descriptor	comm.c	/^int write_to_descriptor(int desc, char *txt)$/;"	f
write_to_file	mail.c	/^void write_to_file(void *buf, int size, long filepos)$/;"	f
write_to_output	comm.c	/^void write_to_output(const char *txt, struct descriptor_data * t)$/;"	f
write_to_q	comm.c	/^void write_to_q(char *txt, struct txt_q * queue, int aliased)$/;"	f
year	struct.h	/^   sh_int year;$/;"	m	struct:time_info_data
year	structs.h	/^   sh_int year;$/;"	m	struct:time_info_data
zflag	db.h	/^   int  zflag;              \/* zone-type for pk-zones, etc...     *\/$/;"	m	struct:zone_data
zone	struct.h	/^   sh_int zone;                 \/* Room zone (for resetting)          *\/$/;"	m	struct:room_data
zone	structs.h	/^   sh_int zone;                 \/* Room zone (for resetting)          *\/$/;"	m	struct:room_data
zone_data	db.h	/^struct zone_data {$/;"	s
zone_flagbits	constants.c	/^const char *zone_flagbits[] = {$/;"	v
zone_number	olc-wld.c	/^void zone_number(struct room_data *room, struct char_data *coder)$/;"	f
zone_table	db.c	/^struct zone_data *zone_table;	\/* zone table			 *\/$/;"	v
zone_to_reset	db.h	/^   int	zone_to_reset;            \/* ref to zone_data *\/$/;"	m	struct:reset_q_element
zone_update	db.c	/^void zone_update(void)$/;"	f
