!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ABORT	telnet.h	59;"	d
ACMD	act.comm.c	/^ACMD(do_auction)$/;"	f
ACMD	act.comm.c	/^ACMD(do_gen_comm)$/;"	f
ACMD	act.comm.c	/^ACMD(do_gsay)$/;"	f
ACMD	act.comm.c	/^ACMD(do_page)$/;"	f
ACMD	act.comm.c	/^ACMD(do_reply)$/;"	f
ACMD	act.comm.c	/^ACMD(do_say)$/;"	f
ACMD	act.comm.c	/^ACMD(do_spec_comm)$/;"	f
ACMD	act.comm.c	/^ACMD(do_tell)$/;"	f
ACMD	act.comm.c	/^ACMD(do_write)$/;"	f
ACMD	act.informative.c	/^ACMD(do_affects)$/;"	f
ACMD	act.informative.c	/^ACMD(do_bounties)$/;"	f
ACMD	act.informative.c	/^ACMD(do_classes)$/;"	f
ACMD	act.informative.c	/^ACMD(do_color)$/;"	f
ACMD	act.informative.c	/^ACMD(do_commands)$/;"	f
ACMD	act.informative.c	/^ACMD(do_consider)$/;"	f
ACMD	act.informative.c	/^ACMD(do_diagnose)$/;"	f
ACMD	act.informative.c	/^ACMD(do_equipment)$/;"	f
ACMD	act.informative.c	/^ACMD(do_events)$/;"	f
ACMD	act.informative.c	/^ACMD(do_examine)$/;"	f
ACMD	act.informative.c	/^ACMD(do_exits)$/;"	f
ACMD	act.informative.c	/^ACMD(do_exp)$/;"	f
ACMD	act.informative.c	/^ACMD(do_gen_ps)$/;"	f
ACMD	act.informative.c	/^ACMD(do_gold)$/;"	f
ACMD	act.informative.c	/^ACMD(do_help)$/;"	f
ACMD	act.informative.c	/^ACMD(do_immlist) $/;"	f
ACMD	act.informative.c	/^ACMD(do_info)$/;"	f
ACMD	act.informative.c	/^ACMD(do_inventory)$/;"	f
ACMD	act.informative.c	/^ACMD(do_levels)$/;"	f
ACMD	act.informative.c	/^ACMD(do_listen)$/;"	f
ACMD	act.informative.c	/^ACMD(do_look)$/;"	f
ACMD	act.informative.c	/^ACMD(do_moon)$/;"	f
ACMD	act.informative.c	/^ACMD(do_score)$/;"	f
ACMD	act.informative.c	/^ACMD(do_search)$/;"	f
ACMD	act.informative.c	/^ACMD(do_sense)$/;"	f
ACMD	act.informative.c	/^ACMD(do_setcolour)$/;"	f
ACMD	act.informative.c	/^ACMD(do_show_hint)$/;"	f
ACMD	act.informative.c	/^ACMD(do_time)$/;"	f
ACMD	act.informative.c	/^ACMD(do_timers)$/;"	f
ACMD	act.informative.c	/^ACMD(do_toggle)$/;"	f
ACMD	act.informative.c	/^ACMD(do_users)$/;"	f
ACMD	act.informative.c	/^ACMD(do_vote)$/;"	f
ACMD	act.informative.c	/^ACMD(do_weather)$/;"	f
ACMD	act.informative.c	/^ACMD(do_where)$/;"	f
ACMD	act.informative.c	/^ACMD(do_who)$/;"	f
ACMD	act.informative.c	/^ACMD(do_worship)$/;"	f
ACMD	act.item.c	/^ACMD(do_drink)$/;"	f
ACMD	act.item.c	/^ACMD(do_drop)$/;"	f
ACMD	act.item.c	/^ACMD(do_eat)$/;"	f
ACMD	act.item.c	/^ACMD(do_get)$/;"	f
ACMD	act.item.c	/^ACMD(do_give)$/;"	f
ACMD	act.item.c	/^ACMD(do_grab)$/;"	f
ACMD	act.item.c	/^ACMD(do_pour)$/;"	f
ACMD	act.item.c	/^ACMD(do_put)$/;"	f
ACMD	act.item.c	/^ACMD(do_remove)$/;"	f
ACMD	act.item.c	/^ACMD(do_repair)$/;"	f
ACMD	act.item.c	/^ACMD(do_wear)$/;"	f
ACMD	act.item.c	/^ACMD(do_wield)$/;"	f
ACMD	act.movement.c	/^ACMD(do_breakin) $/;"	f
ACMD	act.movement.c	/^ACMD(do_dismount)$/;"	f
ACMD	act.movement.c	/^ACMD(do_enter)$/;"	f
ACMD	act.movement.c	/^ACMD(do_escape)$/;"	f
ACMD	act.movement.c	/^ACMD(do_follow)$/;"	f
ACMD	act.movement.c	/^ACMD(do_gen_door)$/;"	f
ACMD	act.movement.c	/^ACMD(do_go)$/;"	f
ACMD	act.movement.c	/^ACMD(do_leave)$/;"	f
ACMD	act.movement.c	/^ACMD(do_mount) $/;"	f
ACMD	act.movement.c	/^ACMD(do_move)$/;"	f
ACMD	act.movement.c	/^ACMD(do_recall)$/;"	f
ACMD	act.movement.c	/^ACMD(do_rest)$/;"	f
ACMD	act.movement.c	/^ACMD(do_sit)$/;"	f
ACMD	act.movement.c	/^ACMD(do_sleep)$/;"	f
ACMD	act.movement.c	/^ACMD(do_stand)$/;"	f
ACMD	act.movement.c	/^ACMD(do_wake)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_ambush)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_assist)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_burgle)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_disarm)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_flee)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_loadweapon)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_order)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_rescue)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_retreat)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_scan)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_shoot)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_slay)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_throw)$/;"	f
ACMD	act.offensive.c	/^ACMD(do_trap)$/;"	f
ACMD	act.other.c	/^ACMD(do_adrenaline)$/;"	f
ACMD	act.other.c	/^ACMD(do_attend_wounds)$/;"	f
ACMD	act.other.c	/^ACMD(do_autoassist)$/;"	f
ACMD	act.other.c	/^ACMD(do_bite)$/;"	f
ACMD	act.other.c	/^ACMD(do_change)$/;"	f
ACMD	act.other.c	/^ACMD(do_charge)$/;"	f
ACMD	act.other.c	/^ACMD(do_clot_wounds)$/;"	f
ACMD	act.other.c	/^ACMD(do_combine)$/;"	f
ACMD	act.other.c	/^ACMD(do_compare)$/;"	f
ACMD	act.other.c	/^ACMD(do_compost)$/;"	f
ACMD	act.other.c	/^ACMD(do_corpse) $/;"	f
ACMD	act.other.c	/^ACMD(do_disguise) $/;"	f
ACMD	act.other.c	/^ACMD(do_display)$/;"	f
ACMD	act.other.c	/^ACMD(do_first_aid)$/;"	f
ACMD	act.other.c	/^ACMD(do_friend)$/;"	f
ACMD	act.other.c	/^ACMD(do_gen_tog)$/;"	f
ACMD	act.other.c	/^ACMD(do_group)$/;"	f
ACMD	act.other.c	/^ACMD(do_hide)$/;"	f
ACMD	act.other.c	/^ACMD(do_ignore)$/;"	f
ACMD	act.other.c	/^ACMD(do_join)$/;"	f
ACMD	act.other.c	/^ACMD(do_meditate)$/;"	f
ACMD	act.other.c	/^ACMD(do_memorise) $/;"	f
ACMD	act.other.c	/^ACMD(do_modifiers) $/;"	f
ACMD	act.other.c	/^ACMD(do_mortal_kombat)$/;"	f
ACMD	act.other.c	/^ACMD(do_not_here)$/;"	f
ACMD	act.other.c	/^ACMD(do_pagelength)$/;"	f
ACMD	act.other.c	/^ACMD(do_pagewidth)$/;"	f
ACMD	act.other.c	/^ACMD(do_poisonblade)$/;"	f
ACMD	act.other.c	/^ACMD(do_practice)$/;"	f
ACMD	act.other.c	/^ACMD(do_purse)$/;"	f
ACMD	act.other.c	/^ACMD(do_quit)$/;"	f
ACMD	act.other.c	/^ACMD(do_realtime)$/;"	f
ACMD	act.other.c	/^ACMD(do_remort) $/;"	f
ACMD	act.other.c	/^ACMD(do_report)$/;"	f
ACMD	act.other.c	/^ACMD(do_ritual)$/;"	f
ACMD	act.other.c	/^ACMD(do_save)$/;"	f
ACMD	act.other.c	/^ACMD(do_sneak)$/;"	f
ACMD	act.other.c	/^ACMD(do_split)$/;"	f
ACMD	act.other.c	/^ACMD(do_spy)$/;"	f
ACMD	act.other.c	/^ACMD(do_steal)$/;"	f
ACMD	act.other.c	/^ACMD(do_suicide)$/;"	f
ACMD	act.other.c	/^ACMD(do_tag)$/;"	f
ACMD	act.other.c	/^ACMD(do_title)$/;"	f
ACMD	act.other.c	/^ACMD(do_torch)$/;"	f
ACMD	act.other.c	/^ACMD(do_ungroup)$/;"	f
ACMD	act.other.c	/^ACMD(do_use)$/;"	f
ACMD	act.other.c	/^ACMD(do_visible)$/;"	f
ACMD	act.other.c	/^ACMD(do_wimpy)$/;"	f
ACMD	act.social.c	/^ACMD(do_action)$/;"	f
ACMD	act.social.c	/^ACMD(do_insult)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_advance)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_at)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_balance)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_cream)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_date)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_dc)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_debug_cmd)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_deimmort)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_echo)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_event)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_force)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_gecho)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_global_set)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_goto)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_immort)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_invis)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_last)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_laston)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_load)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_pinch)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_pkset)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_poofset)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_purge)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_restore)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_return)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_send)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_set)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_show)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_shutdown)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_skillshow)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_snoop)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_spellinfo)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_stat)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_switch)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_syslog)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_teleport)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_tic)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_trans)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_vnum)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_vstat)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_whostr)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_wizlock)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_wiznet)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_wizutil)$/;"	f
ACMD	act.wizard.c	/^ACMD(do_zreset)$/;"	f
ACMD	ban.c	/^ACMD(do_ban)$/;"	f
ACMD	ban.c	/^ACMD(do_unban)$/;"	f
ACMD	casino.c	/^ACMD(do_blackjack) $/;"	f
ACMD	casino.c	/^ACMD(do_race)$/;"	f
ACMD	casino.c	/^ACMD(do_slots) $/;"	f
ACMD	clan.c	/^ACMD (do_cltalk) $/;"	f
ACMD	clan.c	/^ACMD (do_ctalk)$/;"	f
ACMD	clan.c	/^ACMD (do_punish)$/;"	f
ACMD	clan.c	/^ACMD (do_sentence)$/;"	f
ACMD	clan.c	/^ACMD(do_clan)$/;"	f
ACMD	clan.c	/^ACMD(do_pkill)$/;"	f
ACMD	db.c	/^ACMD(do_reboot)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_masound)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mat)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mdamage) $/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mdoor)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mecho)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mechoaround)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mexp)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mforce)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mforget)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mgold)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mgoto)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mhunt)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mjunk)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mkill) $/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mload)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mpurge)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mremember)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mrestore)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_msend)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mteleport)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mtransform)$/;"	f
ACMD	dg_mobcmd.c	/^ACMD(do_mzoneecho)$/;"	f
ACMD	dg_scripts.c	/^ACMD(do_attach) $/;"	f
ACMD	dg_scripts.c	/^ACMD(do_detach)$/;"	f
ACMD	dg_scripts.c	/^ACMD(do_tlist)$/;"	f
ACMD	dg_scripts.c	/^ACMD(do_tstat)$/;"	f
ACMD	dg_scripts.c	/^ACMD(do_vdelete)$/;"	f
ACMD	genolc.c	/^ACMD(do_edit)$/;"	f
ACMD	graph.c	/^ACMD(do_track)$/;"	f
ACMD	house.c	/^ACMD(do_hcontrol)$/;"	f
ACMD	house.c	/^ACMD(do_house)$/;"	f
ACMD	interpreter.c	/^ACMD(do_alias)$/;"	f
ACMD	interpreter.c	/^ACMD(do_cheat)$/;"	f
ACMD	interpreter.c	/^ACMD(do_stats)$/;"	f
ACMD	interpreter.h	11;"	d
ACMD	modify.c	/^ACMD(do_skillset)$/;"	f
ACMD	oasis.c	/^ACMD(do_oasis)$/;"	f
ACMD	oasis.c	/^ACMD(do_oasislist)$/;"	f
ACMD	olc.c	/^ACMD(do_olc)$/;"	f
ACMD	quest.c	/^ACMD(do_qcomm)$/;"	f
ACMD	quest.c	/^ACMD(do_quest)$/;"	f
ACMD	quest.c	/^ACMD(do_quest_log)$/;"	f
ACMD	quest.c	/^ACMD(do_questoff)$/;"	f
ACMD	quest.c	/^ACMD(do_queston)$/;"	f
ACMD	reports.cpp	/^ACMD(do_reporting)$/;"	f
ACMD	spell_parser.c	/^ACMD(do_cast)$/;"	f
ACMD	spell_parser.c	/^ACMD(do_violent_skill) $/;"	f
ACMD	tedit.c	/^ACMD(do_tedit)$/;"	f
ACMD_EXAMINE	boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_LOOK	boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_READ	boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_REMOVE	boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_WRITE	boards.c	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACTNULL	comm.c	/^const char *ACTNULL = "<NULL>";$/;"	v
ACT_PROG	oasis.h	61;"	d
ADD_UID_VAR	dg_scripts.h	245;"	d
AFFECT_TYPE	dg_misc.c	170;"	d	file:
AFF_ADRENALINE	structs.h	530;"	d
AFF_ADVANCED_INVIS	structs.h	526;"	d
AFF_BERSERK	structs.h	532;"	d
AFF_BLIND	structs.h	502;"	d
AFF_BROKEN_IN	structs.h	529;"	d
AFF_CHARM	structs.h	523;"	d
AFF_CURSE	structs.h	511;"	d
AFF_DETECT_ADVANCED	structs.h	527;"	d
AFF_DETECT_ALIGN	structs.h	504;"	d
AFF_DETECT_INVIS	structs.h	505;"	d
AFF_DETECT_MAGIC	structs.h	506;"	d
AFF_FLAGGED	utils.h	296;"	d
AFF_FLAGS	utils.h	271;"	d
AFF_FLY	structs.h	519;"	d
AFF_GROUP	structs.h	510;"	d
AFF_HASTE	structs.h	525;"	d
AFF_HIDE	structs.h	521;"	d
AFF_INFRAVISION	structs.h	512;"	d
AFF_INVISIBLE	structs.h	503;"	d
AFF_NODISARM	structs.h	531;"	d
AFF_NOHASSLE	structs.h	528;"	d
AFF_NOTRACK	structs.h	517;"	d
AFF_PARALYZED	structs.h	522;"	d
AFF_POISON	structs.h	513;"	d
AFF_PROTECT_EVIL	structs.h	514;"	d
AFF_PROTECT_GOOD	structs.h	515;"	d
AFF_REFLECT	structs.h	518;"	d
AFF_SANCTUARY	structs.h	509;"	d
AFF_SENSE_LIFE	structs.h	507;"	d
AFF_SENSE_WOUNDS	structs.h	533;"	d
AFF_SLEEP	structs.h	516;"	d
AFF_SNEAK	structs.h	520;"	d
AFF_WATERBREATHE	structs.h	524;"	d
AFF_WATERWALK	structs.h	508;"	d
AGGRA_AGGRESSIVE	structs.h	673;"	d
AGGRA_AGGR_EVIL	structs.h	674;"	d
AGGRA_AGGR_GOOD	structs.h	675;"	d
AGGRA_HELPER	structs.h	671;"	d
AGGRA_PUNISH	structs.h	672;"	d
ALIAS_COMPLEX	interpreter.h	75;"	d
ALIAS_FILE	utils.h	161;"	d
ALIAS_GLOB_CHAR	interpreter.h	79;"	d
ALIAS_SEP_CHAR	interpreter.h	77;"	d
ALIAS_SIMPLE	interpreter.h	74;"	d
ALIAS_VAR_CHAR	interpreter.h	78;"	d
ALL_GREET_PROG	oasis.h	69;"	d
AMMO_BELONGS_TO	utils.h	874;"	d
AMMO_BIT	utils.h	865;"	d
AMMO_BITS	utils.h	866;"	d
AN	utils.h	198;"	d
ANA	utils.h	679;"	d
AO	telnet.h	52;"	d
APPLY_AC	structs.h	759;"	d
APPLY_AGE	structs.h	751;"	d
APPLY_CHA	structs.h	748;"	d
APPLY_CHAR_HEIGHT	structs.h	753;"	d
APPLY_CHAR_WEIGHT	structs.h	752;"	d
APPLY_CLASS	structs.h	749;"	d
APPLY_CON	structs.h	747;"	d
APPLY_DAMROLL	structs.h	761;"	d
APPLY_DEX	structs.h	744;"	d
APPLY_EXP	structs.h	758;"	d
APPLY_GOLD	structs.h	757;"	d
APPLY_HIT	structs.h	755;"	d
APPLY_HITROLL	structs.h	760;"	d
APPLY_INT	structs.h	745;"	d
APPLY_LEVEL	structs.h	750;"	d
APPLY_MANA	structs.h	754;"	d
APPLY_MOVE	structs.h	756;"	d
APPLY_NONE	structs.h	742;"	d
APPLY_SAVING_BREATH	structs.h	765;"	d
APPLY_SAVING_PARA	structs.h	762;"	d
APPLY_SAVING_PETRI	structs.h	764;"	d
APPLY_SAVING_ROD	structs.h	763;"	d
APPLY_SAVING_SPELL	structs.h	766;"	d
APPLY_SKILL	utils.h	542;"	d
APPLY_SPELL_EFFEC	utils.h	313;"	d
APPLY_STR	structs.h	743;"	d
APPLY_TYPE	dg_misc.c	169;"	d	file:
APPLY_WIS	structs.h	746;"	d
AREAS_FILE	db.h	97;"	d
ASPELL	spells.c	/^ASPELL(spell_charm)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_control_weather)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_create_water)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_detect_poison)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_enchant_weapon)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_fear)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_fingerdeath)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_gate)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_identify)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_locate_object)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_recall)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_summon)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_teleport)$/;"	f
ASPELL	spells.c	/^ASPELL(spell_unholy_vengeance)$/;"	f
ASPELL	spells.h	346;"	d
ASSIGNMOB	spec_assign.c	/^void ASSIGNMOB(mob_vnum mob, SPECIAL(fname))$/;"	f
ASSIGNOBJ	spec_assign.c	/^void ASSIGNOBJ(obj_vnum obj, SPECIAL(fname))$/;"	f
ASSIGNROOM	spec_assign.c	/^void ASSIGNROOM(room_vnum room, SPECIAL(fname))$/;"	f
ATMOSPHERE	utils.h	880;"	d
AUC_BID	interpreter.h	285;"	d
AUC_CANCEL	interpreter.h	286;"	d
AUC_FILE	db.h	107;"	d
AUC_LIMIT	structs.h	929;"	d
AUC_LIST	interpreter.h	287;"	d
AUC_NONE	interpreter.h	284;"	d
AUC_PURGE	interpreter.h	291;"	d
AUC_ROOM	structs.h	928;"	d
AUC_SELL	interpreter.h	288;"	d
AUC_SOLD	interpreter.h	289;"	d
AUC_STAT	interpreter.h	290;"	d
AUC_STAT_COST	structs.h	927;"	d
AUTHTYPE_CNT	telnet.h	265;"	d
AUTHTYPE_KERBEROS_V4	telnet.h	261;"	d
AUTHTYPE_KERBEROS_V5	telnet.h	262;"	d
AUTHTYPE_MINK	telnet.h	264;"	d
AUTHTYPE_NAME	telnet.h	278;"	d
AUTHTYPE_NAME_OK	telnet.h	277;"	d
AUTHTYPE_NULL	telnet.h	260;"	d
AUTHTYPE_SPX	telnet.h	263;"	d
AUTHTYPE_TEST	telnet.h	267;"	d
AUTH_HOW_MASK	telnet.h	258;"	d
AUTH_HOW_MUTUAL	telnet.h	257;"	d
AUTH_HOW_ONE_WAY	telnet.h	256;"	d
AUTH_WHO_CLIENT	telnet.h	249;"	d
AUTH_WHO_MASK	telnet.h	251;"	d
AUTH_WHO_SERVER	telnet.h	250;"	d
AUTOASSIST	utils.h	482;"	d
AUTOASSISTED	utils.h	483;"	d
AWAKE	utils.h	600;"	d
AYT	telnet.h	51;"	d
AllSing	spec_procs.c	/^void AllSing(char *line, struct char_data *ch) {$/;"	f
BACKGROUND_FILE	db.h	94;"	d
BAG_VNUM	quest.c	434;"	d	file:
BALANCE_MOB_INVALID	balance.h	42;"	d
BALANCE_MOB_MAX_AC	balance.h	51;"	d
BALANCE_MOB_MAX_DAMAGE	balance.h	45;"	d
BALANCE_MOB_MAX_DAMROLL	balance.h	49;"	d
BALANCE_MOB_MAX_EXP	balance.h	53;"	d
BALANCE_MOB_MAX_GOLD	balance.h	55;"	d
BALANCE_MOB_MAX_HITROLL	balance.h	47;"	d
BALANCE_MOB_MAX_HPS	balance.h	43;"	d
BALANCE_MOB_MIN_AC	balance.h	52;"	d
BALANCE_MOB_MIN_DAMAGE	balance.h	46;"	d
BALANCE_MOB_MIN_DAMROLL	balance.h	50;"	d
BALANCE_MOB_MIN_EXP	balance.h	54;"	d
BALANCE_MOB_MIN_GOLD	balance.h	56;"	d
BALANCE_MOB_MIN_HITROLL	balance.h	48;"	d
BALANCE_MOB_MIN_HPS	balance.h	44;"	d
BALANCE_OBJ_AC	balance.h	35;"	d
BALANCE_OBJ_CHA	balance.h	28;"	d
BALANCE_OBJ_CON	balance.h	27;"	d
BALANCE_OBJ_COST	balance.h	34;"	d
BALANCE_OBJ_DAMAGE	balance.h	36;"	d
BALANCE_OBJ_DAMROLL	balance.h	30;"	d
BALANCE_OBJ_DEX	balance.h	26;"	d
BALANCE_OBJ_HIT	balance.h	20;"	d
BALANCE_OBJ_HITROLL	balance.h	29;"	d
BALANCE_OBJ_INT	balance.h	24;"	d
BALANCE_OBJ_INVALID	balance.h	19;"	d
BALANCE_OBJ_MANA	balance.h	21;"	d
BALANCE_OBJ_MOVE	balance.h	22;"	d
BALANCE_OBJ_STR	balance.h	23;"	d
BALANCE_OBJ_TODAM	balance.h	32;"	d
BALANCE_OBJ_TOHIT	balance.h	31;"	d
BALANCE_OBJ_WEIGHT	balance.h	33;"	d
BALANCE_OBJ_WIS	balance.h	25;"	d
BANNED_SITE_LENGTH	db.h	272;"	d
BAN_ALL	db.h	270;"	d
BAN_FILE	db.h	112;"	d
BAN_NEW	db.h	268;"	d
BAN_NOT	db.h	267;"	d
BAN_SELECT	db.h	269;"	d
BASE_GUN_TYPE	utils.h	861;"	d
BASE_PROTECT_GEAR	structs.h	621;"	d
BASE_SECT	utils.h	878;"	d
BATTERY_MANA	structs.h	680;"	d
BBLK	colour.h	12;"	d
BBLU	colour.h	16;"	d
BCYN	colour.h	18;"	d
BFS_ALREADY_THERE	utils.h	166;"	d
BFS_ERROR	utils.h	165;"	d
BFS_NO_PATH	utils.h	167;"	d
BGRN	colour.h	14;"	d
BINARY	act.wizard.c	3938;"	d	file:
BJ_HAS_SPLIT	casino.h	9;"	d
BJ_INSURANCE	casino.h	10;"	d
BJ_NO_CODES	casino.h	8;"	d
BKBLK	colour.h	21;"	d
BKBLU	colour.h	25;"	d
BKCYN	colour.h	27;"	d
BKGRN	colour.h	23;"	d
BKMAG	colour.h	26;"	d
BKRED	colour.h	22;"	d
BKWHT	colour.h	28;"	d
BKYEL	colour.h	24;"	d
BLADES_VNUM	spec_procs.c	5376;"	d	file:
BLOCK_SIZE	mail.h	29;"	d
BLUEGEM	db.h	21;"	d
BMAG	colour.h	17;"	d
BOARD_MAGIC	boards.h	17;"	d
BOARD_RNUM	boards.h	41;"	d
BOARD_VNUM	boards.h	36;"	d
BOTH	act.wizard.c	3935;"	d	file:
BOUNTY_RETURN_ROOM	act.informative.c	32;"	d	file:
BREAK	telnet.h	54;"	d
BRED	colour.h	13;"	d
BRF	utils.h	153;"	d
BRIBE_PROG	oasis.h	71;"	d
BUG_FILE	db.h	102;"	d
BURGLE_FLAGGED	utils.h	304;"	d
BURGLE_FLAGS	utils.h	275;"	d
BURGLE_HOME_BOSS	act.informative.c	258;"	d	file:
BURGLE_HOME_SUB	act.informative.c	259;"	d	file:
BURGLE_HOME_UNDERLING	act.informative.c	260;"	d	file:
BURGLE_LOOT	act.informative.c	359;"	d	file:
BURGLE_ROOMS_END	act.offensive.c	2418;"	d	file:
BURGLE_ROOMS_START	act.offensive.c	2417;"	d	file:
BURGLE_SHOP_BOSS	act.informative.c	262;"	d	file:
BURGLE_SHOP_SUB	act.informative.c	263;"	d	file:
BURGLE_SHOP_UNDERLING	act.informative.c	264;"	d	file:
BURGLE_UNIQUE	act.informative.c	360;"	d	file:
BURGLE_WAREHOUSE_BOSS	act.informative.c	254;"	d	file:
BURGLE_WAREHOUSE_SUB	act.informative.c	255;"	d	file:
BURGLE_WAREHOUSE_UNDERLING	act.informative.c	256;"	d	file:
BUY_TYPE	shop.h	17;"	d
BUY_WORD	shop.h	18;"	d
BWHT	colour.h	19;"	d
BYEL	colour.h	15;"	d
Board_display_msg	boards.c	/^int Board_display_msg(int board_type, struct char_data * ch, char *arg, struct obj_data *board)$/;"	f
Board_load_board	boards.c	/^void Board_load_board(int board_type)$/;"	f
Board_remove_msg	boards.c	/^int Board_remove_msg(int board_type, struct char_data * ch, char *arg, struct obj_data *board)$/;"	f
Board_reset_board	boards.c	/^void Board_reset_board(int board_type)$/;"	f
Board_save_board	boards.c	/^void Board_save_board(int board_type)$/;"	f
Board_show_board	boards.c	/^int Board_show_board(int board_type, struct char_data * ch, char *arg, struct obj_data *board)$/;"	f
Board_write_message	boards.c	/^int Board_write_message(int board_type, struct char_data * ch, char *arg, struct obj_data *board)$/;"	f
Burglary	structs.h	/^	Burglary(long id) { chID = id; next = NULL; }$/;"	f	class:Burglary
Burglary	structs.h	/^class Burglary {$/;"	c
BurgledRoom	structs.h	/^	BurgledRoom() { rNum = -1; }$/;"	f	class:BurgledRoom
BurgledRoom	structs.h	/^class BurgledRoom {$/;"	c
CAMP	colour.h	30;"	d
CAN_CARRY_N	utils.h	599;"	d
CAN_CARRY_OBJ	utils.h	736;"	d
CAN_CARRY_W	utils.h	598;"	d
CAN_FORCE	act.wizard.c	3159;"	d	file:
CAN_FORCE_NPC	act.wizard.c	3155;"	d	file:
CAN_FORCE_PC	act.wizard.c	3153;"	d	file:
CAN_GET_OBJ	utils.h	740;"	d
CAN_GO	utils.h	763;"	d
CAN_LEVEL	utils.h	406;"	d
CAN_SEE	utils.h	713;"	d
CAN_SEE_IN_DARK	utils.h	601;"	d
CAN_SEE_OBJ	utils.h	733;"	d
CAN_SEE_OBJ_CARRIER	utils.h	726;"	d
CAN_WEAR	utils.h	660;"	d
CAN_WEAR_POS	utils.h	662;"	d
CAP	utils.c	/^char *CAP(char *txt)$/;"	f
CARD_ACE	casino.h	14;"	d
CARD_CONV_ACE	casino.h	13;"	d
CARD_EIGHT	casino.h	20;"	d
CARD_FIVE	casino.h	23;"	d
CARD_FOUR	casino.h	24;"	d
CARD_JACK	casino.h	17;"	d
CARD_KING	casino.h	15;"	d
CARD_NINE	casino.h	19;"	d
CARD_NONE	casino.h	27;"	d
CARD_QUEEN	casino.h	16;"	d
CARD_SEVEN	casino.h	21;"	d
CARD_SIX	casino.h	22;"	d
CARD_TEN	casino.h	18;"	d
CARD_THREE	casino.h	25;"	d
CARD_TWO	casino.h	26;"	d
CASE	db.c	1507;"	d	file:
CASE	db.c	1562;"	d	file:
CASTLE_ITEM	castle.c	77;"	d	file:
CAST_MAGIC_OBJ	spells.h	24;"	d
CAST_POTION	spells.h	20;"	d
CAST_SCROLL	spells.h	23;"	d
CAST_SPELL	spells.h	19;"	d
CAST_STAFF	spells.h	22;"	d
CAST_UNDEFINED	spells.h	18;"	d
CAST_WAND	spells.h	21;"	d
CBLK	colour.h	2;"	d
CBLU	colour.h	6;"	d
CB_BALANCE	clan.h	62;"	d
CB_DEPOSIT	clan.h	61;"	d
CB_WITHDRAW	clan.h	63;"	d
CCACT	act.informative.c	2592;"	d	file:
CCBBLU	screen.h	60;"	d
CCBCYN	screen.h	62;"	d
CCBGRN	screen.h	58;"	d
CCBGRY	screen.h	56;"	d
CCBLU	screen.h	43;"	d
CCBMAG	screen.h	61;"	d
CCBRED	screen.h	57;"	d
CCBWHT	screen.h	63;"	d
CCBYEL	screen.h	59;"	d
CCCYN	screen.h	45;"	d
CCDH	act.informative.c	2591;"	d	file:
CCEXP	screen.h	75;"	d
CCGAIN	act.informative.c	2593;"	d	file:
CCGOLD	screen.h	76;"	d
CCGRN	screen.h	41;"	d
CCHEAD	act.informative.c	2584;"	d	file:
CCMAG	screen.h	44;"	d
CCNAME	act.informative.c	2588;"	d	file:
CCNRM	screen.h	39;"	d
CCNUMB	act.informative.c	2586;"	d	file:
CCRED	screen.h	40;"	d
CCSEP	act.informative.c	2589;"	d	file:
CCSTAR	act.informative.c	2583;"	d	file:
CCSTAT	act.informative.c	2590;"	d	file:
CCSUB	act.informative.c	2585;"	d	file:
CCTEXT	act.informative.c	2587;"	d	file:
CCWHT	screen.h	46;"	d
CCYEL	screen.h	42;"	d
CCYN	colour.h	8;"	d
CFSH	colour.h	34;"	d
CGRN	colour.h	4;"	d
CHARFIGHTING	config.c	/^const char *CHARFIGHTING="No way.  You're fighting for your life!\\r\\n";$/;"	v
CHAR_DISGUISED	utils.h	269;"	d
CHAR_MEMORISED	utils.h	268;"	d
CHAR_TIMERS	utils.h	258;"	d
CHECK_NULL	act.build.c	135;"	d	file:
CHECK_NULL	comm.c	2703;"	d	file:
CHECK_PLAYER_SPECIAL	utils.h	252;"	d
CHECK_PLAYER_SPECIAL	utils.h	255;"	d
CHECK_WAIT	utils.h	610;"	d
CIRCLEMUD_VERSION	utils.h	672;"	d
CIRCLE_CRYPT	conf.h	29;"	d
CIRCLE_UNIX	conf.h	26;"	d
CLAN_ALLIED	clan.h	109;"	d
CLAN_AT_PEACE	clan.h	108;"	d
CLAN_AT_WAR	clan.h	107;"	d
CLAN_BRIBING	clan.h	18;"	d
CLAN_DESC_LENGTH	clan.h	36;"	d
CLAN_FILE	db.h	106;"	d
CLAN_HASOPT	clan.h	100;"	d
CLAN_LOGLEVEL	clan.h	20;"	d
CLAN_LVL_TALK	clan.h	17;"	d
CLAN_MAX_APP	clan.h	90;"	d
CLAN_MAX_TAX	clan.h	88;"	d
CLAN_MIN_APP	clan.h	89;"	d
CLAN_MIN_BRIB	clan.h	86;"	d
CLAN_MIN_TAX	clan.h	87;"	d
CLAN_NO_IMM	clan.h	25;"	d
CLAN_REL_ALLIANCE	clan.h	167;"	d
CLAN_REL_ANGER	clan.h	161;"	d
CLAN_REL_BLOOD_WAR	clan.h	159;"	d
CLAN_REL_FRIENDLY	clan.h	164;"	d
CLAN_REL_MAX	clan.h	168;"	d
CLAN_REL_MIN	clan.h	158;"	d
CLAN_REL_NEUTRAL	clan.h	163;"	d
CLAN_REL_PEACEFUL	clan.h	166;"	d
CLAN_REL_TRADE	clan.h	165;"	d
CLAN_REL_UPSET	clan.h	162;"	d
CLAN_REL_WAR	clan.h	160;"	d
CLAN_ROOM_MAX	clan.h	12;"	d
CLAN_ZONE	structs.h	85;"	d
CLASS_ABBR	utils.h	768;"	d
CLASS_ABILITY	structs.h	319;"	d
CLASS_ANIMAL	structs.h	299;"	d
CLASS_AQUATIC	structs.h	302;"	d
CLASS_BATTLEMAGE	structs.h	283;"	d
CLASS_CLERIC	structs.h	277;"	d
CLASS_DEMIHUMAN	structs.h	303;"	d
CLASS_DRAGON	structs.h	300;"	d
CLASS_DRUID	structs.h	280;"	d
CLASS_GIANT	structs.h	301;"	d
CLASS_HUMANOID	structs.h	298;"	d
CLASS_ITEM	structs.h	320;"	d
CLASS_MAGIC_USER	structs.h	276;"	d
CLASS_MASTER	structs.h	287;"	d
CLASS_NAME	utils.h	769;"	d
CLASS_NIGHTBLADE	structs.h	282;"	d
CLASS_OTHER	structs.h	296;"	d
CLASS_PALADIN	structs.h	285;"	d
CLASS_PRIEST	structs.h	281;"	d
CLASS_SPELLSWORD	structs.h	284;"	d
CLASS_THIEF	structs.h	278;"	d
CLASS_UNDEAD	structs.h	297;"	d
CLASS_UNDEFINED	structs.h	275;"	d
CLASS_WARRIOR	structs.h	279;"	d
CLC_ADDRANK	clan.h	69;"	d
CLC_BUILD	clan.h	70;"	d
CLC_CHGAPPLEV	clan.h	71;"	d
CLC_CHGFEE	clan.h	72;"	d
CLC_EGUARD	clan.h	73;"	d
CLC_EHEAL	clan.h	74;"	d
CLC_ENBOARD	clan.h	75;"	d
CLC_ENHALL	clan.h	76;"	d
CLC_ENHEAL	clan.h	77;"	d
CLC_ENTALK	clan.h	78;"	d
CLC_MOBDESC	clan.h	79;"	d
CLC_PROMOTE	clan.h	80;"	d
CLC_RANKTITLE	clan.h	81;"	d
CLC_REGENROOM	clan.h	82;"	d
CLC_ROOMTD	clan.h	83;"	d
CLC_SETDESC	clan.h	84;"	d
CLEANUP_ALL	oasis.h	169;"	d
CLEANUP_STRUCTS	oasis.h	170;"	d
CLOSE_SOCKET	sysdep.h	324;"	d
CLOSE_SOCKET	sysdep.h	327;"	d
CMAG	colour.h	7;"	d
CMARK_CODE	colour.h	42;"	d
CMARK_PLACE	colour.h	43;"	d
CMD_COMBAT	interpreter.h	97;"	d
CMD_COMM	interpreter.h	96;"	d
CMD_INFO	interpreter.h	98;"	d
CMD_IS	interpreter.h	17;"	d
CMD_MAIL	interpreter.h	105;"	d
CMD_MISC	interpreter.h	104;"	d
CMD_MOVE	interpreter.h	99;"	d
CMD_NAME	interpreter.h	16;"	d
CMD_NONE	interpreter.h	92;"	d
CMD_OBJ	interpreter.h	100;"	d
CMD_SHOP	interpreter.h	103;"	d
CMD_SKILL	interpreter.h	94;"	d
CMD_SOCIAL	interpreter.h	101;"	d
CMD_SPEC	interpreter.h	106;"	d
CMD_UTIL	interpreter.h	102;"	d
CMD_WIZ	interpreter.h	93;"	d
CMP	utils.h	155;"	d
CM_APPFEE	clan.h	59;"	d
CM_DUES	clan.h	58;"	d
CNRM	colour.h	1;"	d
CNUL	colour.h	10;"	d
COF_FLAGS	clan.h	99;"	d
COLOR_LEV	screen.h	78;"	d
COLOURLIST	colour.c	/^const char *COLOURLIST[] = {CNRM, CRED, CGRN, CYEL, CBLU, CMAG, CCYN, CWHT,$/;"	v
CONFIG_GENOLC_MOBPROG	genolc.h	21;"	d
CONFIG_IMPROVED_EDITOR	improved-edit.h	6;"	d
CONFIG_MPROG	structs.h	36;"	d
CONFIG_OASIS_MPROG	oasis.h	21;"	d
CONT_CLOSEABLE	structs.h	771;"	d
CONT_CLOSED	structs.h	773;"	d
CONT_LOCKED	structs.h	774;"	d
CONT_PICKPROOF	structs.h	772;"	d
CON_CHPWD_GETNEW	structs.h	561;"	d
CON_CHPWD_GETOLD	structs.h	560;"	d
CON_CHPWD_VRFY	structs.h	562;"	d
CON_CLOSE	structs.h	549;"	d
CON_CNFPASSWD	structs.h	554;"	d
CON_DELCNF1	structs.h	563;"	d
CON_DELCNF2	structs.h	564;"	d
CON_DISCONNECT	structs.h	565;"	d
CON_EXDESC	structs.h	559;"	d
CON_GET_NAME	structs.h	550;"	d
CON_MEDIT	structs.h	569;"	d
CON_MENU	structs.h	558;"	d
CON_NAME_CNFRM	structs.h	551;"	d
CON_NEWPASSWD	structs.h	553;"	d
CON_OEDIT	structs.h	566;"	d
CON_PASSWORD	structs.h	552;"	d
CON_PLAYING	structs.h	548;"	d
CON_QCHAR	structs.h	579;"	d
CON_QCLASS	structs.h	556;"	d
CON_QCLASS_HELP	structs.h	580;"	d
CON_QCLASS_PAUSE	structs.h	581;"	d
CON_QCOLOUR	structs.h	574;"	d
CON_QPAUSE	structs.h	578;"	d
CON_QRACE	structs.h	572;"	d
CON_QRACE_HELP	structs.h	582;"	d
CON_QRACE_PAUSE	structs.h	583;"	d
CON_QSEX	structs.h	555;"	d
CON_QSTATCHECK	structs.h	573;"	d
CON_REDIT	structs.h	567;"	d
CON_REPORT_ADD	structs.h	575;"	d
CON_REPORT_EDIT	structs.h	576;"	d
CON_RMOTD	structs.h	557;"	d
CON_SEDIT	structs.h	570;"	d
CON_TEDIT	structs.h	571;"	d
CON_TRIGEDIT	structs.h	577;"	d
CON_ZEDIT	structs.h	568;"	d
CORPSE_FILENAME	corpses.h	9;"	d
CO_BOARD	clan.h	96;"	d
CO_HALL	clan.h	93;"	d
CO_HEALER	clan.h	94;"	d
CO_TALK	clan.h	95;"	d
CPASS_ALL	act.informative.c	5268;"	d	file:
CPASS_NONE	act.informative.c	5267;"	d	file:
CPASS_SUBCMD	act.informative.c	5269;"	d	file:
CPASS_VICT	act.informative.c	5270;"	d	file:
CPC_IMM	clan.h	55;"	d
CPC_NOCLAN	clan.h	53;"	d
CPC_NOPRIV	clan.h	54;"	d
CPC_PRIV	clan.h	56;"	d
CPREV_CODE	colour.h	41;"	d
CP_BANISH	clan.h	43;"	d
CP_DEMOTE	clan.h	42;"	d
CP_ENABLE	clan.h	50;"	d
CP_ENHANCE	clan.h	47;"	d
CP_LEADER	clan.h	38;"	d
CP_NONE	clan.h	39;"	d
CP_PROMOTE	clan.h	41;"	d
CP_RECRUIT	clan.h	40;"	d
CP_ROOM	clan.h	48;"	d
CP_SET_APPLEV	clan.h	45;"	d
CP_SET_DESC	clan.h	49;"	d
CP_SET_FEES	clan.h	46;"	d
CP_WITHDRAW	clan.h	44;"	d
CRASH_FILE	utils.h	159;"	d
CREATE	utils.h	204;"	d
CRED	colour.h	3;"	d
CREDITS_FILE	db.h	85;"	d
CRVS	colour.h	37;"	d
CRYO_FACTOR	objsave.c	29;"	d	file:
CRYPT	utils.h	855;"	d
CRYPT	utils.h	857;"	d
CSLH	colour.h	31;"	d
CUDL	colour.h	33;"	d
CWHT	colour.h	9;"	d
CYEL	colour.h	5;"	d
C_CMP	screen.h	34;"	d
C_MOB_SPEC	castle.c	66;"	d	file:
C_NRM	screen.h	33;"	d
C_OFF	screen.h	31;"	d
C_SPR	screen.h	32;"	d
CastleGuard	castle.c	/^SPECIAL(CastleGuard);$/;"	v
Clear	act.informative.c	/^void Burglary::Clear()$/;"	f	class:Burglary
Contain	corpses.cpp	/^Contain::Contain() {$/;"	f	class:Contain
Contain	corpses.cpp	/^Contain::Contain(struct obj_data *obj, long playerId) {$/;"	f	class:Contain
Contain	corpses.h	/^class Contain {$/;"	c
Corpse	corpses.cpp	/^Corpse::Corpse() {$/;"	f	class:Corpse
Corpse	corpses.cpp	/^Corpse::Corpse(struct obj_data *corpse, room_vnum inVRoom, long playerId,$/;"	f	class:Corpse
Corpse	corpses.h	/^class Corpse {$/;"	c
CorpseData	corpses.cpp	/^CorpseData::CorpseData() {$/;"	f	class:CorpseData
CorpseData	corpses.h	/^class CorpseData {$/;"	c
CountBurgledRooms	act.informative.c	/^int Burglary::CountBurgledRooms()$/;"	f	class:Burglary
Crash_calculate_rent	objsave.c	/^void Crash_calculate_rent(struct obj_data * obj, int *cost)$/;"	f
Crash_clean_file	objsave.c	/^int Crash_clean_file(char *name)$/;"	f
Crash_crashsave	objsave.c	/^void Crash_crashsave(struct char_data * ch)$/;"	f
Crash_cryosave	objsave.c	/^void Crash_cryosave(struct char_data * ch, int cost)$/;"	f
Crash_delete_crashfile	objsave.c	/^int Crash_delete_crashfile(struct char_data * ch)$/;"	f
Crash_delete_file	objsave.c	/^int Crash_delete_file(char *name)$/;"	f
Crash_extract_expensive	objsave.c	/^void Crash_extract_expensive(struct obj_data * obj)$/;"	f
Crash_extract_norent_eq	objsave.c	/^void Crash_extract_norent_eq(struct char_data *ch)$/;"	f
Crash_extract_norents	objsave.c	/^void Crash_extract_norents(struct obj_data * obj)$/;"	f
Crash_extract_objs	objsave.c	/^void Crash_extract_objs(struct obj_data * obj)$/;"	f
Crash_idlesave	objsave.c	/^void Crash_idlesave(struct char_data * ch)$/;"	f
Crash_is_unrentable	objsave.c	/^int Crash_is_unrentable(struct obj_data * obj)$/;"	f
Crash_listrent	objsave.c	/^void Crash_listrent(struct char_data * ch, char *name)$/;"	f
Crash_load	objsave.c	/^int Crash_load(struct char_data * ch)$/;"	f
Crash_offer_rent	objsave.c	/^int Crash_offer_rent(struct char_data * ch, struct char_data * receptionist,$/;"	f
Crash_rent_deadline	objsave.c	/^void Crash_rent_deadline(struct char_data * ch, struct char_data * recep,$/;"	f
Crash_rentsave	objsave.c	/^void Crash_rentsave(struct char_data * ch, int cost)$/;"	f
Crash_report_rent	objsave.c	/^void Crash_report_rent(struct char_data * ch, struct char_data * recep,$/;"	f
Crash_report_unrentables	objsave.c	/^int Crash_report_unrentables(struct char_data * ch, struct char_data * recep,$/;"	f
Crash_restore_weight	objsave.c	/^void Crash_restore_weight(struct obj_data * obj)$/;"	f
Crash_save	objsave.c	/^int Crash_save(struct obj_data * obj, FILE * fp, int location)$/;"	f
Crash_save_all	objsave.c	/^void Crash_save_all(void)$/;"	f
Crash_write_rentcode	objsave.c	/^int Crash_write_rentcode(struct char_data * ch, FILE * fl, struct rent_info * rent)$/;"	f
DATA_BLOCK_DATASIZE	mail.h	80;"	d
DBG	utils.h	156;"	d
DB_BOOT_HLP	db.h	17;"	d
DB_BOOT_HNT	db.h	19;"	d
DB_BOOT_MOB	db.h	13;"	d
DB_BOOT_OBJ	db.h	14;"	d
DB_BOOT_SHP	db.h	16;"	d
DB_BOOT_TRG	db.h	18;"	d
DB_BOOT_WLD	db.h	12;"	d
DB_BOOT_ZON	db.h	15;"	d
DEATH_PROG	oasis.h	65;"	d
DEBUG	medit.c	31;"	d	file:
DECLARE_GAME	casino.h	5;"	d
DEFAULT_APP_LVL	clan.h	32;"	d
DEFAULT_STAFF_LVL	spells.h	11;"	d
DEFAULT_WAND_LVL	spells.h	12;"	d
DEF_MOB	act.build.c	136;"	d	file:
DEF_OBJ	act.build.c	137;"	d	file:
DEF_ROOM	act.build.c	138;"	d	file:
DELETED_BLOCK	mail.h	60;"	d
DEX_CHECK	utils.h	420;"	d
DFLT_DIR	config.c	/^const char *DFLT_DIR = "lib";$/;"	v
DFLT_IP	config.c	/^const char *DFLT_IP = NULL; \/* bind to all interfaces *\/$/;"	v
DFLT_PORT	config.c	/^ush_int DFLT_PORT = 4444;$/;"	v
DG_CASTER_PROXY	dg_scripts.h	23;"	d
DG_NO_TRIG	dg_scripts.h	20;"	d
DG_SCRIPT_VERSION	dg_scripts.h	12;"	d
DIR_REVERSE	act.movement.c	/^static int DIR_REVERSE[6] = {2, 3, 0, 1, 5, 4};$/;"	v	file:
DISPAIR_CHAR_MESSAGES	act.movement.c	/^char *DISPAIR_CHAR_MESSAGES[MAX_DISPAIR_MESSAGES] = {$/;"	v
DIV	utils.c	110;"	d	file:
DM	telnet.h	55;"	d
DO	telnet.h	44;"	d
DONT	telnet.h	43;"	d
DOOR_IS_CLOSED	act.movement.c	1121;"	d	file:
DOOR_IS_LOCKED	act.movement.c	1122;"	d	file:
DOOR_IS_OPEN	act.movement.c	1111;"	d	file:
DOOR_IS_OPENABLE	act.movement.c	1107;"	d	file:
DOOR_IS_PICKPROOF	act.movement.c	1117;"	d	file:
DOOR_IS_UNLOCKED	act.movement.c	1114;"	d	file:
DOOR_KEY	act.movement.c	1123;"	d	file:
DOOR_LOCK	act.movement.c	1125;"	d	file:
DOWN	structs.h	79;"	d
DRUNK	structs.h	884;"	d
DRUNKNESS	act.comm.c	59;"	d	file:
DT_ABSZERO	structs.h	217;"	d
DT_CRUSH	structs.h	218;"	d
DT_DEATH	structs.h	215;"	d
DT_INCINERATE	structs.h	216;"	d
DT_MISC	structs.h	214;"	d
DescribeSelf	act.informative.c	/^void Burglary::DescribeSelf(struct char_data *ch)$/;"	f	class:Burglary
DicknDavid	castle.c	/^SPECIAL(DicknDavid);$/;"	v
EAST	structs.h	75;"	d
EB_BUN	spec_procs.c	5825;"	d	file:
EB_EGG	spec_procs.c	5824;"	d	file:
EC	telnet.h	50;"	d
EL	telnet.h	49;"	d
ENCRYPT_CNT	telnet.h	292;"	d
ENCRYPT_DEC_KEYID	telnet.h	291;"	d
ENCRYPT_ENC_KEYID	telnet.h	290;"	d
ENCRYPT_END	telnet.h	287;"	d
ENCRYPT_IS	telnet.h	283;"	d
ENCRYPT_NAME	telnet.h	315;"	d
ENCRYPT_NAME_OK	telnet.h	314;"	d
ENCRYPT_REPLY	telnet.h	285;"	d
ENCRYPT_REQEND	telnet.h	289;"	d
ENCRYPT_REQSTART	telnet.h	288;"	d
ENCRYPT_START	telnet.h	286;"	d
ENCRYPT_SUPPORT	telnet.h	284;"	d
ENCTYPE_ANY	telnet.h	294;"	d
ENCTYPE_CNT	telnet.h	297;"	d
ENCTYPE_DES_CFB64	telnet.h	295;"	d
ENCTYPE_DES_OFB64	telnet.h	296;"	d
ENCTYPE_NAME	telnet.h	318;"	d
ENCTYPE_NAME_OK	telnet.h	317;"	d
END_GAME	casino.h	3;"	d
END_OF	shop.h	58;"	d
ENHANCE_AC	structs.h	865;"	d
ENHANCE_AGE	structs.h	857;"	d
ENHANCE_CHA	structs.h	854;"	d
ENHANCE_CLASS	structs.h	855;"	d
ENHANCE_CON	structs.h	853;"	d
ENHANCE_DAMROLL	structs.h	867;"	d
ENHANCE_DEX	structs.h	850;"	d
ENHANCE_EXP	structs.h	864;"	d
ENHANCE_GOLD	structs.h	863;"	d
ENHANCE_HEIGHT	structs.h	859;"	d
ENHANCE_HIT	structs.h	861;"	d
ENHANCE_HITROLL	structs.h	866;"	d
ENHANCE_INT	structs.h	851;"	d
ENHANCE_LEVEL	structs.h	856;"	d
ENHANCE_MANA	structs.h	860;"	d
ENHANCE_MOVE	structs.h	862;"	d
ENHANCE_NONE	structs.h	848;"	d
ENHANCE_SAVING_BREATH	structs.h	871;"	d
ENHANCE_SAVING_PARA	structs.h	868;"	d
ENHANCE_SAVING_PETRI	structs.h	870;"	d
ENHANCE_SAVING_ROD	structs.h	869;"	d
ENHANCE_SAVING_SPELL	structs.h	872;"	d
ENHANCE_STR	structs.h	849;"	d
ENHANCE_WEIGHT	structs.h	858;"	d
ENHANCE_WIS	structs.h	852;"	d
ENTRY_PROG	oasis.h	67;"	d
ENTRY_ROOM	utils.h	529;"	d
ENVIRON	utils.h	883;"	d
ENV_ESC	telnet.h	239;"	d
ENV_USERVAR	telnet.h	240;"	d
EOR	telnet.h	58;"	d
ERROR_PROG	oasis.h	59;"	d
ETEXT_FILE	utils.h	160;"	d
EVENT	dg_event.h	10;"	d
EVENT	dg_scripts.c	/^EVENT(trig_wait_event)$/;"	f
EVENT_BOUNTY_HUNT	structs.h	2043;"	d
EVENT_BURGLARY	structs.h	2032;"	d
EVENT_CURFEW	structs.h	2065;"	d
EVENT_ELECTION	structs.h	2081;"	d
EVENT_FIRE	structs.h	2074;"	d
EVENT_GOLD_RUSH	structs.h	2073;"	d
EVENT_HAPPY_HR	structs.h	2082;"	d
EVENT_OVER	structs.h	2080;"	d
EVENT_QUEST	structs.h	2056;"	d
EXDSCR_LENGTH	structs.h	1004;"	d
EXIT	utils.h	759;"	d
EXITN	act.movement.c	1006;"	d	file:
EXITN	spec_procs.c	4825;"	d	file:
EXIT_FLAGGED	utils.h	306;"	d
EXP_MAX	class.c	1418;"	d	file:
EXT_AUTOCORPSE	structs.h	484;"	d
EXT_AUTOEAT	structs.h	485;"	d
EXT_AUTOGOLD	structs.h	479;"	d
EXT_AUTOLOOT	structs.h	480;"	d
EXT_AUTOSPLIT	structs.h	481;"	d
EXT_FLAGGED	utils.h	298;"	d
EXT_FLAGS	utils.h	264;"	d
EXT_GHOST	structs.h	483;"	d
EXT_NOCI	structs.h	477;"	d
EXT_NOCT	structs.h	476;"	d
EXT_NOHINTS	structs.h	482;"	d
EXT_NONEWBIE	structs.h	475;"	d
EXT_PKILL	structs.h	478;"	d
EXT_TOG_CHK	utils.h	320;"	d
EX_CLOSED	structs.h	239;"	d
EX_ISDOOR	structs.h	238;"	d
EX_LOCKED	structs.h	240;"	d
EX_PICKPROOF	structs.h	241;"	d
Escape	graph.c	/^int Escape(struct char_data *ch)$/;"	f
EscapeAll	act.movement.c	/^void EscapeAll(struct char_data *escaper, struct char_data *master, int room)$/;"	f
EscapeValidEdge	graph.c	/^int EscapeValidEdge(int x, int y)$/;"	f
FALSE	config.c	21;"	d	file:
FALSE	utils.h	834;"	d
FASTBOOT_FILE	db.h	60;"	d
FASTBOOT_FILE	db.h	64;"	d
FASTBOOT_FILE	db.h	68;"	d
FD_CLR	comm.c	194;"	d	file:
FD_CLR	comm.c	198;"	d	file:
FD_CLR	graph.c	27;"	d	file:
FD_CLR	graph.c	31;"	d	file:
FD_ISSET	comm.c	193;"	d	file:
FD_ISSET	comm.c	197;"	d	file:
FD_ISSET	graph.c	26;"	d	file:
FD_ISSET	graph.c	30;"	d	file:
FD_SET	comm.c	192;"	d	file:
FD_SET	comm.c	196;"	d	file:
FD_SET	graph.c	25;"	d	file:
FD_SET	graph.c	29;"	d	file:
FD_SETSIZE	sysdep.h	303;"	d
FD_ZERO	comm.c	191;"	d	file:
FD_ZERO	comm.c	195;"	d	file:
FD_ZERO	graph.c	24;"	d	file:
FD_ZERO	graph.c	28;"	d	file:
FIGHTING	utils.h	467;"	d
FIGHT_PROG	oasis.h	64;"	d
FILENAME	boards.h	40;"	d
FILE_MOB_BALANCE	balance.h	14;"	d
FILE_OBJ_BALANCE	balance.h	15;"	d
FIND_ALL	handler.h	112;"	d
FIND_ALLDOT	handler.h	113;"	d
FIND_CHAR_INVIS	handler.h	128;"	d
FIND_CHAR_INWORLD	handler.h	127;"	d
FIND_CHAR_ROOM	handler.h	121;"	d
FIND_CHAR_WORLD	handler.h	122;"	d
FIND_INDIV	handler.h	111;"	d
FIND_OBJ_EQUIP	handler.h	126;"	d
FIND_OBJ_INV	handler.h	123;"	d
FIND_OBJ_ROOM	handler.h	124;"	d
FIND_OBJ_WORLD	handler.h	125;"	d
FIRST_REMORT_CLASS	structs.h	289;"	d
FMT	dg_olc.c	769;"	d	file:
FMT	dg_olc.c	771;"	d	file:
FMT	dg_olc.c	774;"	d	file:
FORMAT_INDENT	improved-edit.h	37;"	d
FULL	structs.h	885;"	d
GA	telnet.h	48;"	d
GARBAGE_SPACE	structs.h	1021;"	d
GET_AC	utils.h	449;"	d
GET_ADD	utils.h	413;"	d
GET_AFF_ADD	utils.h	441;"	d
GET_AFF_CHA	utils.h	446;"	d
GET_AFF_CON	utils.h	445;"	d
GET_AFF_DEX	utils.h	442;"	d
GET_AFF_INT	utils.h	443;"	d
GET_AFF_STR	utils.h	440;"	d
GET_AFF_WIS	utils.h	444;"	d
GET_AGE	utils.h	354;"	d
GET_ALIAS	genmob.h	19;"	d
GET_ALIAS	medit.c	64;"	d	file:
GET_ALIASES	utils.h	508;"	d
GET_ALIGNMENT	utils.h	476;"	d
GET_ATTACK	genmob.h	23;"	d
GET_ATTACK	medit.c	68;"	d	file:
GET_BAD_PWS	utils.h	501;"	d
GET_BANK_GOLD	utils.h	457;"	d
GET_CHA	utils.h	418;"	d
GET_CLAN	clan.h	102;"	d
GET_CLAN_DEATHS	clan.h	106;"	d
GET_CLAN_FRAGS	clan.h	105;"	d
GET_CLAN_RANK	clan.h	103;"	d
GET_CLAN_REL	clan.h	104;"	d
GET_CLASS	utils.h	397;"	d
GET_COLOUR	utils.h	478;"	d
GET_CON	utils.h	417;"	d
GET_COND	utils.h	494;"	d
GET_CORPSEID	utils.h	653;"	d
GET_DAMROLL	utils.h	459;"	d
GET_DDESC	genmob.h	22;"	d
GET_DDESC	medit.c	67;"	d	file:
GET_DEBUG	utils.h	518;"	d
GET_DEBUG	utils.h	520;"	d
GET_DEFAULT_POS	utils.h	577;"	d
GET_DEX	utils.h	414;"	d
GET_EMAIL	utils.h	372;"	d
GET_EQ	utils.h	543;"	d
GET_EQ_WEIGHT	utils.h	544;"	d
GET_EXP	utils.h	448;"	d
GET_FIGHT_PROMPT	utils.h	385;"	d
GET_FREEZE_LEV	utils.h	500;"	d
GET_FRIEND	utils.h	526;"	d
GET_GOLD	utils.h	456;"	d
GET_HEIGHT	utils.h	399;"	d
GET_HIT	utils.h	450;"	d
GET_HITROLL	utils.h	458;"	d
GET_HOME	utils.h	398;"	d
GET_ID	utils.h	464;"	d
GET_IDNUM	utils.h	463;"	d
GET_IGNORE	utils.h	522;"	d
GET_IGNORE_ALL	utils.h	523;"	d
GET_IGN_LVL	utils.h	524;"	d
GET_IGN_LVL_ALL	utils.h	525;"	d
GET_IMMKILLS	utils.h	485;"	d
GET_INT	utils.h	415;"	d
GET_INVIS_LEV	utils.h	498;"	d
GET_INVIS_TYPE	utils.h	497;"	d
GET_KILLSBYIMM	utils.h	488;"	d
GET_KILLSBYMOB	utils.h	489;"	d
GET_KILLSBYPC	utils.h	490;"	d
GET_LAST_COLOUR	colour.h	45;"	d
GET_LAST_LVL	utils.h	366;"	d
GET_LAST_OLC_MODE	utils.h	506;"	d
GET_LAST_OLC_TARG	utils.h	505;"	d
GET_LAST_TELL	utils.h	509;"	d
GET_LDESC	genmob.h	21;"	d
GET_LDESC	medit.c	66;"	d	file:
GET_LEVEL	utils.h	360;"	d
GET_LOADROOM	utils.h	495;"	d
GET_MANA	utils.h	454;"	d
GET_MARK_COLOUR	colour.h	46;"	d
GET_MAX_HIT	utils.h	451;"	d
GET_MAX_LVL	utils.h	361;"	d
GET_MAX_MANA	utils.h	455;"	d
GET_MAX_MOVE	utils.h	453;"	d
GET_MOBKILLS	utils.h	486;"	d
GET_MOB_RNUM	utils.h	571;"	d
GET_MOB_SPEC	utils.h	570;"	d
GET_MOB_VNUM	utils.h	572;"	d
GET_MOB_VZNUM	utils.h	574;"	d
GET_MOB_WAIT	utils.h	611;"	d
GET_MODIFIER	utils.h	395;"	d
GET_MOVE	utils.h	452;"	d
GET_MPROG	medit.c	72;"	d	file:
GET_MPROG_TYPE	medit.c	73;"	d	file:
GET_NAME	utils.h	357;"	d
GET_NDD	genmob.h	17;"	d
GET_NDD	medit.c	62;"	d	file:
GET_OBJ_COST	utils.h	635;"	d
GET_OBJ_DAMAGE	utils.h	629;"	d
GET_OBJ_EXTRA	utils.h	637;"	d
GET_OBJ_LEVEL	utils.h	632;"	d
GET_OBJ_LR	utils.h	639;"	d
GET_OBJ_MAX_DAMAGE	utils.h	630;"	d
GET_OBJ_NUM	shop.h	57;"	d
GET_OBJ_PERM	utils.h	633;"	d
GET_OBJ_RENT	utils.h	636;"	d
GET_OBJ_RNUM	utils.h	645;"	d
GET_OBJ_SPEC	utils.h	657;"	d
GET_OBJ_TIMER	utils.h	644;"	d
GET_OBJ_TYPE	utils.h	634;"	d
GET_OBJ_VAL	utils.h	642;"	d
GET_OBJ_VNUM	utils.h	646;"	d
GET_OBJ_VZNUM	utils.h	648;"	d
GET_OBJ_WEAR	utils.h	641;"	d
GET_OBJ_WEIGHT	utils.h	643;"	d
GET_OLC_ZONE	oasis.h	164;"	d
GET_PAGE_LENGTH	utils.h	532;"	d
GET_PAGE_WIDTH	utils.h	531;"	d
GET_PASSWD	utils.h	370;"	d
GET_PCKILLS	utils.h	487;"	d
GET_PC_NAME	utils.h	356;"	d
GET_PERSONAL	utils.h	374;"	d
GET_PFILEPOS	utils.h	371;"	d
GET_POS	utils.h	461;"	d
GET_PRACTICES	utils.h	496;"	d
GET_PREV_COLOUR	colour.h	44;"	d
GET_PROMPT	utils.h	384;"	d
GET_QUEST_ENHANCEMENT	utils.h	537;"	d
GET_QUEST_ENHANCEMENT_VALUE	utils.h	538;"	d
GET_QUEST_ITEM	utils.h	535;"	d
GET_QUEST_ITEM_DATA	utils.h	533;"	d
GET_QUEST_ITEM_NUMB	utils.h	534;"	d
GET_QUEST_ITEM_OBJ	utils.h	536;"	d
GET_RACE	utils.h	492;"	d
GET_REAL_ADD	utils.h	423;"	d
GET_REAL_CHA	utils.h	428;"	d
GET_REAL_CON	utils.h	427;"	d
GET_REAL_DEX	utils.h	424;"	d
GET_REAL_INT	utils.h	425;"	d
GET_REAL_LEVEL	utils.h	391;"	d
GET_REAL_STAT	utils.h	430;"	d
GET_REAL_STR	utils.h	422;"	d
GET_REAL_WIS	utils.h	426;"	d
GET_REMORT_LEVEL	utils.h	376;"	d
GET_REM_ONE	utils.h	362;"	d
GET_REM_TWO	utils.h	363;"	d
GET_ROOM_SECTOR	act.build.c	132;"	d	file:
GET_ROOM_SPEC	utils.h	346;"	d
GET_ROOM_VNUM	utils.h	344;"	d
GET_SAVE	utils.h	475;"	d
GET_SDD	genmob.h	18;"	d
GET_SDD	medit.c	63;"	d	file:
GET_SDESC	genmob.h	20;"	d
GET_SDESC	medit.c	65;"	d	file:
GET_SEX	utils.h	401;"	d
GET_SHORT	dg_scripts.h	249;"	d
GET_SKILL	utils.h	539;"	d
GET_SOCIAL_POINTS	utils.h	511;"	d
GET_SOCIAL_STATUS	utils.h	510;"	d
GET_SPECIALS	utils.h	267;"	d
GET_STAT_POINTS	utils.h	527;"	d
GET_STR	utils.h	412;"	d
GET_S_KEEPER	medit.c	69;"	d	file:
GET_TALK	utils.h	502;"	d
GET_TITLE	utils.h	359;"	d
GET_TRIG_ARG	dg_scripts.h	221;"	d
GET_TRIG_DATA_TYPE	dg_scripts.h	219;"	d
GET_TRIG_DEPTH	dg_scripts.h	224;"	d
GET_TRIG_LOOPS	dg_scripts.h	225;"	d
GET_TRIG_NAME	dg_scripts.h	215;"	d
GET_TRIG_NARG	dg_scripts.h	220;"	d
GET_TRIG_RNUM	dg_scripts.h	216;"	d
GET_TRIG_TYPE	dg_scripts.h	218;"	d
GET_TRIG_VARS	dg_scripts.h	222;"	d
GET_TRIG_VNUM	dg_scripts.h	217;"	d
GET_TRIG_WAIT	dg_scripts.h	223;"	d
GET_UNHOLINESS	utils.h	328;"	d
GET_VOTED	utils.h	507;"	d
GET_WAIT_STATE	utils.h	613;"	d
GET_WAS_IN	utils.h	353;"	d
GET_WEBPAGE	utils.h	373;"	d
GET_WEIGHT	utils.h	400;"	d
GET_WHO_STR	utils.h	369;"	d
GET_WIMP_LEV	utils.h	499;"	d
GET_WIS	utils.h	416;"	d
GET_WORSHIP_POINTS	utils.h	512;"	d
GIVE_PROG	oasis.h	70;"	d
GOD_ROOMS_ZONE	structs.h	810;"	d
GOLD_OBJ_VNUM	structs.h	137;"	d
GRAVITY	utils.h	882;"	d
GREENGEM	db.h	23;"	d
GREETINGS	db.c	/^char *GREETINGS = NULL;		\/* opening credits screen	*\/$/;"	v
GREETINGS_FILE	db.h	89;"	d
GREET_PROG	oasis.h	68;"	d
GUN_BIT	utils.h	863;"	d
GUN_BITS	utils.h	864;"	d
GameInfo	structs.h	/^    GameInfo() {$/;"	f	class:GameInfo
GameInfo	structs.h	/^class GameInfo {$/;"	c
GossipItem	structs.h	/^	GossipItem(){ }$/;"	f	class:GossipItem
GossipItem	structs.h	/^class GossipItem$/;"	c
HANDBOOK_FILE	db.h	96;"	d
HAS_OFFENDED	utils.h	325;"	d
HAS_RLIMIT	sysdep.h	339;"	d
HAS_SPELL_ROUTINE	utils.h	310;"	d
HAT_TARGET_ROOM	spec_procs.c	5915;"	d	file:
HAVE_ARPA_INET_H	conf.h	50;"	d
HAVE_ARPA_TELNET_H	conf.h	53;"	d
HAVE_ASSERT_H	conf.h	56;"	d
HAVE_ERRNO_H	conf.h	62;"	d
HAVE_FCNTL_H	conf.h	65;"	d
HAVE_INET_ADDR	conf.h	44;"	d
HAVE_INET_ATON	conf.h	47;"	d
HAVE_LIMITS_H	conf.h	68;"	d
HAVE_MEMORY_H	conf.h	71;"	d
HAVE_NETDB_H	conf.h	77;"	d
HAVE_NETINET_IN_H	conf.h	80;"	d
HAVE_SIGNAL_H	conf.h	83;"	d
HAVE_STRINGS_H	conf.h	89;"	d
HAVE_STRING_H	conf.h	86;"	d
HAVE_STRUCT_IN_ADDR	conf.h	35;"	d
HAVE_SYS_FCNTL_H	conf.h	92;"	d
HAVE_SYS_RESOURCE_H	conf.h	95;"	d
HAVE_SYS_SOCKET_H	conf.h	101;"	d
HAVE_SYS_STAT_H	conf.h	104;"	d
HAVE_SYS_TIME_H	conf.h	107;"	d
HAVE_SYS_TYPES_H	conf.h	110;"	d
HAVE_SYS_UIO_H	conf.h	113;"	d
HAVE_SYS_WAIT_H	conf.h	8;"	d
HAVE_UNISTD_H	conf.h	116;"	d
HCONTROL_FILE	db.h	113;"	d
HCONTROL_FORMAT	house.c	/^const char *HCONTROL_FORMAT =$/;"	v
HEADER_BLOCK	mail.h	58;"	d
HEADER_BLOCK_DATASIZE	mail.h	76;"	d
HELP_PAGE_FILE	db.h	90;"	d
HINTS_FILE	db.h	98;"	d
HISTORY_SIZE	structs.h	994;"	d
HITPRCNT_PROG	oasis.h	66;"	d
HLP_PREFIX	db.h	82;"	d
HMHR	utils.h	677;"	d
HNT_PREFIX	db.h	83;"	d
HOST_LENGTH	structs.h	1003;"	d
HOUSE_PRIVATE	house.h	4;"	d
HSHR	utils.h	675;"	d
HSSH	utils.h	676;"	d
HUH	structs.h	149;"	d
HUNTING	utils.h	472;"	d
House_boot	house.c	/^void House_boot(void)$/;"	f
House_can_enter	house.c	/^int House_can_enter(struct char_data * ch, room_vnum house)$/;"	f
House_crashsave	house.c	/^void House_crashsave(room_vnum vnum)$/;"	f
House_delete_file	house.c	/^void House_delete_file(int vnum)$/;"	f
House_get_filename	house.c	/^int House_get_filename(int vnum, char *filename)$/;"	f
House_list_guests	house.c	/^void House_list_guests(struct char_data *ch, int i, int quiet)$/;"	f
House_listrent	house.c	/^void House_listrent(struct char_data * ch, room_vnum vnum)$/;"	f
House_load	house.c	/^int House_load(room_vnum vnum)$/;"	f
House_restore_weight	house.c	/^void House_restore_weight(struct obj_data * obj)$/;"	f
House_save	house.c	/^int House_save(struct obj_data * obj, FILE * fp)$/;"	f
House_save_all	house.c	/^void House_save_all(void)$/;"	f
House_save_control	house.c	/^void House_save_control(void)$/;"	f
IAC	telnet.h	42;"	d
IDEA_FILE	db.h	100;"	d
IDLE_ROOM_VNUM	limits.c	1139;"	d	file:
IDLE_ROOM_VNUM	structs.h	70;"	d
IF_STR	utils.h	196;"	d
IGNORE_NAME	comm.c	2375;"	d	file:
IMMLIST_FILE	db.h	93;"	d
IMM_CAN_SEE	utils.h	700;"	d
IMOTD_FILE	db.h	88;"	d
INDEX_FILE	db.h	74;"	d
INDEX_SIZE	boards.h	15;"	d
INFO_FILE	db.h	91;"	d
INSTIGATOR	utils.h	326;"	d
INVALID_SOCKET	comm.c	78;"	d	file:
INVIS_NORMAL	structs.h	892;"	d
INVIS_OK	utils.h	689;"	d
INVIS_OK_OBJ	utils.h	719;"	d
INVIS_RANGE	utils.h	705;"	d
INVIS_SINGLE	structs.h	891;"	d
INVIS_SPECIFIC	structs.h	890;"	d
IN_FILE_PROG	oasis.h	60;"	d
IN_ROOM	utils.h	351;"	d
IP	telnet.h	53;"	d
ISBLAST_ALL	structs.h	88;"	d
ISBLAST_ARROW	structs.h	89;"	d
ISBLAST_GAUNTLET	structs.h	90;"	d
ISNEWL	utils.h	195;"	d
IS_AFFECTED	utils.h	316;"	d
IS_BATTLEMAGE	utils.h	803;"	d
IS_BUILDING	utils.h	282;"	d
IS_CARRYING_N	utils.h	466;"	d
IS_CARRYING_W	utils.h	465;"	d
IS_CLAN_BOARD	boards.h	47;"	d
IS_CLERIC	utils.h	780;"	d
IS_CLONE	utils.h	287;"	d
IS_CLONE_ROOM	utils.h	288;"	d
IS_CLOSED	graph.c	68;"	d	file:
IS_CORPSE	utils.h	651;"	d
IS_DARK	utils.h	334;"	d
IS_DRUID	utils.h	805;"	d
IS_DUAL_CAPABLE	utils.h	567;"	d
IS_DUAL_WIELDING	utils.h	555;"	d
IS_EVIL	utils.h	605;"	d
IS_GHOST	utils.h	280;"	d
IS_GOD	shop.h	56;"	d
IS_GOOD	utils.h	604;"	d
IS_LIGHT	utils.h	341;"	d
IS_MAGIC_USER	utils.h	773;"	d
IS_MARKED	graph.c	66;"	d	file:
IS_MASTER	utils.h	814;"	d
IS_MOB	utils.h	279;"	d
IS_MOVE	interpreter.h	18;"	d
IS_NEUTRAL	utils.h	606;"	d
IS_NIGHTBLADE	utils.h	801;"	d
IS_NPC	utils.h	278;"	d
IS_OBJ_STAT	utils.h	650;"	d
IS_PALADIN	utils.h	809;"	d
IS_PLAYING	utils.h	621;"	d
IS_PRIEST	utils.h	807;"	d
IS_SET	utils.h	238;"	d
IS_SKILL	utils.h	541;"	d
IS_SPELLSWORD	utils.h	811;"	d
IS_THIEF	utils.h	787;"	d
IS_WARRIOR	utils.h	794;"	d
IS_WEAPON	fight.c	118;"	d	file:
IS_ZOMBIE	utils.h	292;"	d
ITEM_ANTI_BATTLEMAGE	structs.h	727;"	d
ITEM_ANTI_CLERIC	structs.h	717;"	d
ITEM_ANTI_DRUID	structs.h	724;"	d
ITEM_ANTI_EVIL	structs.h	714;"	d
ITEM_ANTI_GOOD	structs.h	713;"	d
ITEM_ANTI_MAGIC_USER	structs.h	716;"	d
ITEM_ANTI_MASTER	structs.h	738;"	d
ITEM_ANTI_NEUTRAL	structs.h	715;"	d
ITEM_ANTI_NIGHTBLADE	structs.h	726;"	d
ITEM_ANTI_PALADIN	structs.h	737;"	d
ITEM_ANTI_PRIEST	structs.h	725;"	d
ITEM_ANTI_SPELLSWORD	structs.h	728;"	d
ITEM_ANTI_THIEF	structs.h	718;"	d
ITEM_ANTI_WARRIOR	structs.h	719;"	d
ITEM_ARMOR	structs.h	633;"	d
ITEM_BATTERY	structs.h	650;"	d
ITEM_BLESS	structs.h	712;"	d
ITEM_BOAT	structs.h	646;"	d
ITEM_BREATHER	structs.h	656;"	d
ITEM_COLD	structs.h	662;"	d
ITEM_CONTAINER	structs.h	639;"	d
ITEM_DRINKCON	structs.h	641;"	d
ITEM_ENVIRON	structs.h	658;"	d
ITEM_FIREWEAPON	structs.h	630;"	d
ITEM_FOOD	structs.h	643;"	d
ITEM_FOUNTAIN	structs.h	647;"	d
ITEM_GATEWAY	structs.h	667;"	d
ITEM_GLOW	structs.h	704;"	d
ITEM_GRAV1	structs.h	664;"	d
ITEM_GRAV3	structs.h	665;"	d
ITEM_HEATPROOF	structs.h	661;"	d
ITEM_HEATRES	structs.h	660;"	d
ITEM_HIDDEN	structs.h	722;"	d
ITEM_HUM	structs.h	705;"	d
ITEM_INVISIBLE	structs.h	709;"	d
ITEM_JOINABLE	structs.h	649;"	d
ITEM_KEY	structs.h	642;"	d
ITEM_LIGHT	structs.h	625;"	d
ITEM_MAGIC	structs.h	710;"	d
ITEM_MAGIC_EQ	structs.h	648;"	d
ITEM_MISSILE	structs.h	631;"	d
ITEM_MONEY	structs.h	644;"	d
ITEM_NODONATE	structs.h	707;"	d
ITEM_NODROP	structs.h	711;"	d
ITEM_NODRUNK	structs.h	735;"	d
ITEM_NOHUNGER	structs.h	733;"	d
ITEM_NOINVIS	structs.h	708;"	d
ITEM_NORENT	structs.h	706;"	d
ITEM_NOSELL	structs.h	720;"	d
ITEM_NOTE	structs.h	640;"	d
ITEM_NOTHIRST	structs.h	734;"	d
ITEM_OTHER	structs.h	636;"	d
ITEM_PEN	structs.h	645;"	d
ITEM_POTION	structs.h	634;"	d
ITEM_QEQ	structs.h	739;"	d
ITEM_QUEST	structs.h	651;"	d
ITEM_RAD1PROOF	structs.h	668;"	d
ITEM_RESPIRATE	structs.h	655;"	d
ITEM_REWARD	structs.h	652;"	d
ITEM_RIDDEN	structs.h	721;"	d
ITEM_SCROLL	structs.h	626;"	d
ITEM_STAFF	structs.h	628;"	d
ITEM_STASIS	structs.h	659;"	d
ITEM_SUBZERO	structs.h	663;"	d
ITEM_TRAP	structs.h	638;"	d
ITEM_TRASH	structs.h	637;"	d
ITEM_TREASURE	structs.h	632;"	d
ITEM_VACSUIT	structs.h	657;"	d
ITEM_WAND	structs.h	627;"	d
ITEM_WEAPON	structs.h	629;"	d
ITEM_WEAR_ABOUT	structs.h	693;"	d
ITEM_WEAR_ANKLE	structs.h	700;"	d
ITEM_WEAR_ARMS	structs.h	691;"	d
ITEM_WEAR_BODY	structs.h	686;"	d
ITEM_WEAR_EAR	structs.h	699;"	d
ITEM_WEAR_EYE	structs.h	698;"	d
ITEM_WEAR_FEET	structs.h	689;"	d
ITEM_WEAR_FINGER	structs.h	684;"	d
ITEM_WEAR_HANDS	structs.h	690;"	d
ITEM_WEAR_HEAD	structs.h	687;"	d
ITEM_WEAR_HOLD	structs.h	697;"	d
ITEM_WEAR_LEGS	structs.h	688;"	d
ITEM_WEAR_NECK	structs.h	685;"	d
ITEM_WEAR_SHIELD	structs.h	692;"	d
ITEM_WEAR_TAKE	structs.h	683;"	d
ITEM_WEAR_WAIST	structs.h	694;"	d
ITEM_WEAR_WIELD	structs.h	696;"	d
ITEM_WEAR_WRIST	structs.h	695;"	d
ITEM_WORN	structs.h	635;"	d
I_CRASH	medit.c	38;"	d	file:
Initialise	act.informative.c	/^int Burglary::Initialise(int nStart, int nDir)$/;"	f	class:Burglary
InitialiseMobs	act.informative.c	/^void Burglary::InitialiseMobs() $/;"	f	class:Burglary
InitialiseObjects	act.informative.c	/^void Burglary::InitialiseObjects() $/;"	f	class:Burglary
InitialiseSpecials	act.informative.c	/^void Burglary::InitialiseSpecials() { }$/;"	f	class:Burglary
InitialiseTraps	act.informative.c	/^void Burglary::InitialiseTraps() $/;"	f	class:Burglary
Jabba	spec_assign.c	/^  SPECIAL(Jabba);$/;"	v
James	castle.c	/^SPECIAL(James);$/;"	v
KBBLU	screen.h	26;"	d
KBCYN	screen.h	28;"	d
KBGRN	screen.h	24;"	d
KBGRY	screen.h	22;"	d
KBLU	screen.h	15;"	d
KBMAG	screen.h	27;"	d
KBRED	screen.h	23;"	d
KBWHT	screen.h	21;"	d
KBYEL	screen.h	25;"	d
KCYN	screen.h	17;"	d
KGRN	screen.h	13;"	d
KILLSCRIPT_FILE	db.h	61;"	d
KILLSCRIPT_FILE	db.h	65;"	d
KILLSCRIPT_FILE	db.h	69;"	d
KILL_VAMP_VNUM	act.offensive.c	1659;"	d	file:
KILL_WOLF_VNUM	act.offensive.c	1658;"	d	file:
KMAG	screen.h	16;"	d
KNRM	screen.h	11;"	d
KNUL	screen.h	19;"	d
KRED	screen.h	12;"	d
KWHT	screen.h	18;"	d
KYEL	screen.h	14;"	d
LARGE_BUFSIZE	structs.h	992;"	d
LASTROOM	utils.h	352;"	d
LAST_BLOCK	mail.h	59;"	d
LAST_GOSSIPS_TO_SAVE	act.comm.c	28;"	d	file:
LEAPS_THRU_END_OF	utils.c	111;"	d	file:
LEARNED	spec_procs.c	228;"	d	file:
LEARNED_LEVEL	spec_procs.c	220;"	d	file:
LFLOW_OFF	telnet.h	153;"	d
LFLOW_ON	telnet.h	154;"	d
LFLOW_RESTART_ANY	telnet.h	155;"	d
LFLOW_RESTART_XON	telnet.h	156;"	d
LIB_ETC	db.h	30;"	d
LIB_ETC	db.h	42;"	d
LIB_ETC_BOARD	db.h	48;"	d
LIB_HOUSE	db.h	34;"	d
LIB_HOUSE	db.h	46;"	d
LIB_MISC	db.h	29;"	d
LIB_MISC	db.h	41;"	d
LIB_PLRALIAS	db.h	33;"	d
LIB_PLRALIAS	db.h	45;"	d
LIB_PLROBJS	db.h	32;"	d
LIB_PLROBJS	db.h	44;"	d
LIB_PLRTEXT	db.h	31;"	d
LIB_PLRTEXT	db.h	43;"	d
LIB_PLRVARS	db.h	35;"	d
LIB_PLRVARS	db.h	47;"	d
LIB_TEXT	db.h	27;"	d
LIB_TEXT	db.h	39;"	d
LIB_TEXT_HELP	db.h	28;"	d
LIB_TEXT_HELP	db.h	40;"	d
LIB_WORLD	db.h	26;"	d
LIB_WORLD	db.h	38;"	d
LIGHT_OK	utils.h	685;"	d
LIMIT	genolc.h	64;"	d
LIQ_ALE	structs.h	781;"	d
LIQ_BEER	structs.h	779;"	d
LIQ_BLOOD	structs.h	791;"	d
LIQ_CHAMPAGNE	structs.h	794;"	d
LIQ_CLEARWATER	structs.h	793;"	d
LIQ_COFFE	structs.h	790;"	d
LIQ_DARKALE	structs.h	782;"	d
LIQ_FIREBRT	structs.h	785;"	d
LIQ_LEMONADE	structs.h	784;"	d
LIQ_LOCALSPC	structs.h	786;"	d
LIQ_MILK	structs.h	788;"	d
LIQ_SALTWATER	structs.h	792;"	d
LIQ_SLIME	structs.h	787;"	d
LIQ_TEA	structs.h	789;"	d
LIQ_WATER	structs.h	778;"	d
LIQ_WHISKY	structs.h	783;"	d
LIQ_WINE	structs.h	780;"	d
LIST_MOB	oasis.h	74;"	d
LIST_OBJ	oasis.h	75;"	d
LIST_PRODUCE	shop.h	70;"	d
LIST_ROOM	oasis.h	76;"	d
LIST_ROOM	shop.h	72;"	d
LIST_TRADE	shop.h	71;"	d
LM_FORWARDMASK	telnet.h	163;"	d
LM_MODE	telnet.h	162;"	d
LM_SLC	telnet.h	164;"	d
LOCALJAIL	spec_procs.c	2009;"	d	file:
LOCK_DOOR	act.movement.c	1010;"	d	file:
LOC_INVENTORY	objsave.c	31;"	d	file:
LOGNAME	config.c	/^const char *LOGNAME = NULL;$/;"	v
LOWER	utils.h	192;"	d
LR_FAIL	utils.h	404;"	d
LR_FAIL_MAX	utils.h	405;"	d
LVL_ANGEL	structs.h	949;"	d
LVL_BUILDER	dg_triggers.c	34;"	d	file:
LVL_BUILDER	genolc.h	25;"	d
LVL_BUILDER	genolc.h	29;"	d
LVL_CHAMP	structs.h	951;"	d
LVL_CLAN_GOD	clan.h	15;"	d
LVL_CLAN_MIN	clan.h	14;"	d
LVL_ETRNL1	structs.h	960;"	d
LVL_ETRNL2	structs.h	959;"	d
LVL_ETRNL3	structs.h	958;"	d
LVL_ETRNL4	structs.h	957;"	d
LVL_ETRNL5	structs.h	956;"	d
LVL_ETRNL6	structs.h	955;"	d
LVL_ETRNL7	structs.h	954;"	d
LVL_ETRNL8	structs.h	953;"	d
LVL_ETRNL9	structs.h	952;"	d
LVL_FREEZE	structs.h	965;"	d
LVL_GOD	structs.h	947;"	d
LVL_GRGOD	structs.h	946;"	d
LVL_GRIMPL	structs.h	944;"	d
LVL_IMMNET	act.wizard.c	3238;"	d	file:
LVL_IMMORT	structs.h	950;"	d
LVL_IMPL	structs.h	945;"	d
LVL_ISNOT_GOD	structs.h	967;"	d
LVL_IS_GOD	structs.h	966;"	d
LVL_LEGEND	structs.h	948;"	d
LVL_LOAD	genolc.h	26;"	d
LVL_LOAD	genolc.h	30;"	d
LVL_NEWBIE	structs.h	962;"	d
LVL_OWNER	structs.h	943;"	d
LVL_ZRESET	genolc.h	27;"	d
LVL_ZRESET	genolc.h	31;"	d
MAGIC_NUMBER	structs.h	973;"	d
MAG_AFFECTS	spells.h	27;"	d
MAG_ALTER_OBJS	spells.h	30;"	d
MAG_AREAS	spells.h	33;"	d
MAG_CREATIONS	spells.h	35;"	d
MAG_DAMAGE	spells.h	26;"	d
MAG_GROUPS	spells.h	31;"	d
MAG_MANUAL	spells.h	36;"	d
MAG_MASSES	spells.h	32;"	d
MAG_POINTS	spells.h	29;"	d
MAG_SUMMONS	spells.h	34;"	d
MAG_UNAFFECTS	spells.h	28;"	d
MAIL_FILE	db.h	111;"	d
MAIL_FROM_AUCTION	mail.h	33;"	d
MAIL_FROM_REPORT	mail.h	32;"	d
MANUAL_SPELL	spells.h	350;"	d
MARK	graph.c	64;"	d	file:
MAX	utils.c	/^int MAX(int a, int b)$/;"	f
MAX	utils.h	86;"	d
MAXGAIN	spec_procs.c	230;"	d	file:
MAX_AFFECT	structs.h	1007;"	d
MAX_BAG_ROWS	objsave.c	32;"	d	file:
MAX_BOARD_MESSAGES	boards.h	12;"	d
MAX_BURGLED_ROOMS	structs.h	2228;"	d
MAX_CLANS	clan.h	11;"	d
MAX_CMD_LENGTH	dg_olc.h	18;"	d
MAX_COLORS	colour.h	39;"	d
MAX_DISPAIR_MESSAGES	act.movement.c	1898;"	d	file:
MAX_ENHANCEMENT_VALUES	structs.h	842;"	d
MAX_EXIT_DESC	oasis.h	87;"	d
MAX_EXTRA_DESC	oasis.h	88;"	d
MAX_FRIENDS	structs.h	881;"	d
MAX_GAME_BETS	structs.h	876;"	d
MAX_GUESTS	house.h	2;"	d
MAX_GUN_TYPES	utils.h	862;"	d
MAX_HINTS	structs.h	879;"	d
MAX_HOUSES	house.h	1;"	d
MAX_IGNORE	structs.h	878;"	d
MAX_INPUT_LENGTH	structs.h	997;"	d
MAX_INVALID_NAMES	ban.c	301;"	d	file:
MAX_MAIL_FROM	mail.h	34;"	d
MAX_MAIL_SIZE	mail.h	26;"	d
MAX_MESSAGES	structs.h	999;"	d
MAX_MESSAGE_LENGTH	boards.h	13;"	d
MAX_MOB_DESC	oasis.h	89;"	d
MAX_MOB_DESC	olc.h	18;"	d
MAX_MOB_NAME	oasis.h	84;"	d
MAX_MOB_NAME	olc.h	15;"	d
MAX_NAME_LENGTH	structs.h	1000;"	d
MAX_NOTE_LENGTH	act.comm.c	330;"	d	file:
MAX_NUM_ENHANCEMENTS	structs.h	841;"	d
MAX_OBJ_AFFECT	structs.h	1008;"	d
MAX_OBJ_DESC	oasis.h	90;"	d
MAX_OBJ_DESC	olc.h	19;"	d
MAX_OBJ_NAME	oasis.h	85;"	d
MAX_OBJ_NAME	olc.h	16;"	d
MAX_OPER	shop.h	100;"	d
MAX_OUTSIDE_BANK	shop.h	145;"	d
MAX_PER_PRAC	spec_procs.c	221;"	d	file:
MAX_PROD	shop.h	50;"	d
MAX_PROMPT_LENGTH	structs.h	1020;"	d
MAX_PROTECT_GEAR	structs.h	622;"	d
MAX_PWD_LENGTH	structs.h	1001;"	d
MAX_QUEST_ITEMS	structs.h	877;"	d
MAX_RACES	structs.h	272;"	d
MAX_RAW_INPUT_LENGTH	structs.h	998;"	d
MAX_REWARD_TYPE	spec_procs.c	3882;"	d	file:
MAX_ROOM_DESC	oasis.h	86;"	d
MAX_ROOM_DESC	olc.h	17;"	d
MAX_ROOM_NAME	oasis.h	83;"	d
MAX_ROOM_NAME	olc.h	14;"	d
MAX_SCRIPT_DEPTH	dg_scripts.h	83;"	d
MAX_SHOP_OBJ	shop.h	52;"	d
MAX_SKILLS	structs.h	1006;"	d
MAX_SKILL_ABIL	structs.h	1009;"	d
MAX_SOCK_BUF	structs.h	1019;"	d
MAX_SPECIALS	structs.h	356;"	d
MAX_SPELLS	spells.h	132;"	d
MAX_SPELL_AFFECTS	magic.c	564;"	d	file:
MAX_STAT_VAL	structs.h	82;"	d
MAX_STAT_VALUE	utils.h	379;"	d
MAX_STRING_LENGTH	structs.h	996;"	d
MAX_TIMERS	structs.h	1015;"	d
MAX_TITLE_LENGTH	structs.h	1002;"	d
MAX_TONGUE	structs.h	1005;"	d
MAX_TRADE	shop.h	49;"	d
MAX_TRIGGER_LENGTH	oasis.h	91;"	d
MAX_ZONE_HINTS	structs.h	880;"	d
MEDIT_AC	oasis.h	280;"	d
MEDIT_ADD_HP	oasis.h	279;"	d
MEDIT_AFF_FLAGS	oasis.h	264;"	d
MEDIT_ALIAS	oasis.h	259;"	d
MEDIT_ALIGNMENT	oasis.h	287;"	d
MEDIT_ATTACK	oasis.h	285;"	d
MEDIT_CHANGE_MPROG	oasis.h	290;"	d
MEDIT_CLASS	oasis.h	296;"	d
MEDIT_CONFIRM_BALANCE	oasis.h	266;"	d
MEDIT_CONFIRM_SAVESTRING	oasis.h	265;"	d
MEDIT_DAMROLL	oasis.h	274;"	d
MEDIT_DEFAULT_POS	oasis.h	284;"	d
MEDIT_D_DESC	oasis.h	262;"	d
MEDIT_EXP	oasis.h	281;"	d
MEDIT_GOLD	oasis.h	282;"	d
MEDIT_HITROLL	oasis.h	273;"	d
MEDIT_LEVEL	oasis.h	286;"	d
MEDIT_L_DESC	oasis.h	261;"	d
MEDIT_MAIN_MENU	oasis.h	258;"	d
MEDIT_MPROG	oasis.h	289;"	d
MEDIT_MPROG_ARGS	oasis.h	292;"	d
MEDIT_MPROG_COMLIST	oasis.h	291;"	d
MEDIT_MPROG_TYPE	oasis.h	293;"	d
MEDIT_NDD	oasis.h	275;"	d
MEDIT_NPC_FLAGS	oasis.h	263;"	d
MEDIT_NUMERICAL_RESPONSE	oasis.h	271;"	d
MEDIT_NUM_HP_DICE	oasis.h	277;"	d
MEDIT_POS	oasis.h	283;"	d
MEDIT_PURGE_MPROG	oasis.h	294;"	d
MEDIT_SDD	oasis.h	276;"	d
MEDIT_SEX	oasis.h	272;"	d
MEDIT_SIZE_HP_DICE	oasis.h	278;"	d
MEDIT_S_DESC	oasis.h	260;"	d
MEMORY	utils.h	578;"	d
MENU	config.c	/^const char *MENU =$/;"	v
MESS_FILE	db.h	103;"	d
MIN	utils.c	/^int MIN(int a, int b)$/;"	f
MIN	utils.h	90;"	d
MINDEX_FILE	db.h	75;"	d
MINGAIN	spec_procs.c	229;"	d	file:
MINMAX	utils.c	/^int MINMAX(int min, int max, int val) {$/;"	f
MIN_MAIL_LEVEL	mail.h	20;"	d
MIN_OUTSIDE_BANK	shop.h	144;"	d
MIN_PER_PRAC	spec_procs.c	222;"	d	file:
MISC	act.wizard.c	3937;"	d	file:
MOBOBJ_ID_BASE	dg_scripts.h	231;"	d
MOBTrigger	comm.c	/^bool MOBTrigger = TRUE;         \/* for MOBProgs *\/$/;"	v
MOB_2ND_ATTACK	structs.h	427;"	d
MOB_3RD_ATTACK	structs.h	428;"	d
MOB_AERIALSERVANT	magic.c	1502;"	d	file:
MOB_AGGRESSIVE	structs.h	412;"	d
MOB_AGGR_EVIL	structs.h	415;"	d
MOB_AGGR_GOOD	structs.h	416;"	d
MOB_AGGR_NEUTRAL	structs.h	417;"	d
MOB_AGGR_TO_ALIGN	mobact.c	38;"	d	file:
MOB_AWARE	structs.h	411;"	d
MOB_CLONE	utils.h	148;"	d
MOB_ELEMENTAL_BASE	magic.c	1501;"	d	file:
MOB_FLAGGED	utils.h	294;"	d
MOB_FLAGS	utils.h	261;"	d
MOB_GATE_I	magic.c	1492;"	d	file:
MOB_GATE_II	magic.c	1493;"	d	file:
MOB_GATE_III	magic.c	1494;"	d	file:
MOB_HELPER	structs.h	419;"	d
MOB_INTELLIGENT	structs.h	426;"	d
MOB_ISNPC	structs.h	410;"	d
MOB_MEMORY	structs.h	418;"	d
MOB_MONSUM_I	magic.c	1489;"	d	file:
MOB_MONSUM_II	magic.c	1490;"	d	file:
MOB_MONSUM_III	magic.c	1491;"	d	file:
MOB_MOUNTABLE	structs.h	430;"	d
MOB_NEW	act.build.c	129;"	d	file:
MOB_NOBASH	structs.h	423;"	d
MOB_NOBLIND	structs.h	424;"	d
MOB_NOCHARM	structs.h	420;"	d
MOB_NOKILL	structs.h	431;"	d
MOB_NOSLEEP	structs.h	422;"	d
MOB_NOSUMMON	structs.h	421;"	d
MOB_NO_STEAL	structs.h	429;"	d
MOB_OR_IMPL	dg_mobcmd.c	74;"	d	file:
MOB_PREFIX	db.h	77;"	d
MOB_QUEST	structs.h	425;"	d
MOB_SCAVENGER	structs.h	409;"	d
MOB_SENTINEL	structs.h	408;"	d
MOB_SPEC	structs.h	407;"	d
MOB_STAY_ZONE	structs.h	413;"	d
MOB_TRIGGER	dg_scripts.h	16;"	d
MOB_WIMPY	structs.h	414;"	d
MOB_ZOMBIE	utils.h	149;"	d
MODE_ACK	telnet.h	168;"	d
MODE_ECHO	telnet.h	176;"	d
MODE_EDIT	telnet.h	166;"	d
MODE_FLOW	telnet.h	175;"	d
MODE_FORCE	telnet.h	179;"	d
MODE_INBIN	telnet.h	177;"	d
MODE_LIT_ECHO	telnet.h	170;"	d
MODE_MASK	telnet.h	172;"	d
MODE_OUTBIN	telnet.h	178;"	d
MODE_SOFT_TAB	telnet.h	169;"	d
MODE_TRAPSIG	telnet.h	167;"	d
MOON_1ST_QTR	structs.h	902;"	d
MOON_2ND_3RD_QTR	structs.h	906;"	d
MOON_2ND_HALF	structs.h	907;"	d
MOON_3RD_QTR	structs.h	904;"	d
MOON_FINAL_QTR	structs.h	908;"	d
MOON_FULL	structs.h	905;"	d
MOON_HALF	structs.h	903;"	d
MOON_NONE	structs.h	901;"	d
MORT_CAN_SEE	utils.h	695;"	d
MORT_CAN_SEE_OBJ	utils.h	730;"	d
MOTD_FILE	db.h	87;"	d
MOUNTING	utils.h	473;"	d
MOUNTING_OBJ	utils.h	474;"	d
MPROG_ACT_LIST	structs.h	/^typedef struct mob_prog_act_list MPROG_ACT_LIST;$/;"	t
MPROG_DATA	structs.h	/^typedef struct mob_prog_data MPROG_DATA;$/;"	t
MSG_CANT_KILL_KEEPER	shop.h	155;"	d
MSG_CLOSED_FOR_DAY	shop.h	149;"	d
MSG_HEADING	boards.h	44;"	d
MSG_LEVEL	boards.h	46;"	d
MSG_NOT_OPEN_YET	shop.h	147;"	d
MSG_NOT_REOPEN_YET	shop.h	148;"	d
MSG_NO_SEE_CHAR	shop.h	151;"	d
MSG_NO_SELL_ALIGN	shop.h	152;"	d
MSG_NO_SELL_CLASS	shop.h	153;"	d
MSG_NO_STEAL_HERE	shop.h	150;"	d
MSG_NO_USED_WANDSTAFF	shop.h	154;"	d
MSG_SLOTNUM	boards.h	45;"	d
MTRIG_ACT	dg_scripts.h	30;"	d
MTRIG_BRIBE	dg_scripts.h	38;"	d
MTRIG_COMMAND	dg_scripts.h	28;"	d
MTRIG_DEATH	dg_scripts.h	31;"	d
MTRIG_ENTRY	dg_scripts.h	34;"	d
MTRIG_FIGHT	dg_scripts.h	36;"	d
MTRIG_GLOBAL	dg_scripts.h	26;"	d
MTRIG_GREET	dg_scripts.h	32;"	d
MTRIG_GREET_ALL	dg_scripts.h	33;"	d
MTRIG_HITPRCNT	dg_scripts.h	37;"	d
MTRIG_LOAD	dg_scripts.h	39;"	d
MTRIG_MEMORY	dg_scripts.h	40;"	d
MTRIG_RANDOM	dg_scripts.h	27;"	d
MTRIG_RECEIVE	dg_scripts.h	35;"	d
MTRIG_SPEECH	dg_scripts.h	29;"	d
MYCMD	zedit.c	37;"	d	file:
MY_VALID_EDGE	graph.c	/^int MY_VALID_EDGE(sh_int room, int dir ) {$/;"	f
NEED_CLOSED	act.movement.c	983;"	d	file:
NEED_LOCKED	act.movement.c	985;"	d	file:
NEED_OPEN	act.movement.c	982;"	d	file:
NEED_UNLOCKED	act.movement.c	984;"	d	file:
NEWBIE_FILE	db.h	108;"	d
NEWEST_AT_TOP	boards.c	61;"	d	file:
NEWS_FILE	db.h	86;"	d
NEW_ENV_VALUE	telnet.h	238;"	d
NEW_ENV_VAR	telnet.h	237;"	d
NEW_MSG_INDEX	boards.h	43;"	d
NO	config.c	22;"	d	file:
NOBODY	structs.h	48;"	d
NOEFFECT	config.c	/^const char *NOEFFECT="Nothing seems to happen.\\r\\n";$/;"	v
NOP	telnet.h	56;"	d
NOPERSON	config.c	/^const char *NOPERSON="No-one by that name here.\\r\\n";$/;"	v
NORTH	structs.h	74;"	d
NOTHING	structs.h	47;"	d
NOTRADE_CLERIC	shop.h	126;"	d
NOTRADE_EVIL	shop.h	123;"	d
NOTRADE_GOOD	shop.h	122;"	d
NOTRADE_MAGIC_USER	shop.h	125;"	d
NOTRADE_NEUTRAL	shop.h	124;"	d
NOTRADE_THIEF	shop.h	127;"	d
NOTRADE_WARRIOR	shop.h	128;"	d
NOWHERE	structs.h	46;"	d
NO_GAME	casino.h	2;"	d
NPC	act.wizard.c	3934;"	d	file:
NRM	utils.h	154;"	d
NSLC	telnet.h	200;"	d
NTELOPTS	telnet.h	125;"	d
NULL	utils.h	830;"	d
NUMBER	act.wizard.c	3939;"	d	file:
NUM_AFF_FLAGS	oasis.h	39;"	d
NUM_APPLIES	oasis.h	45;"	d
NUM_APPLYS	structs.h	768;"	d
NUM_ATTACK_TYPES	oasis.h	40;"	d
NUM_BATTERY_TYPES	structs.h	678;"	d
NUM_BUG_TYPES	reports.h	27;"	d
NUM_BURGLE_TYPES	oasis.h	36;"	d
NUM_CLASSES	structs.h	293;"	d
NUM_CMD_TYPES	interpreter.h	108;"	d
NUM_CO	clan.h	97;"	d
NUM_COLOUR_SETTINGS	structs.h	1011;"	d
NUM_CP	clan.h	51;"	d
NUM_EVENTS	structs.h	2088;"	d
NUM_GENDERS	oasis.h	50;"	d
NUM_ITEM_FLAGS	oasis.h	43;"	d
NUM_ITEM_TYPES	oasis.h	42;"	d
NUM_ITEM_WEARS	oasis.h	44;"	d
NUM_LIQ_TYPES	oasis.h	46;"	d
NUM_MOB_ATTRIBUTES	balance.h	58;"	d
NUM_MOB_FLAGS	oasis.h	38;"	d
NUM_NPC_CLASSES	structs.h	305;"	d
NUM_OBJ_ATTRIBUTES	balance.h	38;"	d
NUM_OBJ_VAL_POSITIONS	structs.h	1114;"	d
NUM_OFFENCES	clan.h	67;"	d
NUM_OF_BOARDS	boards.h	11;"	d
NUM_OF_DIRS	structs.h	972;"	d
NUM_PLAYERS	db.c	/^long NUM_PLAYERS = 0;		\/* Number of players in DB	 *\/$/;"	v
NUM_POSITIONS	oasis.h	47;"	d
NUM_PROGS	oasis.h	58;"	d
NUM_PUNISHES	structs.h	497;"	d
NUM_PWTS	structs.h	404;"	d
NUM_REPORT_STATES	reports.h	12;"	d
NUM_REPORT_TYPES	reports.h	28;"	d
NUM_RESERVED_DESCS	comm.h	11;"	d
NUM_ROOM_FLAGS	oasis.h	29;"	d
NUM_ROOM_SECTORS_ATMOS	oasis.h	32;"	d
NUM_ROOM_SECTORS_BASE	oasis.h	31;"	d
NUM_ROOM_SECTORS_ENVIRO	oasis.h	35;"	d
NUM_ROOM_SECTORS_GRAV	oasis.h	34;"	d
NUM_ROOM_SECTORS_TEMP	oasis.h	33;"	d
NUM_SCORE_SETTINGS	structs.h	174;"	d
NUM_SHOP_FLAGS	oasis.h	51;"	d
NUM_SORT_TYPES	structs.h	127;"	d
NUM_SPELLS	oasis.h	48;"	d
NUM_SPELLS	spells.h	129;"	d
NUM_STAT_CREATION_ROLLS	class.c	514;"	d	file:
NUM_TOKENS	interpreter.c	1449;"	d	file:
NUM_TRADERS	oasis.h	52;"	d
NUM_TRAPS	structs.h	800;"	d
NUM_TRIG_TYPE_FLAGS	dg_olc.h	22;"	d
NUM_WEARS	structs.h	615;"	d
NUM_WORLDS	structs.h	1012;"	d
NUM_WORLDS	structs.h	124;"	d
NUM_ZONE_FLAGS	oasis.h	30;"	d
NonExistantObject	corpses.h	/^    class NonExistantObject {};$/;"	c	class:Contain
NonExistantObject	corpses.h	/^    class NonExistantObject {};$/;"	c	class:Corpse
OASIS_VERSION	oasis.h	15;"	d
OBJECT_CURSED	shop.h	66;"	d
OBJECT_DEAD	shop.h	62;"	d
OBJECT_NOTOK	shop.h	63;"	d
OBJECT_NOVAL	shop.h	65;"	d
OBJECT_OK	shop.h	64;"	d
OBJN	utils.h	756;"	d
OBJS	utils.h	746;"	d
OBJVAL_FLAGGED	utils.h	307;"	d
OBJWEAR_FLAGGED	utils.h	308;"	d
OBJ_FLAGGED	utils.h	309;"	d
OBJ_IS_AMMO	utils.h	872;"	d
OBJ_IS_GUN	utils.h	868;"	d
OBJ_NEW	act.build.c	128;"	d	file:
OBJ_PREFIX	db.h	78;"	d
OBJ_RIDDEN	utils.h	631;"	d
OBJ_TIMERS	utils.h	259;"	d
OBJ_TRIGGER	dg_scripts.h	17;"	d
OCMD	dg_objcmd.c	/^OCMD(do_dgoload)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_odamage) {$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_odoor)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_oecho)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_oexp)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_oforce)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_opurge)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_osend)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_osetval)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_oteleport)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_otimer)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_otransform)$/;"	f
OCMD	dg_objcmd.c	/^OCMD(do_ozoneecho)$/;"	f
OCMD	dg_objcmd.c	37;"	d	file:
OCMD_EQUIP	dg_scripts.h	68;"	d
OCMD_INVEN	dg_scripts.h	69;"	d
OCMD_ROOM	dg_scripts.h	70;"	d
OEDIT_ACTDESC	oasis.h	179;"	d
OEDIT_APPLY	oasis.h	191;"	d
OEDIT_APPLYMOD	oasis.h	192;"	d
OEDIT_CONFIRM_BALANCE	oasis.h	203;"	d
OEDIT_CONFIRM_SAVEDB	oasis.h	194;"	d
OEDIT_CONFIRM_SAVESTRING	oasis.h	195;"	d
OEDIT_COST	oasis.h	184;"	d
OEDIT_COSTPERDAY	oasis.h	185;"	d
OEDIT_DAMAGE	oasis.h	202;"	d
OEDIT_EDIT_NAMELIST	oasis.h	176;"	d
OEDIT_EXTRADESC_DESCRIPTION	oasis.h	197;"	d
OEDIT_EXTRADESC_KEY	oasis.h	193;"	d
OEDIT_EXTRADESC_MENU	oasis.h	198;"	d
OEDIT_EXTRAS	oasis.h	181;"	d
OEDIT_LEVEL	oasis.h	199;"	d
OEDIT_LONGDESC	oasis.h	178;"	d
OEDIT_MAIN_MENU	oasis.h	175;"	d
OEDIT_MAXDAMAGE	oasis.h	201;"	d
OEDIT_PERM	oasis.h	200;"	d
OEDIT_PROMPT_APPLY	oasis.h	196;"	d
OEDIT_SHORTDESC	oasis.h	177;"	d
OEDIT_TIMER	oasis.h	186;"	d
OEDIT_TYPE	oasis.h	180;"	d
OEDIT_VALUE_1	oasis.h	187;"	d
OEDIT_VALUE_2	oasis.h	188;"	d
OEDIT_VALUE_3	oasis.h	189;"	d
OEDIT_VALUE_4	oasis.h	190;"	d
OEDIT_WEAR	oasis.h	182;"	d
OEDIT_WEIGHT	oasis.h	183;"	d
OFF	utils.h	152;"	d
OFF_PKILL	clan.h	66;"	d
OK	config.c	/^const char *OK="Okay.\\r\\n";$/;"	v
OLC	act.build.c	127;"	d	file:
OLC	oasis.h	140;"	d
OLC_ALIASES	olc.h	11;"	d
OLC_BALBITS	oasis.h	158;"	d
OLC_CMD	zedit.c	38;"	d	file:
OLC_COPY	olc.h	8;"	d
OLC_DESC	oasis.h	150;"	d
OLC_DESC	olc.h	10;"	d
OLC_EXIT	oasis.h	163;"	d
OLC_ITEM_TYPE	dg_olc.h	48;"	d
OLC_MOB	oasis.h	148;"	d
OLC_MOB	olc.h	5;"	d
OLC_MODE	oasis.h	141;"	d
OLC_MPROG	oasis.h	152;"	d
OLC_MPROGL	oasis.h	153;"	d
OLC_MTOTAL	oasis.h	154;"	d
OLC_NAME	olc.h	9;"	d
OLC_NUM	oasis.h	142;"	d
OLC_OBJ	oasis.h	146;"	d
OLC_OBJ	olc.h	6;"	d
OLC_REPEAT	olc.h	3;"	d
OLC_ROOM	oasis.h	145;"	d
OLC_ROOM	olc.h	4;"	d
OLC_SCRIPT	dg_olc.h	47;"	d
OLC_SCRIPT_EDIT	dg_olc.h	40;"	d
OLC_SCRIPT_EDIT_MODE	dg_olc.h	46;"	d
OLC_SET	olc.h	1;"	d
OLC_SHOP	oasis.h	149;"	d
OLC_SHOW	olc.h	2;"	d
OLC_STORAGE	oasis.h	157;"	d
OLC_TRIG	oasis.h	156;"	d
OLC_USAGE	olc.c	34;"	d	file:
OLC_VAL	oasis.h	143;"	d
OLC_ZNUM	oasis.h	144;"	d
OLC_ZONE	oasis.h	147;"	d
OLD_ENV_VALUE	telnet.h	236;"	d
OLD_ENV_VAR	telnet.h	235;"	d
ONOFF	utils.h	190;"	d
OPEN_DOOR	act.movement.c	1007;"	d	file:
OPEN_MAX	comm.c	568;"	d	file:
OPER_AND	shop.h	98;"	d
OPER_CLOSE_PAREN	shop.h	96;"	d
OPER_NOT	shop.h	99;"	d
OPER_OPEN_PAREN	shop.h	95;"	d
OPER_OR	shop.h	97;"	d
OPT_USEC	structs.h	975;"	d
OTRIG_COMMAND	dg_scripts.h	45;"	d
OTRIG_DROP	dg_scripts.h	49;"	d
OTRIG_GET	dg_scripts.h	48;"	d
OTRIG_GIVE	dg_scripts.h	50;"	d
OTRIG_GLOBAL	dg_scripts.h	43;"	d
OTRIG_LOAD	dg_scripts.h	54;"	d
OTRIG_RANDOM	dg_scripts.h	44;"	d
OTRIG_REMOVE	dg_scripts.h	52;"	d
OTRIG_TIMER	dg_scripts.h	47;"	d
OTRIG_WEAR	dg_scripts.h	51;"	d
OUTSIDE	utils.h	818;"	d
O_NONBLOCK	comm.c	2447;"	d	file:
ObjMaterialClass	structs.h	/^    ObjMaterialClass(int aVnum, int aNumber) {$/;"	f	class:ObjMaterialClass
ObjMaterialClass	structs.h	/^    ObjMaterialClass(int aVnum, int aNumber, int sFlag, int fFlag) {$/;"	f	class:ObjMaterialClass
ObjMaterialClass	structs.h	/^class ObjMaterialClass {$/;"	c
ObjProductClass	structs.h	/^    ObjProductClass(int aVnum, int aSkill, int aLevel) {$/;"	f	class:ObjProductClass
ObjProductClass	structs.h	/^class ObjProductClass {$/;"	c
Obj_from_store	objsave.c	/^struct obj_data *Obj_from_store(struct obj_file_elem object, int *location)$/;"	f
Obj_to_file_elem	objsave.c	/^void Obj_to_file_elem(struct obj_data *obj, struct obj_file_elem *dest, $/;"	f
Obj_to_store	objsave.c	/^int Obj_to_store(struct obj_data * obj, FILE * fl, int location)$/;"	f
PADDING0	structs.h	/^   byte PADDING0;		\/* used to be spells_to_learn		*\/$/;"	m	struct:player_special_data_saved
PARSE_DELETE	improved-edit.h	22;"	d
PARSE_EDIT	improved-edit.h	26;"	d
PARSE_FORMAT	improved-edit.h	19;"	d
PARSE_HELP	improved-edit.h	21;"	d
PARSE_INSERT	improved-edit.h	23;"	d
PARSE_LIST_NORM	improved-edit.h	24;"	d
PARSE_LIST_NUM	improved-edit.h	25;"	d
PARSE_REPLACE	improved-edit.h	20;"	d
PASSES_PER_SEC	structs.h	976;"	d
PAUSE_FILE	db.h	62;"	d
PAUSE_FILE	db.h	66;"	d
PAUSE_FILE	db.h	70;"	d
PC	act.wizard.c	3933;"	d	file:
PEACEROOM	config.c	/^const char *PEACEROOM="This room just has such a peaceful, easy feeling...\\r\\n";$/;"	v
PERS	utils.h	744;"	d
PISS_FACTOR	act.comm.c	60;"	d	file:
PLAYER_FILE	db.h	110;"	d
PLR_CRASH	structs.h	379;"	d
PLR_CRYO	structs.h	388;"	d
PLR_DELETED	structs.h	383;"	d
PLR_DONTSET	structs.h	376;"	d
PLR_FLAGGED	utils.h	295;"	d
PLR_FLAGS	utils.h	262;"	d
PLR_FROZEN	structs.h	375;"	d
PLR_GODMAIL	structs.h	391;"	d
PLR_INVSTART	structs.h	387;"	d
PLR_KILLER	structs.h	373;"	d
PLR_LAGGED	structs.h	390;"	d
PLR_LOADROOM	structs.h	384;"	d
PLR_MAILING	structs.h	378;"	d
PLR_MOUNTED	structs.h	392;"	d
PLR_NODELETE	structs.h	386;"	d
PLR_NOIGNORE	structs.h	389;"	d
PLR_NOINFO	structs.h	393;"	d
PLR_NOSHOUT	structs.h	381;"	d
PLR_NOTITLE	structs.h	382;"	d
PLR_NOWIZLIST	structs.h	385;"	d
PLR_ODDWRITE	structs.h	395;"	d
PLR_REPORTING	structs.h	394;"	d
PLR_SITEOK	structs.h	380;"	d
PLR_THIEF	structs.h	374;"	d
PLR_TOG_CHK	utils.h	318;"	d
PLR_WRITING	structs.h	377;"	d
POLICIES_FILE	db.h	95;"	d
POOFIN	utils.h	503;"	d
POOFOUT	utils.h	504;"	d
POOF_LENGTH	structs.h	1010;"	d
POSIX	sysdep.h	135;"	d
POSIX	sysdep.h	142;"	d
POSIX	sysdep.h	147;"	d
POSIX_NONBLOCK_BROKEN	sysdep.h	151;"	d
POS_DEAD	structs.h	359;"	d
POS_FIGHTING	structs.h	366;"	d
POS_INCAP	structs.h	361;"	d
POS_MORTALLYW	structs.h	360;"	d
POS_RESTING	structs.h	364;"	d
POS_SITTING	structs.h	365;"	d
POS_SLEEPING	structs.h	363;"	d
POS_STANDING	structs.h	367;"	d
POS_STUNNED	structs.h	362;"	d
PRAC_TYPE	spec_procs.c	223;"	d	file:
PRF_AFK	structs.h	459;"	d
PRF_AUTOEXIT	structs.h	442;"	d
PRF_BRIEF	structs.h	435;"	d
PRF_CLS	structs.h	457;"	d
PRF_COLOR_1	structs.h	448;"	d
PRF_COLOR_2	structs.h	449;"	d
PRF_COMPACT	structs.h	436;"	d
PRF_DEAF	structs.h	437;"	d
PRF_DISPALIGN	structs.h	465;"	d
PRF_DISPEXP	structs.h	464;"	d
PRF_DISPHP	structs.h	439;"	d
PRF_DISPMANA	structs.h	440;"	d
PRF_DISPMOVE	structs.h	441;"	d
PRF_FLAGGED	utils.h	297;"	d
PRF_FLAGS	utils.h	263;"	d
PRF_HOLYLIGHT	structs.h	447;"	d
PRF_LOG1	structs.h	451;"	d
PRF_LOG2	structs.h	452;"	d
PRF_MORTALK	structs.h	463;"	d
PRF_NOAUCT	structs.h	453;"	d
PRF_NOGOSS	structs.h	454;"	d
PRF_NOGRATZ	structs.h	455;"	d
PRF_NOHASSLE	structs.h	443;"	d
PRF_NOIMMNET	structs.h	458;"	d
PRF_NOINFO	structs.h	466;"	d
PRF_NOREPEAT	structs.h	446;"	d
PRF_NOTELL	structs.h	438;"	d
PRF_NOWIZ	structs.h	450;"	d
PRF_QUEST	structs.h	444;"	d
PRF_ROOMFLAGS	structs.h	456;"	d
PRF_SUMMONABLE	structs.h	445;"	d
PRF_TAG	structs.h	462;"	d
PRF_TOG_CHK	act.other.c	3312;"	d	file:
PRF_TOG_CHK	utils.h	319;"	d
PRF_VAMPIRE	structs.h	461;"	d
PRF_WOLF	structs.h	460;"	d
PRIMAL_SP_FILE	db.h	114;"	d
PROMPT_HEALTHOMETER	structs.h	133;"	d
PROMPT_PERCENTAGE	structs.h	134;"	d
PROMPT_STATS	structs.h	135;"	d
PROTECT_LEVEL	structs.h	145;"	d
PULSES_PER_MUD_HOUR	dg_scripts.c	26;"	d	file:
PULSE_CASINO	structs.h	983;"	d
PULSE_DG_EVENT	dg_event.h	4;"	d
PULSE_DG_SCRIPT	dg_scripts.h	80;"	d
PULSE_HINTS	structs.h	986;"	d
PULSE_MOBILE	structs.h	980;"	d
PULSE_VIOLENCE	structs.h	981;"	d
PULSE_ZONE	structs.h	979;"	d
PULSE_ZONE_HINTS	structs.h	989;"	d
PUN_AGGRAVATE	structs.h	496;"	d
PUN_FLAGGED	utils.h	300;"	d
PUN_FLAGS	utils.h	265;"	d
PUN_FREEZE	structs.h	490;"	d
PUN_HOURS	utils.h	324;"	d
PUN_LAG	structs.h	493;"	d
PUN_LOWEXP	structs.h	494;"	d
PUN_LOWREGEN	structs.h	495;"	d
PUN_MUTE	structs.h	491;"	d
PUN_NOTITLE	structs.h	492;"	d
PUN_TOG_CHK	utils.h	323;"	d
PWT_CLANDESC	structs.h	399;"	d
PWT_MOB	structs.h	401;"	d
PWT_REPORT_LONGDESC	structs.h	402;"	d
PWT_ROOM	structs.h	400;"	d
PWT_UNDEFINED	structs.h	398;"	d
QBLU	screen.h	84;"	d
QCYN	screen.h	86;"	d
QGRN	screen.h	82;"	d
QMAG	screen.h	85;"	d
QNRM	screen.h	80;"	d
QRED	screen.h	81;"	d
QUEST_ITEM_HUNT	quest.h	5;"	d
QUEST_TRIVIA	quest.h	6;"	d
QUEST_UNKNOWN	quest.h	4;"	d
QWHT	screen.h	87;"	d
QYEL	screen.h	83;"	d
RACE_ABBR	utils.h	771;"	d
RACE_DEVA	structs.h	265;"	d
RACE_DWARF	structs.h	269;"	d
RACE_ELF	structs.h	267;"	d
RACE_HUMAN	structs.h	268;"	d
RACE_MINOTAUR	structs.h	266;"	d
RACE_OGRE	structs.h	264;"	d
RACE_PIXIE	structs.h	270;"	d
RACE_UNDEFINED	structs.h	263;"	d
RANDOM_BURGLAR	act.informative.c	6014;"	d	file:
RAND_PROG	oasis.h	63;"	d
RANGE	act.wizard.c	3945;"	d	file:
RANGE	db.c	1508;"	d	file:
RANGE	db.c	1563;"	d	file:
RCHANGES_FILE	db.h	117;"	d
READ_LVL	boards.h	37;"	d
READ_SIZE	db.c	225;"	d	file:
REAL	db.h	155;"	d
RECON	interpreter.c	1910;"	d	file:
RECREATE	utils.h	210;"	d
REDGEM	db.h	22;"	d
REDIT_BURGLE	oasis.h	230;"	d
REDIT_CONFIRM_SAVEDB	oasis.h	214;"	d
REDIT_CONFIRM_SAVESTRING	oasis.h	215;"	d
REDIT_DESC	oasis.h	210;"	d
REDIT_EXIT_DESCRIPTION	oasis.h	217;"	d
REDIT_EXIT_DOORFLAGS	oasis.h	220;"	d
REDIT_EXIT_KEY	oasis.h	219;"	d
REDIT_EXIT_KEYWORD	oasis.h	218;"	d
REDIT_EXIT_MENU	oasis.h	213;"	d
REDIT_EXIT_NUMBER	oasis.h	216;"	d
REDIT_EXTRADESC_DESCRIPTION	oasis.h	223;"	d
REDIT_EXTRADESC_KEY	oasis.h	222;"	d
REDIT_EXTRADESC_MENU	oasis.h	221;"	d
REDIT_FLAGS	oasis.h	211;"	d
REDIT_LIST	redit.c	25;"	d	file:
REDIT_MAIN_MENU	oasis.h	208;"	d
REDIT_NAME	oasis.h	209;"	d
REDIT_SECTOR	oasis.h	212;"	d
REDIT_SECTOR_ATMOS	oasis.h	225;"	d
REDIT_SECTOR_BASE	oasis.h	224;"	d
REDIT_SECTOR_ENVIRO	oasis.h	228;"	d
REDIT_SECTOR_GRAV	oasis.h	227;"	d
REDIT_SECTOR_MENU	oasis.h	229;"	d
REDIT_SECTOR_TEMP	oasis.h	226;"	d
REMORT_START_VROOM	act.other.c	1278;"	d	file:
REMOVE_BIT	utils.h	240;"	d
REMOVE_FROM_LIST	utils.h	223;"	d
REMOVE_LVL	boards.h	39;"	d
RENT_CRASH	structs.h	919;"	d
RENT_CRYO	structs.h	921;"	d
RENT_FACTOR	objsave.c	28;"	d	file:
RENT_FORCED	structs.h	922;"	d
RENT_RENTED	structs.h	920;"	d
RENT_TIMEDOUT	structs.h	923;"	d
RENT_UNDEF	structs.h	918;"	d
REPORT	reports.h	49;"	d
REPORTS_FILE	db.h	116;"	d
REPORT_LONGDESC_LENGTH	reports.h	55;"	d
REPORT_MODE	reports.h	51;"	d
REPORT_MODE_BUG	reports.h	41;"	d
REPORT_MODE_IDEA	reports.h	43;"	d
REPORT_MODE_LISTREPORT	reports.h	45;"	d
REPORT_MODE_PRINTREPORT	reports.h	46;"	d
REPORT_MODE_TODO	reports.h	44;"	d
REPORT_MODE_TYPO	reports.h	42;"	d
REPORT_MODIFIED	reports.h	52;"	d
REPORT_SHORTDESC_LENGTH	reports.h	54;"	d
REPORT_STATE	reports.h	50;"	d
REPORT_STATE_ASSESSED	reports.h	7;"	d
REPORT_STATE_CHANGEDESC	reports.h	35;"	d
REPORT_STATE_CLOSED	reports.h	9;"	d
REPORT_STATE_CONFIRM	reports.h	32;"	d
REPORT_STATE_DELETED	reports.h	10;"	d
REPORT_STATE_FEEDBACK	reports.h	8;"	d
REPORT_STATE_LONGDESC	reports.h	33;"	d
REPORT_STATE_MENU	reports.h	31;"	d
REPORT_STATE_OPEN	reports.h	6;"	d
REPORT_STATE_PLAYER	reports.h	38;"	d
REPORT_STATE_SHORTDESC	reports.h	34;"	d
REPORT_STATE_STATE	reports.h	37;"	d
REPORT_STATE_TYPE	reports.h	36;"	d
REPORT_TYPE_BUGBALANCE	reports.h	20;"	d
REPORT_TYPE_BUGBUILDING	reports.h	19;"	d
REPORT_TYPE_BUGCRASH	reports.h	18;"	d
REPORT_TYPE_BUGOTHER	reports.h	21;"	d
REPORT_TYPE_IDEA	reports.h	15;"	d
REPORT_TYPE_TODO	reports.h	17;"	d
REPORT_TYPE_TYPO	reports.h	16;"	d
RESTSKILL	config.c	/^const char *RESTSKILL="You cannot summon the energy to perform this.\\r\\n";$/;"	v
RETSIGTYPE	conf.h	14;"	d
REV_BRANCH	utils.h	917;"	d
REV_CVSUPTODATE	utils.h	919;"	d
REV_FILE	db.h	115;"	d
REV_MAJOR	utils.h	918;"	d
REV_MINOR	utils.h	916;"	d
RLIMIT_NOFILE	sysdep.h	341;"	d
RL_SEC	structs.h	977;"	d
RMSM_BURNED	structs.h	211;"	d
RMSM_FLAGGED	utils.h	303;"	d
RMSM_FLAGS	utils.h	273;"	d
RONE_MAX_LVL	structs.h	969;"	d
ROOM_ALIEN_ECHO	spec_procs.c	37;"	d	file:
ROOM_AREA_HOME_POOR	structs.h	232;"	d
ROOM_AREA_HOME_REGULAR	structs.h	231;"	d
ROOM_AREA_HOME_RICH	structs.h	230;"	d
ROOM_AREA_SHOP_POOR	structs.h	228;"	d
ROOM_AREA_SHOP_REGULAR	structs.h	227;"	d
ROOM_AREA_SHOP_RICH	structs.h	226;"	d
ROOM_AREA_WAREHOUSE_POOR	structs.h	224;"	d
ROOM_AREA_WAREHOUSE_REGULAR	structs.h	223;"	d
ROOM_AREA_WAREHOUSE_RICH	structs.h	222;"	d
ROOM_ATRIUM	structs.h	192;"	d
ROOM_BACKWARD	structs.h	196;"	d
ROOM_BFS_MARK	structs.h	194;"	d
ROOM_BUF	act.build.c	131;"	d	file:
ROOM_DARK	structs.h	179;"	d
ROOM_DEATH	structs.h	180;"	d
ROOM_FLAGGED	utils.h	302;"	d
ROOM_FLAGS	utils.h	272;"	d
ROOM_GODROOM	structs.h	189;"	d
ROOM_HOME	structs.h	229;"	d
ROOM_HOUSE	structs.h	190;"	d
ROOM_HOUSE_CRASH	structs.h	191;"	d
ROOM_ID_BASE	dg_scripts.h	230;"	d
ROOM_INDOORS	structs.h	182;"	d
ROOM_LR_ANG	structs.h	206;"	d
ROOM_LR_ET	structs.h	202;"	d
ROOM_LR_GOD	structs.h	208;"	d
ROOM_LR_IMM	structs.h	207;"	d
ROOM_LR_IMP	structs.h	209;"	d
ROOM_NEWBIE	structs.h	195;"	d
ROOM_NOMAGIC	structs.h	186;"	d
ROOM_NOMOB	structs.h	181;"	d
ROOM_NOSLEEP	structs.h	205;"	d
ROOM_NOTRACK	structs.h	185;"	d
ROOM_OLC	structs.h	193;"	d
ROOM_PEACEFUL	structs.h	183;"	d
ROOM_PRIVATE	structs.h	188;"	d
ROOM_REGEN_2	structs.h	203;"	d
ROOM_REGEN_HALF	structs.h	204;"	d
ROOM_SHOP	structs.h	225;"	d
ROOM_SOUNDPROOF	structs.h	184;"	d
ROOM_TUNNEL	structs.h	187;"	d
ROOM_WAREHOUSE	structs.h	221;"	d
RTWO_MAX_LVL	structs.h	970;"	d
R_EXIT	utils.h	761;"	d
R_MOB	castle.c	73;"	d	file:
R_OBJ	castle.c	74;"	d	file:
R_ROOM	castle.c	75;"	d	file:
Read_Invalid_List	ban.c	/^void Read_Invalid_List(void)$/;"	f
ReleaseInfo	structs.h	/^    ReleaseInfo() { $/;"	f	class:ReleaseInfo
ReleaseInfo	structs.h	/^    ReleaseInfo(short major, short branch, short minor, char *tag, $/;"	f	class:ReleaseInfo
ReleaseInfo	structs.h	/^class ReleaseInfo {$/;"	c
Report	reports.h	/^    Report() {$/;"	f	class:Report
Report	reports.h	/^    Report(long playerId, long reporterId, int reportNum, int state, int type, $/;"	f	class:Report
Report	reports.h	/^class Report {$/;"	c
ReportChange	reports.h	/^    ReportChange() {$/;"	f	class:ReportChange
ReportChange	reports.h	/^    ReportChange(int changeNum, int reportNum, long playerId, int fromState, $/;"	f	class:ReportChange
ReportChange	reports.h	/^class ReportChange {$/;"	c
ReportList	reports.h	/^    ReportList() { $/;"	f	class:ReportList
ReportList	reports.h	/^class ReportList {$/;"	c
SANA	utils.h	680;"	d
SAVE_ROOM_VNUM	structs.h	71;"	d
SAVING_BREATH	spells.h	270;"	d
SAVING_PARA	spells.h	267;"	d
SAVING_PETRI	spells.h	269;"	d
SAVING_ROD	spells.h	268;"	d
SAVING_SPELL	spells.h	271;"	d
SB	telnet.h	47;"	d
SCMD_AFK	interpreter.h	157;"	d
SCMD_ANGNET	interpreter.h	179;"	d
SCMD_AREAS	interpreter.h	138;"	d
SCMD_ASK	interpreter.h	183;"	d
SCMD_AUCTION	interpreter.h	189;"	d
SCMD_AUTOCORPSE	interpreter.h	167;"	d
SCMD_AUTOEAT	interpreter.h	168;"	d
SCMD_AUTOEXIT	interpreter.h	155;"	d
SCMD_AUTOGOLD	interpreter.h	161;"	d
SCMD_AUTOHUNT	interpreter.h	277;"	d
SCMD_AUTOLOOT	interpreter.h	160;"	d
SCMD_AUTOSPLIT	interpreter.h	162;"	d
SCMD_BRIEF	interpreter.h	143;"	d
SCMD_BUG	interpreter.h	219;"	d
SCMD_CLEAR	interpreter.h	136;"	d
SCMD_CLOSE	interpreter.h	261;"	d
SCMD_COMMANDS	interpreter.h	208;"	d
SCMD_COMPACT	interpreter.h	144;"	d
SCMD_CREDITS	interpreter.h	128;"	d
SCMD_DATE	interpreter.h	204;"	d
SCMD_DEAF	interpreter.h	147;"	d
SCMD_DONATE	interpreter.h	215;"	d
SCMD_DOWN	interpreter.h	123;"	d
SCMD_DRINK	interpreter.h	247;"	d
SCMD_DROP	interpreter.h	213;"	d
SCMD_EAST	interpreter.h	119;"	d
SCMD_EAT	interpreter.h	245;"	d
SCMD_ECHO	interpreter.h	256;"	d
SCMD_EMOTE	interpreter.h	257;"	d
SCMD_FILL	interpreter.h	233;"	d
SCMD_FLEE	structs.h	94;"	d
SCMD_FREEZE	interpreter.h	175;"	d
SCMD_GIVE	interpreter.h	280;"	d
SCMD_GOSSIP	interpreter.h	188;"	d
SCMD_GRATZ	interpreter.h	190;"	d
SCMD_HANDBOOK	interpreter.h	127;"	d
SCMD_HIT	interpreter.h	240;"	d
SCMD_HOLLER	interpreter.h	186;"	d
SCMD_HOLYLIGHT	interpreter.h	153;"	d
SCMD_HUNT	interpreter.h	276;"	d
SCMD_IDEA	interpreter.h	221;"	d
SCMD_IMMLIST	interpreter.h	133;"	d
SCMD_IMMNET	interpreter.h	178;"	d
SCMD_IMOTD	interpreter.h	135;"	d
SCMD_INFO	interpreter.h	126;"	d
SCMD_IS_PUT	interpreter.h	216;"	d
SCMD_JUNK	interpreter.h	214;"	d
SCMD_KILL	interpreter.h	242;"	d
SCMD_LOCK	interpreter.h	263;"	d
SCMD_LOOK	interpreter.h	224;"	d
SCMD_MOTD	interpreter.h	134;"	d
SCMD_MOVE	structs.h	93;"	d
SCMD_MURDER	interpreter.h	241;"	d
SCMD_NEWBIE	interpreter.h	191;"	d
SCMD_NEWS	interpreter.h	129;"	d
SCMD_NOAUCTION	interpreter.h	146;"	d
SCMD_NOCI	interpreter.h	166;"	d
SCMD_NOCT	interpreter.h	165;"	d
SCMD_NOGOSSIP	interpreter.h	148;"	d
SCMD_NOGRATZ	interpreter.h	149;"	d
SCMD_NOHASSLE	interpreter.h	142;"	d
SCMD_NOHINTS	interpreter.h	164;"	d
SCMD_NOIMMNET	interpreter.h	156;"	d
SCMD_NOINFO	interpreter.h	158;"	d
SCMD_NONEWBIE	interpreter.h	159;"	d
SCMD_NOREPEAT	interpreter.h	152;"	d
SCMD_NORTH	interpreter.h	118;"	d
SCMD_NOSUMMON	interpreter.h	141;"	d
SCMD_NOTELL	interpreter.h	145;"	d
SCMD_NOTITLE	interpreter.h	173;"	d
SCMD_NOWIZ	interpreter.h	150;"	d
SCMD_OASIS_MEDIT	interpreter.h	270;"	d
SCMD_OASIS_OEDIT	interpreter.h	268;"	d
SCMD_OASIS_REDIT	interpreter.h	267;"	d
SCMD_OASIS_SEDIT	interpreter.h	271;"	d
SCMD_OASIS_TRIGEDIT	interpreter.h	272;"	d
SCMD_OASIS_ZEDIT	interpreter.h	269;"	d
SCMD_OECHOAROUND	dg_objcmd.c	50;"	d	file:
SCMD_OLC_SAVEINFO	interpreter.h	273;"	d
SCMD_OPEN	interpreter.h	260;"	d
SCMD_OSEND	dg_objcmd.c	49;"	d	file:
SCMD_PARDON	interpreter.h	172;"	d
SCMD_PICK	interpreter.h	264;"	d
SCMD_POLICIES	interpreter.h	131;"	d
SCMD_POOFIN	interpreter.h	236;"	d
SCMD_POOFOUT	interpreter.h	237;"	d
SCMD_POUR	interpreter.h	232;"	d
SCMD_QECHO	interpreter.h	229;"	d
SCMD_QSAY	interpreter.h	228;"	d
SCMD_QUAFF	interpreter.h	252;"	d
SCMD_QUI	interpreter.h	199;"	d
SCMD_QUIT	interpreter.h	200;"	d
SCMD_QUITR	interpreter.h	201;"	d
SCMD_READ	interpreter.h	225;"	d
SCMD_RECITE	interpreter.h	253;"	d
SCMD_REROLL	interpreter.h	171;"	d
SCMD_ROOMFLAGS	interpreter.h	151;"	d
SCMD_SHOUT	interpreter.h	187;"	d
SCMD_SHUTDOW	interpreter.h	195;"	d
SCMD_SHUTDOWN	interpreter.h	196;"	d
SCMD_SIP	interpreter.h	248;"	d
SCMD_SLIP	interpreter.h	281;"	d
SCMD_SLOWNS	interpreter.h	154;"	d
SCMD_SOCIALS	interpreter.h	209;"	d
SCMD_SOUTH	interpreter.h	120;"	d
SCMD_SQUELCH	interpreter.h	174;"	d
SCMD_TASTE	interpreter.h	246;"	d
SCMD_THAW	interpreter.h	176;"	d
SCMD_TRACK	interpreter.h	163;"	d
SCMD_TYPO	interpreter.h	220;"	d
SCMD_UNAFFECT	interpreter.h	177;"	d
SCMD_UNLOCK	interpreter.h	262;"	d
SCMD_UP	interpreter.h	122;"	d
SCMD_UPTIME	interpreter.h	205;"	d
SCMD_USE	interpreter.h	251;"	d
SCMD_VERSION	interpreter.h	132;"	d
SCMD_WECHOAROUND	dg_wldcmd.c	51;"	d	file:
SCMD_WEST	interpreter.h	121;"	d
SCMD_WHISPER	interpreter.h	182;"	d
SCMD_WHOAMI	interpreter.h	137;"	d
SCMD_WIZHELP	interpreter.h	210;"	d
SCMD_WIZLIST	interpreter.h	130;"	d
SCMD_WSEND	dg_wldcmd.c	50;"	d	file:
SCORE_ABILITIES	structs.h	169;"	d
SCORE_AC	structs.h	161;"	d
SCORE_AFFECTS	structs.h	168;"	d
SCORE_AGE	structs.h	154;"	d
SCORE_ALIGN	structs.h	164;"	d
SCORE_CARRYING	structs.h	172;"	d
SCORE_CLASS	structs.h	159;"	d
SCORE_DAMROLL	structs.h	152;"	d
SCORE_GOLD	structs.h	165;"	d
SCORE_HEIGHTWEIGHT	structs.h	163;"	d
SCORE_HITROLL	structs.h	153;"	d
SCORE_HMV	structs.h	160;"	d
SCORE_INVENTORY	structs.h	167;"	d
SCORE_LEVEL	structs.h	156;"	d
SCORE_NAME	structs.h	155;"	d
SCORE_QUESTPOINTS	structs.h	171;"	d
SCORE_RACE	structs.h	158;"	d
SCORE_SETTINGS	utils.h	513;"	d
SCORE_SEX	structs.h	170;"	d
SCORE_STATS	structs.h	157;"	d
SCORE_THACO	structs.h	162;"	d
SCORE_TIME	structs.h	166;"	d
SCRIPT	dg_scripts.h	233;"	d
SCRIPT_CHECK	dg_scripts.h	240;"	d
SCRIPT_DEL_TRIGGER	dg_olc.h	43;"	d
SCRIPT_MAIN_MENU	dg_olc.h	41;"	d
SCRIPT_MEM	dg_scripts.h	234;"	d
SCRIPT_NEW_TRIGGER	dg_olc.h	42;"	d
SCRIPT_TYPES	dg_scripts.h	235;"	d
SCRIPT_VARS_FILE	utils.h	162;"	d
SE	telnet.h	57;"	d
SECOND_REMORT_CLASS	structs.h	290;"	d
SECS_PER_DAY	utils.c	74;"	d	file:
SECS_PER_HOUR	utils.c	75;"	d	file:
SECS_PER_MUD_DAY	utils.h	175;"	d
SECS_PER_MUD_HOUR	utils.h	174;"	d
SECS_PER_MUD_MONTH	utils.h	176;"	d
SECS_PER_MUD_YEAR	utils.h	177;"	d
SECS_PER_REAL_DAY	utils.h	182;"	d
SECS_PER_REAL_HOUR	utils.h	181;"	d
SECS_PER_REAL_MIN	utils.h	180;"	d
SECS_PER_REAL_YEAR	utils.h	183;"	d
SECT	utils.h	332;"	d
SECT_ABSZERO	utils.h	897;"	d
SECT_ATMOSPHERE_ARRIVE	act.movement.c	/^static char *SECT_ATMOSPHERE_ARRIVE[7]  = {"", "", "", "", "", "", ""};$/;"	v	file:
SECT_ATMOSPHERE_LEAVE	act.movement.c	/^static char *SECT_ATMOSPHERE_LEAVE[7]   = {"", "", "", "", "", "", ""};$/;"	v	file:
SECT_CITY	structs.h	246;"	d
SECT_COLD	utils.h	895;"	d
SECT_CORROSIVE	utils.h	891;"	d
SECT_CRUSH	utils.h	900;"	d
SECT_DISPAIR1	utils.h	903;"	d
SECT_DISPAIR2	utils.h	904;"	d
SECT_DISPAIR3	utils.h	905;"	d
SECT_DISPELL	utils.h	902;"	d
SECT_DOUBLEGRAV	utils.h	898;"	d
SECT_ENVIRON_ARRIVE	act.movement.c	/^static char *SECT_ENVIRON_ARRIVE[7]     = {"", "", "", "$n is moving backwards.", "", "", ""};$/;"	v	file:
SECT_ENVIRON_LEAVE	act.movement.c	/^static char *SECT_ENVIRON_LEAVE[7]      = {"", "", "", "$n leaves back to front.", "", "", ""};$/;"	v	file:
SECT_FIELD	structs.h	247;"	d
SECT_FLYING	structs.h	254;"	d
SECT_FOREST	structs.h	248;"	d
SECT_FREEZING	utils.h	896;"	d
SECT_GRAVITY_ARRIVE	act.movement.c	/^static char *SECT_GRAVITY_ARRIVE[7]     = {"", "", "", "", "", "", ""};$/;"	v	file:
SECT_GRAVITY_LEAVE	act.movement.c	/^static char *SECT_GRAVITY_LEAVE[7]      = {"", "", "", "", "", "", ""};$/;"	v	file:
SECT_HILLS	structs.h	249;"	d
SECT_HOT	utils.h	892;"	d
SECT_INCINERATE	utils.h	894;"	d
SECT_INSIDE	structs.h	245;"	d
SECT_MOUNTAIN	structs.h	250;"	d
SECT_RAD1	utils.h	901;"	d
SECT_SCORCH	utils.h	893;"	d
SECT_TEMPERATURE_ARRIVE	act.movement.c	/^static char *SECT_TEMPERATURE_ARRIVE[7] = {"", "", "", "", "", "", ""};$/;"	v	file:
SECT_TEMPERATURE_LEAVE	act.movement.c	/^static char *SECT_TEMPERATURE_LEAVE[7]  = {"", "", "", "", "", "", ""};$/;"	v	file:
SECT_THIN	utils.h	888;"	d
SECT_TRIPLEGRAV	utils.h	899;"	d
SECT_TYPE_ATMOS	utils.h	908;"	d
SECT_TYPE_BASE	utils.h	907;"	d
SECT_TYPE_ENVIRO	utils.h	911;"	d
SECT_TYPE_GRAV	utils.h	910;"	d
SECT_TYPE_TEMP	utils.h	909;"	d
SECT_UNBREATHABLE	utils.h	889;"	d
SECT_UNDERWATER	structs.h	253;"	d
SECT_VACUUM	utils.h	890;"	d
SECT_WATER_NOSWIM	structs.h	252;"	d
SECT_WATER_SWIM	structs.h	251;"	d
SEDIT_BUY	oasis.h	308;"	d
SEDIT_BUY_PROFIT	oasis.h	323;"	d
SEDIT_CLOSE1	oasis.h	320;"	d
SEDIT_CLOSE2	oasis.h	321;"	d
SEDIT_CONFIRM_SAVESTRING	oasis.h	302;"	d
SEDIT_DELETE_PRODUCT	oasis.h	327;"	d
SEDIT_DELETE_ROOM	oasis.h	329;"	d
SEDIT_DELETE_TYPE	oasis.h	326;"	d
SEDIT_KEEPER	oasis.h	322;"	d
SEDIT_MAIN_MENU	oasis.h	301;"	d
SEDIT_NAMELIST	oasis.h	313;"	d
SEDIT_NAMELIST_MENU	oasis.h	312;"	d
SEDIT_NEW_PRODUCT	oasis.h	328;"	d
SEDIT_NEW_ROOM	oasis.h	330;"	d
SEDIT_NOBUY	oasis.h	307;"	d
SEDIT_NOCASH1	oasis.h	305;"	d
SEDIT_NOCASH2	oasis.h	306;"	d
SEDIT_NOITEM1	oasis.h	303;"	d
SEDIT_NOITEM2	oasis.h	304;"	d
SEDIT_NOTRADE	oasis.h	332;"	d
SEDIT_NUMERICAL_RESPONSE	oasis.h	317;"	d
SEDIT_OPEN1	oasis.h	318;"	d
SEDIT_OPEN2	oasis.h	319;"	d
SEDIT_PRODUCTS_MENU	oasis.h	310;"	d
SEDIT_ROOMS_MENU	oasis.h	311;"	d
SEDIT_SELL	oasis.h	309;"	d
SEDIT_SELL_PROFIT	oasis.h	324;"	d
SEDIT_SHOP_FLAGS	oasis.h	331;"	d
SEDIT_TYPE_MENU	oasis.h	325;"	d
SEEK_CUR	utils.h	844;"	d
SEEK_END	utils.h	845;"	d
SEEK_SET	utils.h	843;"	d
SELF	utils.h	703;"	d
SENDOK	utils.h	921;"	d
SENDTOOK	utils.h	928;"	d
SEND_TO_Q	comm.h	41;"	d
SETREMOVE	act.informative.c	30;"	d	file:
SET_BIT	utils.h	239;"	d
SET_OR_REMOVE	act.wizard.c	3941;"	d	file:
SET_SKILL	utils.h	540;"	d
SEX_FEMALE	structs.h	325;"	d
SEX_MALE	structs.h	324;"	d
SEX_NEUTRAL	structs.h	323;"	d
SEX_RANDOM	structs.h	326;"	d
SHOP_ABS_MAX_PRICE	shop.h	142;"	d
SHOP_BANK	shop.h	113;"	d
SHOP_BITVECTOR	shop.h	115;"	d
SHOP_BROKE_TEMPER	shop.h	114;"	d
SHOP_BUYPROFIT	shop.h	118;"	d
SHOP_BUYTYPE	shop.h	110;"	d
SHOP_BUYWORD	shop.h	111;"	d
SHOP_CLOSE1	shop.h	106;"	d
SHOP_CLOSE2	shop.h	108;"	d
SHOP_FUNC	shop.h	120;"	d
SHOP_KEEPER	shop.h	104;"	d
SHOP_KILL_CHARS	shop.h	135;"	d
SHOP_MAX_BUY_PRICE	shop.h	141;"	d
SHOP_NUM	shop.h	103;"	d
SHOP_OPEN1	shop.h	105;"	d
SHOP_OPEN2	shop.h	107;"	d
SHOP_PRODUCT	shop.h	112;"	d
SHOP_ROOM	shop.h	109;"	d
SHOP_SELLPROFIT	shop.h	119;"	d
SHOP_SORT	shop.h	117;"	d
SHOP_TRADE_WITH	shop.h	116;"	d
SHOP_USES_BANK	shop.h	136;"	d
SHP_PREFIX	db.h	80;"	d
SIGALRM	comm.c	23;"	d	file:
SIGPIPE	comm.c	22;"	d	file:
SINFO	dg_misc.c	24;"	d	file:
SINFO	spell_parser.c	29;"	d	file:
SKELETON_KEY_VNUM	act.movement.c	955;"	d	file:
SKILL	spells.h	15;"	d
SKILL_2ND_ATTACK	spells.h	147;"	d
SKILL_3RD_ATTACK	spells.h	148;"	d
SKILL_ADRENALINE	spells.h	161;"	d
SKILL_AMBIDEXTERITY	spells.h	207;"	d
SKILL_AMBUSH	spells.h	159;"	d
SKILL_ARMOURCRAFT	spells.h	158;"	d
SKILL_ATTEND_WOUNDS	spells.h	160;"	d
SKILL_AXEMASTERY	spells.h	205;"	d
SKILL_AXETHROW	spells.h	209;"	d
SKILL_BACKSTAB	spells.h	135;"	d
SKILL_BARGAIN	spells.h	203;"	d
SKILL_BASH	spells.h	136;"	d
SKILL_BATTLECRY	spells.h	162;"	d
SKILL_BEARHUG	spells.h	163;"	d
SKILL_BERSERK	spells.h	178;"	d
SKILL_BLACKSMITHING	spells.h	215;"	d
SKILL_BLADEMASTERY	spells.h	204;"	d
SKILL_BODYSLAM	spells.h	167;"	d
SKILL_BREWING	spells.h	216;"	d
SKILL_BURGLE	spells.h	194;"	d
SKILL_CAMPING	spells.h	202;"	d
SKILL_CLOT_WOUNDS	spells.h	170;"	d
SKILL_COMPARE	spells.h	154;"	d
SKILL_COMPOST	spells.h	179;"	d
SKILL_CONCEAL_SPELL_CASTING	spells.h	201;"	d
SKILL_DARKRITUAL	spells.h	174;"	d
SKILL_DEFEND	spells.h	200;"	d
SKILL_DETECT_DEATH	spells.h	157;"	d
SKILL_DISARM	spells.h	169;"	d
SKILL_DOUBLE_BACKSTAB	spells.h	199;"	d
SKILL_DOUBLE_KICK	spells.h	198;"	d
SKILL_FIRST_AID	spells.h	176;"	d
SKILL_FLYINGTACKLE	spells.h	175;"	d
SKILL_GLANCE	spells.h	183;"	d
SKILL_HEADBUTT	spells.h	164;"	d
SKILL_HEALING_EFFICIENCY	spells.h	193;"	d
SKILL_HEALING_MASTERY	spells.h	192;"	d
SKILL_HEAL_TRANCE	spells.h	190;"	d
SKILL_HIDE	spells.h	137;"	d
SKILL_HUNT	spells.h	151;"	d
SKILL_JEWELRY	spells.h	217;"	d
SKILL_KICK	spells.h	138;"	d
SKILL_LISTEN	spells.h	187;"	d
SKILL_MANUFACTURE_BASE	spells.h	213;"	d
SKILL_MEDITATE	spells.h	182;"	d
SKILL_MOUNT	spells.h	173;"	d
SKILL_MOUNTAINEER	spells.h	197;"	d
SKILL_PERCEPTION	spells.h	208;"	d
SKILL_PICK_LOCK	spells.h	139;"	d
SKILL_PILEDRIVE	spells.h	165;"	d
SKILL_POISONBLADE	spells.h	191;"	d
SKILL_POWERKICK	spells.h	186;"	d
SKILL_PRIMAL_SCREAM	spells.h	149;"	d
SKILL_PUNCH	spells.h	141;"	d
SKILL_PURSE	spells.h	171;"	d
SKILL_RESCUE	spells.h	142;"	d
SKILL_RETREAT	spells.h	152;"	d
SKILL_SCAN	spells.h	150;"	d
SKILL_SEARCH	spells.h	156;"	d
SKILL_SENSE_CURSE	spells.h	196;"	d
SKILL_SENSE_STATS	spells.h	195;"	d
SKILL_SHIELDMASTERY	spells.h	185;"	d
SKILL_SLEIGHT	spells.h	189;"	d
SKILL_SLIP	spells.h	181;"	d
SKILL_SNEAK	spells.h	143;"	d
SKILL_SPY	spells.h	155;"	d
SKILL_STEAL	spells.h	144;"	d
SKILL_SUICIDE	spells.h	188;"	d
SKILL_TAILORING	spells.h	214;"	d
SKILL_THROW	spells.h	153;"	d
SKILL_TORCH	spells.h	184;"	d
SKILL_TRACK	spells.h	145;"	d
SKILL_TRAP_MAGIC	spells.h	210;"	d
SKILL_TRAP_PIT	spells.h	180;"	d
SKILL_TRIP	spells.h	166;"	d
SKILL_TUMBLE	spells.h	177;"	d
SKILL_WEAPONCRAFT	spells.h	206;"	d
SKY_CLOUDLESS	structs.h	911;"	d
SKY_CLOUDY	structs.h	912;"	d
SKY_LIGHTNING	structs.h	914;"	d
SKY_RAINING	structs.h	913;"	d
SLASH	db.h	36;"	d
SLASH	db.h	49;"	d
SLC_ABORT	telnet.h	187;"	d
SLC_ACK	telnet.h	231;"	d
SLC_AO	telnet.h	184;"	d
SLC_AYT	telnet.h	185;"	d
SLC_BRK	telnet.h	182;"	d
SLC_CANTCHANGE	telnet.h	222;"	d
SLC_DEFAULT	telnet.h	224;"	d
SLC_EC	telnet.h	190;"	d
SLC_EL	telnet.h	191;"	d
SLC_EOF	telnet.h	188;"	d
SLC_EOR	telnet.h	186;"	d
SLC_EW	telnet.h	192;"	d
SLC_FLAGS	telnet.h	228;"	d
SLC_FLUSHIN	telnet.h	232;"	d
SLC_FLUSHOUT	telnet.h	233;"	d
SLC_FORW1	telnet.h	197;"	d
SLC_FORW2	telnet.h	198;"	d
SLC_FUNC	telnet.h	227;"	d
SLC_IP	telnet.h	183;"	d
SLC_LEVELBITS	telnet.h	225;"	d
SLC_LNEXT	telnet.h	194;"	d
SLC_NAME	telnet.h	219;"	d
SLC_NAMELIST	telnet.h	206;"	d
SLC_NAMES	telnet.h	215;"	d
SLC_NAME_OK	telnet.h	218;"	d
SLC_NOSUPPORT	telnet.h	221;"	d
SLC_RP	telnet.h	193;"	d
SLC_SUSP	telnet.h	189;"	d
SLC_SYNCH	telnet.h	181;"	d
SLC_VALUE	telnet.h	229;"	d
SLC_VARIABLE	telnet.h	223;"	d
SLC_XOFF	telnet.h	196;"	d
SLC_XON	telnet.h	195;"	d
SL_MAX	genolc.h	60;"	d
SL_MOB	genolc.h	55;"	d
SL_OBJ	genolc.h	56;"	d
SL_SHP	genolc.h	57;"	d
SL_WLD	genolc.h	58;"	d
SL_ZON	genolc.h	59;"	d
SMALL_BITS	utils.h	462;"	d
SMALL_BUFSIZE	structs.h	1022;"	d
SMB_DEBUG	structs.h	370;"	d
SNAP_PLAYING	spec_procs.c	5634;"	d	file:
SNAP_STARTING	spec_procs.c	5633;"	d	file:
SOCIAL_CITIZEN	structs.h	58;"	d
SOCIAL_CRIMINAL	structs.h	54;"	d
SOCIAL_GUILDMASTER	structs.h	61;"	d
SOCIAL_LANDOWNER	structs.h	60;"	d
SOCIAL_LOWER	structs.h	57;"	d
SOCIAL_MAYOR	structs.h	64;"	d
SOCIAL_NOBLE	structs.h	62;"	d
SOCIAL_OUTLAW	structs.h	55;"	d
SOCIAL_POLITICIAN	structs.h	63;"	d
SOCIAL_UNDESIRABLE	structs.h	56;"	d
SOCIAL_UPPER	structs.h	59;"	d
SOCMESS_FILE	db.h	104;"	d
SONG_12DAYS	spec_procs.c	5263;"	d	file:
SONG_DECK1	spec_procs.c	5264;"	d	file:
SONG_DECK2	spec_procs.c	5265;"	d	file:
SONG_EYE	spec_procs.c	5266;"	d	file:
SORT_ALPHA	structs.h	128;"	d
SORT_ASCENDING	structs.h	129;"	d
SORT_DESCENDING	structs.h	130;"	d
SOUTH	structs.h	76;"	d
SPECIAL	boards.c	/^SPECIAL(gen_board)$/;"	f
SPECIAL	casino.c	/^SPECIAL(casino) $/;"	f
SPECIAL	castle.c	/^SPECIAL(CastleGuard)$/;"	f
SPECIAL	castle.c	/^SPECIAL(DicknDavid)$/;"	f
SPECIAL	castle.c	/^SPECIAL(James)$/;"	f
SPECIAL	castle.c	/^SPECIAL(cleaning)$/;"	f
SPECIAL	castle.c	/^SPECIAL(jerry)$/;"	f
SPECIAL	castle.c	/^SPECIAL(king_welmar)$/;"	f
SPECIAL	castle.c	/^SPECIAL(peter)$/;"	f
SPECIAL	castle.c	/^SPECIAL(tim)$/;"	f
SPECIAL	castle.c	/^SPECIAL(tom)$/;"	f
SPECIAL	castle.c	/^SPECIAL(training_master)$/;"	f
SPECIAL	clan.c	/^SPECIAL(clan_guard)$/;"	f
SPECIAL	clan.c	/^SPECIAL(clan_healer)$/;"	f
SPECIAL	mail.c	/^SPECIAL(postmaster)$/;"	f
SPECIAL	objsave.c	/^SPECIAL(cryogenicist)$/;"	f
SPECIAL	objsave.c	/^SPECIAL(receptionist)$/;"	f
SPECIAL	shop.c	/^SPECIAL(shop_keeper)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(Jabba)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(acid_breath)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(alien_voice)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(alien_voice_echo)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(anxiousleader)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(aphrodite)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(arrogance)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(arrow_room)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(assasin)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(avenger)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(banish)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(bank)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(bashful)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(beholder)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(blink_demon)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(blood_sucker)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(bounty_hunter)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(burgle_area_occupant)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(c_lion)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(caroller)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(citizen)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(cityguard)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(cleric)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(cleric2)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(clone)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(constrictor)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(construction_worker)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(cowboy_hat)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(darkportal)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(deadlyblade) $/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(delenn)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(dimensional_gate)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(disposable)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(doc)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(dopy)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(dragon)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(drainer)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(easter_bunny)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(elec_shock)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(elevator)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(fate) $/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(fire_breath)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(frisbee)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(gaze_npc)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(giant)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(grumpy)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(guild)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(ice_breath)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(insanity)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(janitor)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(lazy)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(magic_user)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(marbles)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(maze)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(oompa)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(packleader)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(packmember)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(peacekeeper)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(phoenix)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(pillars)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(playerhunter)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(regen)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(repairer)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(reward_obj)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(richard_garfield)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(roller_blades)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(room_magic_ripple)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(room_magic_unstable)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(room_trap)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(santa)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(scarecrow)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(school)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(self_destruct)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(set_tag)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(sleepy)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(snake)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(snap)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(sneazy)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(tardis)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(thrower)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(tin_man)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(titan)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(titansuit)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(toboggan)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(trainer)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(trojan)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(vampire)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(warrior)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(warrior1)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(watch_timer)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(werewolf)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(wind_summon)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(xmas_tree)$/;"	f
SPECIAL	spec_procs.c	/^SPECIAL(zombie)$/;"	f
SPECIAL	structs.h	50;"	d
SPECIAL_BACKSTAB	structs.h	336;"	d
SPECIAL_BATTLEMAGE	structs.h	337;"	d
SPECIAL_CHARMER	structs.h	349;"	d
SPECIAL_DISGUISE	structs.h	341;"	d
SPECIAL_DWARF	structs.h	344;"	d
SPECIAL_ELF	structs.h	352;"	d
SPECIAL_EMPATH	structs.h	354;"	d
SPECIAL_ESCAPE	structs.h	342;"	d
SPECIAL_FLY	structs.h	351;"	d
SPECIAL_FOREST_HELP	structs.h	333;"	d
SPECIAL_FOREST_SPELLS	structs.h	332;"	d
SPECIAL_GORE	structs.h	347;"	d
SPECIAL_GROUP_SNEAK	structs.h	345;"	d
SPECIAL_HEALER	structs.h	334;"	d
SPECIAL_HOLY	structs.h	339;"	d
SPECIAL_INFRA	structs.h	343;"	d
SPECIAL_INVIS	structs.h	329;"	d
SPECIAL_MANA_THIEF	structs.h	338;"	d
SPECIAL_MINOTAUR	structs.h	348;"	d
SPECIAL_MULTIWEAPON	structs.h	331;"	d
SPECIAL_PRIEST	structs.h	335;"	d
SPECIAL_SNEAK	structs.h	330;"	d
SPECIAL_SUPERMAN	structs.h	350;"	d
SPECIAL_THIEF	structs.h	346;"	d
SPECIAL_TRACKER	structs.h	353;"	d
SPEC_FLAGGED	utils.h	299;"	d
SPEC_FLAGS	utils.h	266;"	d
SPEECH_PROG	oasis.h	62;"	d
SPELL	spells.h	14;"	d
SPELL_ACID_BREATH	spells.h	231;"	d
SPELL_ADV_HEAL	spells.h	97;"	d
SPELL_ANIMATE_DEAD	spells.h	88;"	d
SPELL_ARMOR	spells.h	44;"	d
SPELL_BLESS	spells.h	46;"	d
SPELL_BLINDNESS	spells.h	47;"	d
SPELL_BOTH	spells.h	16;"	d
SPELL_BURNING_HANDS	spells.h	48;"	d
SPELL_CALL_LIGHTNING	spells.h	49;"	d
SPELL_CHANGED	spells.h	234;"	d
SPELL_CHARM	spells.h	50;"	d
SPELL_CHILL_TOUCH	spells.h	51;"	d
SPELL_CLONE	spells.h	52;"	d
SPELL_CLOUD_KILL	spells.h	106;"	d
SPELL_COLOR_SPRAY	spells.h	53;"	d
SPELL_CONTROL_WEATHER	spells.h	54;"	d
SPELL_CREAMED	spells.h	235;"	d
SPELL_CREATE_FOOD	spells.h	55;"	d
SPELL_CREATE_WATER	spells.h	56;"	d
SPELL_CURE_BLIND	spells.h	57;"	d
SPELL_CURE_CRITIC	spells.h	58;"	d
SPELL_CURE_LIGHT	spells.h	59;"	d
SPELL_CURSE	spells.h	60;"	d
SPELL_DETECT_ALIGN	spells.h	61;"	d
SPELL_DETECT_INVIS	spells.h	62;"	d
SPELL_DETECT_MAGIC	spells.h	63;"	d
SPELL_DETECT_POISON	spells.h	64;"	d
SPELL_DISPEL_EVIL	spells.h	65;"	d
SPELL_DISPEL_GOOD	spells.h	89;"	d
SPELL_DIVINE_HEAL	spells.h	120;"	d
SPELL_DIVINE_PROTECTION	spells.h	116;"	d
SPELL_DRAGON	spells.h	111;"	d
SPELL_EARTHQUAKE	spells.h	66;"	d
SPELL_EFFEC	utils.h	312;"	d
SPELL_ENCHANT_WEAPON	spells.h	67;"	d
SPELL_ENERGY_DRAIN	spells.h	68;"	d
SPELL_FEAR	spells.h	99;"	d
SPELL_FINGERDEATH	spells.h	96;"	d
SPELL_FIREBALL	spells.h	69;"	d
SPELL_FIRE_BREATH	spells.h	228;"	d
SPELL_FIRE_SHIELD	spells.h	122;"	d
SPELL_FIRE_WALL	spells.h	123;"	d
SPELL_FLY	spells.h	104;"	d
SPELL_FROST_BREATH	spells.h	230;"	d
SPELL_GAS_BREATH	spells.h	229;"	d
SPELL_GATE	spells.h	100;"	d
SPELL_GREATER_REMOVE_CURSE	spells.h	126;"	d
SPELL_GROUP_ARMOR	spells.h	90;"	d
SPELL_GROUP_HEAL	spells.h	91;"	d
SPELL_GROUP_RECALL	spells.h	92;"	d
SPELL_GROUP_SANCTUARY	spells.h	102;"	d
SPELL_HARM	spells.h	70;"	d
SPELL_HASTE	spells.h	117;"	d
SPELL_HEAL	spells.h	71;"	d
SPELL_HOLY_AID	spells.h	115;"	d
SPELL_IDENTIFY	spells.h	125;"	d
SPELL_INFRAVISION	spells.h	93;"	d
SPELL_INVISIBLE	spells.h	72;"	d
SPELL_LIGHTNING_BOLT	spells.h	73;"	d
SPELL_LIGHTNING_BREATH	spells.h	232;"	d
SPELL_LIGHT_SHIELD	spells.h	121;"	d
SPELL_LOCATE_OBJECT	spells.h	74;"	d
SPELL_MAGIC_MISSILE	spells.h	75;"	d
SPELL_MANA	spells.h	112;"	d
SPELL_METEOR_SWARM	spells.h	101;"	d
SPELL_NOHASSLE	spells.h	118;"	d
SPELL_PARALYZE	spells.h	107;"	d
SPELL_PLASMA_BLAST	spells.h	105;"	d
SPELL_POISON	spells.h	76;"	d
SPELL_PROT_FROM_EVIL	spells.h	77;"	d
SPELL_PROT_FROM_GOOD	spells.h	124;"	d
SPELL_REFRESH	spells.h	98;"	d
SPELL_REMOVE_CURSE	spells.h	78;"	d
SPELL_REMOVE_PARA	spells.h	108;"	d
SPELL_REMOVE_POISON	spells.h	86;"	d
SPELL_RESERVED_DBC	spells.h	40;"	d
SPELL_ROUTINES	utils.h	274;"	d
SPELL_SANCTUARY	spells.h	79;"	d
SPELL_SENSE_LIFE	spells.h	87;"	d
SPELL_SENSE_WOUNDS	spells.h	127;"	d
SPELL_SERPENT_SKIN	spells.h	103;"	d
SPELL_SHOCKING_GRASP	spells.h	80;"	d
SPELL_SLEEP	spells.h	81;"	d
SPELL_SPIRIT_ARMOR	spells.h	114;"	d
SPELL_STONESKIN	spells.h	119;"	d
SPELL_STRENGTH	spells.h	82;"	d
SPELL_SUMMON	spells.h	83;"	d
SPELL_SUPERMAN	spells.h	233;"	d
SPELL_TELEPORT	spells.h	45;"	d
SPELL_TYPE_POTION	spells.h	332;"	d
SPELL_TYPE_SCROLL	spells.h	335;"	d
SPELL_TYPE_SPELL	spells.h	331;"	d
SPELL_TYPE_STAFF	spells.h	334;"	d
SPELL_TYPE_WAND	spells.h	333;"	d
SPELL_UNHOLY_VENGEANCE	spells.h	128;"	d
SPELL_VENTRILOQUATE	spells.h	84;"	d
SPELL_WATERBREATHE	spells.h	109;"	d
SPELL_WATERWALK	spells.h	94;"	d
SPELL_WHIRLWIND	spells.h	113;"	d
SPELL_WORD_OF_RECALL	spells.h	85;"	d
SPELL_WRAITH_TOUCH	spells.h	110;"	d
SPLSKL	spec_procs.c	231;"	d	file:
STAMP_PRICE	mail.h	23;"	d
START_GAME	casino.h	4;"	d
START_MESSG	config.c	/^const char *START_MESSG = $/;"	v
START_WORLD	utils.h	530;"	d
STATE	utils.h	619;"	d
STAT_CHA	structs.h	313;"	d
STAT_CON	structs.h	311;"	d
STAT_DEX	structs.h	312;"	d
STAT_HIT	structs.h	314;"	d
STAT_INT	structs.h	308;"	d
STAT_MANA	structs.h	315;"	d
STAT_MOVE	structs.h	316;"	d
STAT_STR	structs.h	310;"	d
STAT_WIS	structs.h	309;"	d
STDC_HEADERS	conf.h	20;"	d
STDERR_FILENO	sysdep.h	348;"	d
STDOUT_FILENO	sysdep.h	353;"	d
STRENGTH_AFF_APPLY_INDEX	utils.h	588;"	d
STRENGTH_REAL_APPLY_INDEX	utils.h	580;"	d
STRINGADD_ABORT	improved-edit.h	33;"	d
STRINGADD_ACTION	improved-edit.h	34;"	d
STRINGADD_OK	improved-edit.h	31;"	d
STRINGADD_SAVE	improved-edit.h	32;"	d
STRING_TERMINATOR	genolc.h	19;"	d
STRTODAM	utils.h	596;"	d
SUF_ALIAS	db.h	56;"	d
SUF_MEM	db.h	57;"	d
SUF_OBJS	db.h	54;"	d
SUF_TEXT	db.h	55;"	d
SUMMON_FAIL	spells.c	170;"	d	file:
SUN_DARK	structs.h	895;"	d
SUN_LIGHT	structs.h	897;"	d
SUN_RISE	structs.h	896;"	d
SUN_SET	structs.h	898;"	d
SUSP	telnet.h	60;"	d
SYNCH	telnet.h	63;"	d
S_BANK	genshp.h	32;"	d
S_BITVECTOR	genshp.h	34;"	d
S_BROKE_TEMPER	genshp.h	33;"	d
S_BUY	genshp.h	54;"	d
S_BUYPROFIT	genshp.h	37;"	d
S_BUYTYPE	genshp.h	46;"	d
S_BUYWORD	genshp.h	47;"	d
S_CLOSE1	genshp.h	29;"	d
S_CLOSE2	genshp.h	31;"	d
S_DATA	shop.h	90;"	d
S_FUNC	genshp.h	39;"	d
S_KEEPER	genshp.h	27;"	d
S_LEN	shop.h	91;"	d
S_NAMELISTS	genshp.h	43;"	d
S_NOBUY	genshp.h	53;"	d
S_NOCASH1	genshp.h	51;"	d
S_NOCASH2	genshp.h	52;"	d
S_NOITEM1	genshp.h	49;"	d
S_NOITEM2	genshp.h	50;"	d
S_NOTRADE	genshp.h	35;"	d
S_NUM	genshp.h	26;"	d
S_OPEN1	genshp.h	28;"	d
S_OPEN2	genshp.h	30;"	d
S_PRODUCT	genshp.h	45;"	d
S_PRODUCT	oedit.c	49;"	d	file:
S_PRODUCTS	genshp.h	42;"	d
S_ROOM	genshp.h	44;"	d
S_ROOMS	genshp.h	41;"	d
S_SELL	genshp.h	55;"	d
S_SELLPROFIT	genshp.h	38;"	d
S_SORT	genshp.h	36;"	d
ShowRemortsToChar	act.other.c	/^void ShowRemortsToChar(struct char_data *ch)$/;"	f
StopBladin	spec_procs.c	/^void StopBladin(struct obj_data *blades, struct char_data *idiot) {$/;"	f
TARDIS_FLIGHT	spec_procs.c	4828;"	d	file:
TARDIS_LANDED	spec_procs.c	4829;"	d	file:
TARDIS_ROOM	spec_procs.c	4826;"	d	file:
TARDIS_VNUM	spec_procs.c	4827;"	d	file:
TAR_CHAR_INWORLD	spells.h	285;"	d
TAR_CHAR_ROOM	spells.h	275;"	d
TAR_CHAR_WORLD	spells.h	276;"	d
TAR_FIGHT_SELF	spells.h	277;"	d
TAR_FIGHT_VICT	spells.h	278;"	d
TAR_IGNORE	spells.h	274;"	d
TAR_NOT_SELF	spells.h	280;"	d
TAR_OBJ_EQUIP	spells.h	284;"	d
TAR_OBJ_INV	spells.h	281;"	d
TAR_OBJ_ROOM	spells.h	282;"	d
TAR_OBJ_WORLD	spells.h	283;"	d
TAR_SELF_ONLY	spells.h	279;"	d
TELCMD	telnet.h	79;"	d
TELCMD_FIRST	telnet.h	75;"	d
TELCMD_LAST	telnet.h	76;"	d
TELCMD_OK	telnet.h	77;"	d
TELOPT	telnet.h	143;"	d
TELOPT_3270REGIME	telnet.h	111;"	d
TELOPT_AUTHENTICATION	telnet.h	119;"	d
TELOPT_BINARY	telnet.h	82;"	d
TELOPT_BM	telnet.h	101;"	d
TELOPT_DET	telnet.h	102;"	d
TELOPT_ECHO	telnet.h	83;"	d
TELOPT_ENCRYPT	telnet.h	120;"	d
TELOPT_EOR	telnet.h	107;"	d
TELOPT_EXOPL	telnet.h	122;"	d
TELOPT_FIRST	telnet.h	140;"	d
TELOPT_LAST	telnet.h	141;"	d
TELOPT_LFLOW	telnet.h	115;"	d
TELOPT_LINEMODE	telnet.h	116;"	d
TELOPT_LOGOUT	telnet.h	100;"	d
TELOPT_NAMS	telnet.h	86;"	d
TELOPT_NAOCRD	telnet.h	92;"	d
TELOPT_NAOFFD	telnet.h	95;"	d
TELOPT_NAOHTD	telnet.h	94;"	d
TELOPT_NAOHTS	telnet.h	93;"	d
TELOPT_NAOL	telnet.h	90;"	d
TELOPT_NAOLFD	telnet.h	98;"	d
TELOPT_NAOP	telnet.h	91;"	d
TELOPT_NAOVTD	telnet.h	97;"	d
TELOPT_NAOVTS	telnet.h	96;"	d
TELOPT_NAWS	telnet.h	113;"	d
TELOPT_NEW_ENVIRON	telnet.h	121;"	d
TELOPT_OK	telnet.h	142;"	d
TELOPT_OLD_ENVIRON	telnet.h	118;"	d
TELOPT_OUTMRK	telnet.h	109;"	d
TELOPT_RCP	telnet.h	84;"	d
TELOPT_RCTE	telnet.h	89;"	d
TELOPT_SGA	telnet.h	85;"	d
TELOPT_SNDLOC	telnet.h	105;"	d
TELOPT_STATUS	telnet.h	87;"	d
TELOPT_SUPDUP	telnet.h	103;"	d
TELOPT_SUPDUPOUTPUT	telnet.h	104;"	d
TELOPT_TM	telnet.h	88;"	d
TELOPT_TSPEED	telnet.h	114;"	d
TELOPT_TTYLOC	telnet.h	110;"	d
TELOPT_TTYPE	telnet.h	106;"	d
TELOPT_TUID	telnet.h	108;"	d
TELOPT_X3PAD	telnet.h	112;"	d
TELOPT_XASCII	telnet.h	99;"	d
TELOPT_XDISPLOC	telnet.h	117;"	d
TELQUAL_INFO	telnet.h	149;"	d
TELQUAL_IS	telnet.h	147;"	d
TELQUAL_NAME	telnet.h	151;"	d
TELQUAL_REPLY	telnet.h	150;"	d
TELQUAL_SEND	telnet.h	148;"	d
TEMPERATURE	utils.h	881;"	d
THE_LAW	structs.h	66;"	d
THIRD_REMORT_CLASS	structs.h	291;"	d
THIRST	structs.h	886;"	d
TIMER_BERSERK	structs.h	539;"	d
TIMER_DARKRITUAL	structs.h	538;"	d
TIMER_HEALING_SKILLS	structs.h	536;"	d
TIMER_HEAL_TRANCE	structs.h	543;"	d
TIMER_MEDITATE	structs.h	541;"	d
TIMER_POISONBLADE	structs.h	537;"	d
TIMER_SHIELD	structs.h	542;"	d
TIMER_TRAP_PIT	structs.h	540;"	d
TIME_WITH_SYS_TIME	conf.h	23;"	d
TOB_ROOM	spec_procs.c	5448;"	d	file:
TOB_VNUM	spec_procs.c	5447;"	d	file:
TOGGLE_BIT	utils.h	241;"	d
TOG_OFF	act.other.c	3309;"	d	file:
TOG_ON	act.other.c	3310;"	d	file:
TOP_SPELL_DEFINE	spells.h	237;"	d
TORCH_VNUM	act.other.c	443;"	d	file:
TOROOM	graph.c	67;"	d	file:
TOROOM	house.h	30;"	d
TO_CHAR	comm.h	30;"	d
TO_NOTVICT	comm.h	29;"	d
TO_ROOM	comm.h	27;"	d
TO_SLEEP	comm.h	31;"	d
TO_VICT	comm.h	28;"	d
TRADE_NOCLERIC	shop.h	80;"	d
TRADE_NOEVIL	shop.h	77;"	d
TRADE_NOGOOD	shop.h	76;"	d
TRADE_NOMAGIC_USER	shop.h	79;"	d
TRADE_NONEUTRAL	shop.h	78;"	d
TRADE_NOTHIEF	shop.h	81;"	d
TRADE_NOWARRIOR	shop.h	82;"	d
TRAP_FLYING	structs.h	806;"	d
TRAP_INDOORS	structs.h	803;"	d
TRAP_MAGIC	structs.h	799;"	d
TRAP_OBJ	structs.h	801;"	d
TRAP_OUTDOORS	structs.h	804;"	d
TRAP_PIT	structs.h	798;"	d
TRAP_UNDEFINED	structs.h	797;"	d
TRAP_UNDERWATER	structs.h	805;"	d
TRG_PREFIX	db.h	81;"	d
TRIGEDIT_ARGUMENT	dg_olc.h	36;"	d
TRIGEDIT_COMMANDS	dg_olc.h	34;"	d
TRIGEDIT_CONFIRM_SAVESTRING	dg_olc.h	30;"	d
TRIGEDIT_INTENDED	dg_olc.h	32;"	d
TRIGEDIT_MAIN_MENU	dg_olc.h	28;"	d
TRIGEDIT_NAME	dg_olc.h	31;"	d
TRIGEDIT_NARG	dg_olc.h	35;"	d
TRIGEDIT_TRIGTYPE	dg_olc.h	29;"	d
TRIGEDIT_TYPES	dg_olc.h	33;"	d
TRIGGERS	dg_scripts.h	237;"	d
TRIGGERS	dg_scripts.h	238;"	d
TRIGGER_CHECK	dg_scripts.h	242;"	d
TRIG_NEW	dg_scripts.h	72;"	d
TRIG_RESTART	dg_scripts.h	73;"	d
TRUE	config.c	19;"	d	file:
TRUE	utils.h	838;"	d
TYPE_BITE	spells.h	247;"	d
TYPE_BLAST	spells.h	255;"	d
TYPE_BLUDGEON	spells.h	248;"	d
TYPE_CLAW	spells.h	251;"	d
TYPE_CRUSH	spells.h	249;"	d
TYPE_DUAL_ATTACK	spells.h	259;"	d
TYPE_HIT	spells.h	243;"	d
TYPE_MAUL	spells.h	252;"	d
TYPE_PIERCE	spells.h	254;"	d
TYPE_POUND	spells.h	250;"	d
TYPE_PUNCH	spells.h	256;"	d
TYPE_SLASH	spells.h	246;"	d
TYPE_STAB	spells.h	257;"	d
TYPE_STING	spells.h	244;"	d
TYPE_SUFFERING	spells.h	262;"	d
TYPE_THRASH	spells.h	253;"	d
TYPE_UNDEFINED	spells.h	39;"	d
TYPE_WHIP	spells.h	245;"	d
TYPO_FILE	db.h	101;"	d
UID_CHAR	dg_scripts.h	213;"	d
UNDERWATER	utils.h	822;"	d
UNFAMILIARSKILL	config.c	/^const char *UNFAMILIARSKILL="You are unfamiliar with that skill.\\r\\n";$/;"	v
UNFAMILIARSPELL	config.c	/^const char *UNFAMILIARSPELL="You are unfamiliar with that spell.\\r\\n";$/;"	v
UNMARK	graph.c	65;"	d	file:
UNPK_ON_PK_LOSS	clan.h	155;"	d
UNSWITCH	interpreter.c	1912;"	d	file:
UP	structs.h	78;"	d
UPPER	utils.h	193;"	d
USERS_FORMAT	act.informative.c	4506;"	d	file:
USE_AUTOEQ	structs.h	34;"	d
USING_LARGE	comm.h	44;"	d
USING_SMALL	comm.h	43;"	d
USURP	interpreter.c	1911;"	d	file:
VALID_EDGE	graph.c	/^int VALID_EDGE(struct char_data *ch, room_rnum x, int y)$/;"	f
VALID_FIGHT	utils.h	468;"	d
VALID_FIGHTING	utils.h	471;"	d
VALID_RNUM	utils.h	343;"	d
VAMP_VNUM	structs.h	121;"	d
VANISH	act.item.c	1049;"	d	file:
VERSION3_TAG	shop.h	51;"	d
VIRTUAL	db.h	156;"	d
VNUM_TAVERN	fight.c	421;"	d	file:
Valid_Name	ban.c	/^int Valid_Name(char *newname, bool desc_check)$/;"	f
WAIT_STATE	utils.h	609;"	d
WANT_CHEAT	interpreter.c	15;"	d	file:
WCMD	dg_wldcmd.c	/^WCMD(do_wasound)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wat) {$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wdamage) {$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wdoor)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wecho)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wexp)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wforce)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wload)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wpurge)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wsend)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wteleport)$/;"	f
WCMD	dg_wldcmd.c	/^WCMD(do_wzoneecho)$/;"	f
WCMD	dg_wldcmd.c	37;"	d	file:
WEAR_ABOUT	structs.h	600;"	d
WEAR_ANKLE_1	structs.h	612;"	d
WEAR_ANKLE_2	structs.h	613;"	d
WEAR_ARMS	structs.h	598;"	d
WEAR_BODY	structs.h	593;"	d
WEAR_EAR_1	structs.h	610;"	d
WEAR_EAR_2	structs.h	611;"	d
WEAR_EYES	structs.h	609;"	d
WEAR_FEET	structs.h	596;"	d
WEAR_FINGER_1	structs.h	589;"	d
WEAR_FINGER_2	structs.h	590;"	d
WEAR_FINGER_3	structs.h	606;"	d
WEAR_FINGER_4	structs.h	607;"	d
WEAR_FINGER_5	structs.h	608;"	d
WEAR_HANDS	structs.h	597;"	d
WEAR_HEAD	structs.h	594;"	d
WEAR_HOLD	structs.h	605;"	d
WEAR_LEGS	structs.h	595;"	d
WEAR_LIGHT	structs.h	588;"	d
WEAR_NECK_1	structs.h	591;"	d
WEAR_NECK_2	structs.h	592;"	d
WEAR_SHIELD	structs.h	599;"	d
WEAR_WAIST	structs.h	601;"	d
WEAR_WIELD	structs.h	604;"	d
WEAR_WRIST_L	structs.h	603;"	d
WEAR_WRIST_R	structs.h	602;"	d
WELC_MESSG	config.c	/^const char *WELC_MESSG =$/;"	v
WEST	structs.h	77;"	d
WHITESPACE	handler.c	63;"	d	file:
WHO_FORMAT	act.informative.c	4113;"	d	file:
WILL	telnet.h	46;"	d
WILL_BANK_MONEY	shop.h	133;"	d
WILL_START_FIGHT	shop.h	132;"	d
WIZLIST_FILE	db.h	92;"	d
WLD_PREFIX	db.h	76;"	d
WLD_TRIGGER	dg_scripts.h	18;"	d
WOLF_CHANGING	spec_procs.c	2167;"	d	file:
WOLF_FROM	structs.h	119;"	d
WOLF_FROM	utils.c	1737;"	d	file:
WOLF_NOCHANGE	spec_procs.c	2168;"	d	file:
WOLF_NORMAL	spec_procs.c	2166;"	d	file:
WOLF_VNUM	structs.h	120;"	d
WONT	telnet.h	45;"	d
WORLD_FUTURE	structs.h	142;"	d
WORLD_MEDIEVAL	structs.h	140;"	d
WORLD_WEST	structs.h	141;"	d
WRITE_LVL	boards.h	38;"	d
WTRIG_COMMAND	dg_scripts.h	59;"	d
WTRIG_DROP	dg_scripts.h	64;"	d
WTRIG_ENTER	dg_scripts.h	63;"	d
WTRIG_GLOBAL	dg_scripts.h	57;"	d
WTRIG_RANDOM	dg_scripts.h	58;"	d
WTRIG_RESET	dg_scripts.h	62;"	d
WTRIG_SPEECH	dg_scripts.h	60;"	d
W_EXIT	redit.c	51;"	d	file:
W_EXIT	utils.h	760;"	d
XMAS_BOX	spec_procs.c	4953;"	d	file:
XMAS_CANDY	spec_procs.c	4956;"	d	file:
XMAS_LOWER	spec_procs.c	4955;"	d	file:
XMAS_STRING	spec_procs.c	4957;"	d	file:
XMAS_UPPER	spec_procs.c	4954;"	d	file:
XNAME_FILE	db.h	105;"	d
YES	config.c	20;"	d	file:
YESNO	utils.h	189;"	d
Z	db.c	1924;"	d	file:
Z	db.c	2027;"	d	file:
ZCMD	db.c	1338;"	d	file:
ZCMD	genolc.h	62;"	d
ZEDIT_ARG1	oasis.h	241;"	d
ZEDIT_ARG2	oasis.h	242;"	d
ZEDIT_ARG3	oasis.h	243;"	d
ZEDIT_CHANGE_ENTRY	oasis.h	238;"	d
ZEDIT_COMMAND_TYPE	oasis.h	239;"	d
ZEDIT_CONFIRM_SAVESTRING	oasis.h	248;"	d
ZEDIT_DELETE_ENTRY	oasis.h	236;"	d
ZEDIT_FLAGS	oasis.h	250;"	d
ZEDIT_IF_FLAG	oasis.h	240;"	d
ZEDIT_MAIN_MENU	oasis.h	235;"	d
ZEDIT_NEW_ENTRY	oasis.h	237;"	d
ZEDIT_SARG1	oasis.h	251;"	d
ZEDIT_SARG2	oasis.h	252;"	d
ZEDIT_WORLD	oasis.h	249;"	d
ZEDIT_ZONE_LIFE	oasis.h	245;"	d
ZEDIT_ZONE_NAME	oasis.h	244;"	d
ZEDIT_ZONE_RESET	oasis.h	247;"	d
ZEDIT_ZONE_TOP	oasis.h	246;"	d
ZN_LR_10	structs.h	815;"	d
ZN_LR_15	structs.h	816;"	d
ZN_LR_20	structs.h	817;"	d
ZN_LR_25	structs.h	818;"	d
ZN_LR_30	structs.h	819;"	d
ZN_LR_35	structs.h	820;"	d
ZN_LR_40	structs.h	821;"	d
ZN_LR_45	structs.h	822;"	d
ZN_LR_5	structs.h	814;"	d
ZN_LR_50	structs.h	823;"	d
ZN_LR_55	structs.h	824;"	d
ZN_LR_60	structs.h	825;"	d
ZN_LR_65	structs.h	826;"	d
ZN_LR_70	structs.h	827;"	d
ZN_LR_75	structs.h	828;"	d
ZN_LR_80	structs.h	829;"	d
ZN_LR_85	structs.h	830;"	d
ZN_LR_90	structs.h	831;"	d
ZN_LR_95	structs.h	832;"	d
ZN_LR_ET	structs.h	833;"	d
ZN_LR_IMM	structs.h	834;"	d
ZN_LR_IMP	structs.h	835;"	d
ZN_NEWBIE	structs.h	813;"	d
ZN_NO_GOLDRUSH	structs.h	838;"	d
ZN_NO_STEAL	structs.h	836;"	d
ZN_NO_TELE	structs.h	837;"	d
ZN_PK_ALLOWED	structs.h	812;"	d
ZONE_BUF	act.build.c	130;"	d	file:
ZONE_ERROR	db.c	2974;"	d	file:
ZON_FLAGGED	act.build.c	134;"	d	file:
ZON_FLAGS	act.build.c	133;"	d	file:
ZON_PREFIX	db.h	79;"	d
ZO_DEAD	db.c	2887;"	d	file:
Z_KINGS_C	castle.c	40;"	d	file:
_ARPA_TELNET_H	telnet.h	37;"	d
_CIRCLEMUD	structs.h	24;"	d
_OASISOLC	oasis.h	8;"	d
_POSIX_C_SOURCE	sysdep.h	247;"	d
_POSIX_C_SOURCE	sysdep.h	249;"	d
_XOPEN_SOURCE	act.wizard.c	12;"	d	file:
__ACT_OTHER_C__	act.other.c	11;"	d	file:
__COMM_C__	comm.c	14;"	d	file:
__CONFIG_C__	config.c	11;"	d	file:
__DB_C__	db.c	11;"	d	file:
__INTERPRETER_C__	interpreter.c	17;"	d	file:
__attribute__	sysdep.h	275;"	d
_clrlevel	screen.h	35;"	d
_parse_name	interpreter.c	/^int _parse_name(char *arg, char *name)$/;"	f
_write_one_node	ban.c	/^void _write_one_node(FILE * fp, struct ban_list_element * node)$/;"	f
a	random.c	48;"	d	file:
a_type	structs.h	/^   int	a_type;			\/* Attack type				*\/$/;"	m	struct:message_list
abilities	structs.h	/^        long abilities;         \/* ability bitvector    *\/ $/;"	m	struct:primal_extend_data
abilities	structs.h	/^   struct char_ability_data abilities;$/;"	m	struct:char_file_u
ability_from_char	handler.c	/^void ability_from_char(struct char_data *ch, int type)$/;"	f
account	structs.h	/^   int	account;$/;"	m	struct:rent_info
acid_breath	spec_assign.c	/^  SPECIAL(acid_breath);$/;"	v
act	comm.c	/^void act(const char *str, int hide_invisible, struct char_data *ch,$/;"	f
act	structs.h	/^   long \/*bitvector_t*\/ act;	\/* act flag for NPC's; player flag for PC's *\/$/;"	m	struct:char_special_data_saved
act_mtrigger	dg_triggers.c	/^void act_mtrigger(\/*const*\/ char_data *ch, char *str, char_data *actor, $/;"	f
act_nr	act.social.c	/^  int act_nr;$/;"	m	struct:social_messg	file:
act_to_room	dg_wldcmd.c	/^void act_to_room(char *str, room_data *room)$/;"	f
action_bits	constants.c	/^const char *action_bits[] =$/;"	v
action_description	structs.h	/^   char	*action_description;      \/* What to write when used          *\/$/;"	m	struct:obj_data
addChange	reports.cpp	/^Report::addChange(ReportChange reportChange)$/;"	f	class:Report
addChange	reports.cpp	/^void ReportList::addChange(struct reportchange_file_elem reportchange)$/;"	f	class:ReportList
addCorpse	corpses.cpp	/^void CorpseData::addCorpse(struct obj_data *corpse, room_vnum inVRoom, $/;"	f	class:CorpseData
addReport	reports.cpp	/^ReportList::addReport(struct descriptor_data *d, Report * report)$/;"	f	class:ReportList
addReport	reports.cpp	/^void ReportList::addReport(struct report_file_elem report)$/;"	f	class:ReportList
addToUserList	interpreter.c	/^void addToUserList(struct descriptor_data *desc) {$/;"	f
add_cmd_to_list	genzon.c	/^void add_cmd_to_list(struct reset_com **list, struct reset_com *newcmd, int pos)$/;"	f
add_event	dg_event.c	/^add_event(int time, EVENT(*func), void *info)$/;"	f
add_follower	utils.c	/^void add_follower(struct char_data * ch, struct char_data * leader)$/;"	f
add_mobile	genmob.c	/^int add_mobile(struct char_data *mob, mob_vnum vnum, zone_vnum vznum)$/;"	f
add_mud_event	utils.c	/^void add_mud_event(struct event_data *ev)$/;"	f
add_object	genobj.c	/^obj_rnum add_object(struct obj_data *newobj, obj_vnum ovnum, zone_vnum vznum)$/;"	f
add_room	genwld.c	/^room_rnum add_room(struct room_data *room)$/;"	f
add_shop	genshp.c	/^int add_shop(struct shop_data *nshp)$/;"	f
add_spell_help	db.c	/^void add_spell_help(FILE *spell_help_file)$/;"	f
add_to_immlist	utils.c	/^void add_to_immlist(char *name, long idnum, long immkills, ubyte unholiness)$/;"	f
add_to_int_list	genshp.c	/^void add_to_int_list(sh_int **list, sh_int newi)$/;"	f
add_to_list	shop.c	/^int add_to_list(struct shop_buy_data * list, int type, int *len, int *val)$/;"	f
add_to_quest	quest.c	/^bool add_to_quest(struct event_data *ev, struct char_data *ch)$/;"	f
add_to_questlist	utils.c	/^void add_to_questlist(char *name, long idnum, struct quest_obj_data *item)$/;"	f
add_to_save_list	genolc.c	/^int add_to_save_list(zone_vnum zone, int type)$/;"	f
add_to_type_list	genshp.c	/^void add_to_type_list(struct shop_buy_data **list, struct shop_buy_data *newl)$/;"	f
add_trigger	dg_scripts.c	/^void add_trigger(struct script_data *sc, trig_data *t, int loc)$/;"	f
add_var	dg_scripts.c	/^void add_var(struct trig_var_data **var_list, char *name, char *value, long id)$/;"	f
adjust_objects	genobj.c	/^int adjust_objects(obj_rnum refpt)$/;"	f
advance_level	class.c	/^void advance_level(struct char_data * ch)$/;"	f
aff_abils	structs.h	/^   struct char_ability_data aff_abils;	 \/* Abils with spells\/stones\/etc  *\/$/;"	m	struct:char_data
affect_from_char	handler.c	/^void affect_from_char(struct char_data * ch, int type)$/;"	f
affect_join	handler.c	/^void affect_join(struct char_data * ch, struct affected_type * af,$/;"	f
affect_modify	handler.c	/^void affect_modify(struct char_data * ch, byte loc, sbyte mod, $/;"	f
affect_remove	handler.c	/^void affect_remove(struct char_data * ch, struct affected_type * af, int trig)$/;"	f
affect_to_char	handler.c	/^void affect_to_char(struct char_data * ch, struct affected_type * af)$/;"	f
affect_total	handler.c	/^void affect_total(struct char_data * ch)$/;"	f
affect_update	magic.c	/^void affect_update(void)$/;"	f
affected	structs.h	/^   struct affected_type *affected;       \/* affected by what spells       *\/$/;"	m	struct:char_data
affected	structs.h	/^   struct affected_type affected[MAX_AFFECT];$/;"	m	struct:char_file_u
affected	structs.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];  \/* affect *\/$/;"	m	struct:obj_data
affected	structs.h	/^   struct obj_affected_type affected[MAX_OBJ_AFFECT];$/;"	m	struct:obj_file_elem
affected_bits	constants.c	/^const char *affected_bits[] =$/;"	v
affected_by	structs.h	/^   long \/*bitvector_t*\/	affected_by; \/* Bitvector for spells\/skills affected by *\/$/;"	m	struct:char_special_data_saved
affected_by_spell	handler.c	/^bool affected_by_spell(struct char_data * ch, int type)$/;"	f
affected_type	structs.h	/^struct affected_type$/;"	s
age	db.h	/^   int	age;                \/* current age of this zone (minutes) *\/$/;"	m	struct:zone_data
age	utils.c	/^struct time_info_data *age(struct char_data * ch)$/;"	f
aggro_attack	utils.c	/^bool aggro_attack(struct char_data *ch, struct char_data *vict, int type)$/;"	f
alias	interpreter.h	/^  char *alias;$/;"	m	struct:alias_data
alias_data	interpreter.h	/^struct alias_data {$/;"	s
aliased	structs.h	/^   int aliased;$/;"	m	struct:txt_block
aliases	structs.h	/^   struct alias_data *aliases;	\/* Character's aliases			*\/$/;"	m	struct:player_special_data
alien_voice	spec_assign.c	/^  SPECIAL(alien_voice);$/;"	v
alien_voice_echo	spec_assign.c	/^  SPECIAL(alien_voice_echo);$/;"	v
alignment	structs.h	/^   int	alignment;		\/* +-1000 for alignments                *\/$/;"	m	struct:char_special_data_saved
allFlag	structs.h	/^  ubyte allFlag;$/;"	m	struct:ignore_data
allowed_room	act.movement.c	/^int allowed_room(struct char_data * ch, int flag, bool show)$/;"	f
allowed_zone	act.movement.c	/^int allowed_zone(struct char_data * ch, int flag, bool show)$/;"	f
already_has_obj	shop.c	/^int already_has_obj(struct char_data *ch, struct obj_data *obj, struct obj_data *list)$/;"	f
ambush	structs.h	/^   sh_int ambush;$/;"	m	struct:dex_skill_type
amount	structs.h	/^        int amount;                     \/\/ Bet$/;"	m	struct:game_item
another_hour	weather.c	/^void another_hour(int mode)$/;"	f
anxiousleader	spec_assign.c	/^  SPECIAL(anxiousleader);$/;"	v
any_one_arg	interpreter.c	/^char *any_one_arg(char *argument, char *first_arg)$/;"	f
any_one_arg_case_sens	interpreter.c	/^char *any_one_arg_case_sens(char *argument, char *first_arg)$/;"	f
any_one_name	dg_comm.c	/^char *any_one_name(char *argument, char *first_arg)$/;"	f
aphrodite	spec_assign.c	/^  SPECIAL(aphrodite);$/;"	v
app_fee	clan.h	/^  int app_fee;                          \/* Clan Application Fee   *\/$/;"	m	struct:clan_rec
app_level	clan.h	/^  int app_level;                        \/* Clan Apply Level       *\/$/;"	m	struct:clan_rec
appear	fight.c	/^void appear(struct char_data * ch)$/;"	f
apply_ac	handler.c	/^int apply_ac(struct char_data * ch, int eq_pos, struct obj_data *obj, $/;"	f
apply_burglar_stats_to_mob	act.informative.c	/^void apply_burglar_stats_to_mob(struct char_data *mob, long lID, float fStrength)$/;"	f
apply_eq_affects	handler.c	/^void apply_eq_affects(struct char_data *ch)$/;"	f
apply_group_sneak	act.other.c	/^void apply_group_sneak(struct char_data *ch)$/;"	f
apply_quest_enhancements	quest.c	/^void apply_quest_enhancements(struct char_data *ch)$/;"	f
apply_saving_throw	structs.h	/^   sh_int apply_saving_throw[5]; \/* Saving throw (Bonuses)		*\/$/;"	m	struct:char_special_data_saved
apply_specials	act.other.c	/^void apply_specials(struct char_data *ch, bool initial) $/;"	f
apply_spell_skill_abil	spell_parser.c	/^void apply_spell_skill_abil(struct char_data *ch, int spellnum) {$/;"	f
apply_types	constants.c	/^const char *apply_types[] =$/;"	v
area_shop	act.offensive.c	/^int area_shop(room_rnum r) {$/;"	f
area_suburban	act.offensive.c	/^int area_suburban(room_rnum r) {$/;"	f
area_warehousing	act.offensive.c	/^int area_warehousing(room_rnum r) {$/;"	f
areas	db.c	/^char *areas = NULL;		\/* areas			 *\/$/;"	v
arg	db.h	/^char	arg[MAX_STRING_LENGTH];$/;"	v
arg1	db.h	/^   int	arg1;		\/*                                      *\/$/;"	m	struct:reset_com
arg2	db.h	/^   int	arg2;		\/* Arguments to the command             *\/$/;"	m	struct:reset_com
arg3	db.h	/^   int	arg3;		\/*                                      *\/$/;"	m	struct:reset_com
arglist	dg_scripts.h	/^    char *arglist;                     \/* argument list                   *\/$/;"	m	struct:trig_data
arglist	structs.h	/^  char *arglist;$/;"	m	struct:mob_prog_data
argument_interpreter	interpreter.h	40;"	d
armor	structs.h	/^   sh_int armor;        \/* Internal -100..100, external -10..10 AC *\/$/;"	m	struct:char_point_data
arms_original	spec_procs.c	/^void arms_original()$/;"	f
arms_plus_one	spec_procs.c	/^void arms_plus_one() $/;"	f
arms_plus_three	spec_procs.c	/^void arms_plus_three() $/;"	f
arms_plus_two	spec_procs.c	/^void arms_plus_two()$/;"	f
arrogance	spec_assign.c	/^  SPECIAL(arrogance);$/;"	v
arrow_room	spec_assign.c	/^  SPECIAL(arrow_room);$/;"	v
artus_in	act.wizard.c	/^void artus_in(struct char_data *ch)$/;"	f
asciiflag_conv	db.c	/^bitvector_t asciiflag_conv(char *flag)$/;"	f
assasin	spec_assign.c	/^  SPECIAL(assasin);$/;"	v
assert	sysdep.h	195;"	d
assign_boards	boards.c	/^void assign_boards(void)$/;"	f
assign_kings_castle	castle.c	/^void assign_kings_castle(void)$/;"	f
assign_mobiles	spec_assign.c	/^void assign_mobiles(void)$/;"	f
assign_objects	spec_assign.c	/^void assign_objects(void)$/;"	f
assign_rooms	spec_assign.c	/^void assign_rooms(void)$/;"	f
assign_the_shopkeepers	shop.c	/^void assign_the_shopkeepers(void)$/;"	f
assign_triggers	dg_db_scripts.c	/^void assign_triggers(void *i, int type)$/;"	f
assister	structs.h	/^  struct char_data *assister;$/;"	m	struct:assisters_type
assisters_type	structs.h	/^struct assisters_type$/;"	s
atrium	house.h	/^   room_vnum atrium;		\/* vnum of atrium		*\/$/;"	m	struct:house_control_rec
attach_rooms	act.offensive.c	/^bool attach_rooms(long lCurrentRoom, long lConnectRoom)$/;"	f
attach_type	dg_scripts.h	/^    byte attach_type;                  \/* mob\/obj\/wld intentions          *\/$/;"	m	struct:trig_data
attack_hit_text	fight.c	/^struct attack_hit_type attack_hit_text[] =$/;"	v
attack_hit_type	spells.h	/^struct attack_hit_type {$/;"	s
attack_type	structs.h	/^   int	attack_type;        \/* The Attack Type Bitvector for NPC's     *\/$/;"	m	struct:mob_special_data
attacker_msg	structs.h	/^   char	*attacker_msg;  \/* message to attacker *\/$/;"	m	struct:msg_type
auc_data	structs.h	/^struct auc_data$/;"	s
auc_file_elem	structs.h	/^struct auc_file_elem$/;"	s
auc_list	db.c	/^struct auc_data *auc_list = NULL;$/;"	v
auction_bid	act.comm.c	/^void auction_bid(struct char_data *ch, char *argument)$/;"	f
auction_cancel	act.comm.c	/^void auction_cancel(struct char_data *ch)$/;"	f
auction_create	act.comm.c	/^void auction_create(struct char_data *ch, struct obj_data *obj, int amount)$/;"	f
auction_delete	act.comm.c	/^void auction_delete(struct auc_data *lot, int subcmd)$/;"	f
auction_item_to	act.comm.c	/^void auction_item_to(struct auc_data *lot, int target)$/;"	f
auction_list	act.comm.c	/^void auction_list(struct char_data *ch)$/;"	f
auction_mail_to	act.comm.c	/^void auction_mail_to(struct auc_data *lot, int target, int subcmd)$/;"	f
auction_offer_to	act.comm.c	/^void auction_offer_to(struct auc_data *lot, int target)$/;"	f
auction_purge	act.comm.c	/^void auction_purge(struct char_data *ch, char *argument)$/;"	f
auction_sell	act.comm.c	/^void auction_sell(struct char_data *ch, char *argument)$/;"	f
auction_sold	act.comm.c	/^void auction_sold(struct char_data *ch)$/;"	f
auction_spam	act.comm.c	/^void auction_spam(struct auc_data *lot, struct char_data *ch, int subcmd)$/;"	f
auction_stat	act.comm.c	/^void auction_stat(struct char_data *ch, char *argument)$/;"	f
authtype_names	telnet.h	/^char *authtype_names[] = {$/;"	v
auto_equip	objsave.c	/^void auto_equip(struct char_data *ch, struct obj_data *obj, int location)$/;"	f
auto_save	config.c	/^char auto_save = YES;$/;"	v
autoassist	structs.h	/^   struct char_data *autoassist;  \/* The char to be autoassisted   	*\/ $/;"	m	struct:char_special_data
autoassisters	structs.h	/^   struct assisters_type *autoassisters;  \/* For players assisting char   *\/ $/;"	m	struct:char_data
autosave_time	config.c	/^int autosave_time = 5;$/;"	v
avenger	spec_assign.c	/^  SPECIAL(avenger);$/;"	v
bStandardInvis	structs.h	/^	bool bStandardInvis;	\/\/ Standard invisibility$/;"	m	class:GossipItem
background	db.c	/^char *background = NULL;	\/* background story		 *\/$/;"	v
backstab_mult	class.c	/^int backstab_mult(int level)$/;"	f
backstr	structs.h	/^   char *backstr;              \/* backup string for modify-str system  *\/$/;"	m	struct:descriptor_data
bacteria	spec_assign.c	/^  SPECIAL(bacteria);$/;"	v
bad_pws	structs.h	/^   byte	bad_pws;		\/* number of bad pw attemps this login	*\/$/;"	m	struct:descriptor_data
bad_pws	structs.h	/^   ubyte bad_pws;		\/* number of bad password attemps	*\/$/;"	m	struct:player_special_data_saved
balance_bits	oasis.h	/^  long balance_bits;$/;"	m	struct:oasis_olc_data
balance_mobs	balance.c	/^void balance_mobs(int mob_top) $/;"	f
balance_objs	balance.c	/^void balance_objs(int obj_top)$/;"	f
balance_world	balance.c	/^void balance_world(int mob_top, int obj_top)$/;"	f
ban_list	ban.c	/^struct ban_list_element *ban_list = NULL;$/;"	v
ban_list_element	db.h	/^struct ban_list_element$/;"	s
ban_types	ban.c	/^const char *ban_types[] =$/;"	v
banish	spec_assign.c	/^  SPECIAL(banish);$/;"	v
bank	spec_assign.c	/^  SPECIAL(bank);$/;"	v
bank	spec_procs.c	/^SPECIAL(bank);$/;"	v
bankAccount	shop.h	/^   int	 bankAccount;		\/* Store all gold over 15000 (disabled)	*\/$/;"	m	struct:shop_data
bank_gold	structs.h	/^   int	bank_gold;	\/* Gold the char has in a bank account	   *\/$/;"	m	struct:char_point_data
banzaii	castle.c	/^int banzaii(struct char_data * ch)$/;"	f
bashful	spec_assign.c	/^  SPECIAL(bashful);$/;"	v
basic_mud_log	utils.c	/^void basic_mud_log(const char *format, ...)$/;"	f
basic_skill_test	spell_parser.c	/^bool basic_skill_test(struct char_data * ch, int spellnum, bool perform)$/;"	f
battery_types	constants.c	/^const char *battery_types[] =$/;"	v
begin_hunting	graph.c	/^void begin_hunting(struct char_data *ch, struct char_data *vict)$/;"	f
beholder	spec_assign.c	/^  SPECIAL(beholder);$/;"	v
bfs_clear_queue	graph.c	/^void bfs_clear_queue(void)$/;"	f
bfs_dequeue	graph.c	/^void bfs_dequeue(void)$/;"	f
bfs_enqueue	graph.c	/^void bfs_enqueue(room_rnum room, int dir)$/;"	f
bfs_queue_struct	graph.c	/^struct bfs_queue_struct {$/;"	s	file:
birth	structs.h	/^   time_t birth;    \/* This represents the characters age                *\/$/;"	m	struct:time_data
birth	structs.h	/^   time_t birth;   \/* Time of birth of character     *\/$/;"	m	struct:char_file_u
bitvector	shop.h	/^   bitvector_t	 bitvector;	\/* Can attack? Use bank? Cast here?	*\/$/;"	m	struct:shop_data
bitvector	structs.h	/^   long \/*bitvector_t*\/	bitvector;	\/* To set chars bits                *\/$/;"	m	struct:obj_flag_data
bitvector	structs.h	/^   long \/*bitvector_t*\/	bitvector; \/* Tells which bits to set (AFF_XXX) *\/$/;"	m	struct:affected_type
bitvector	structs.h	/^   long \/*bitvector_t*\/	bitvector;$/;"	m	struct:obj_file_elem
bitvector_t	structs.h	/^typedef unsigned long int	bitvector_t;$/;"	t
blackjack_data	structs.h	/^struct blackjack_data$/;"	s
blast_room	spec_assign.c	/^  SPECIAL(blast_room);$/;"	v
blink_demon	spec_assign.c	/^  SPECIAL(blink_demon);$/;"	v
block_type	mail.h	/^   long	block_type;		\/* -1 if header block, -2 if last data block$/;"	m	struct:data_block_type_d
block_type	mail.h	/^   long	block_type;		\/* is this a header or data block?	*\/$/;"	m	struct:header_block_type_d
block_way	castle.c	/^int block_way(struct char_data * ch, int cmd, char *arg, room_rnum iIn_room,$/;"	f
blood_sucker	spec_assign.c	/^  SPECIAL(blood_sucker);$/;"	v
board_info	boards.c	/^struct board_info_type board_info[NUM_OF_BOARDS] = {$/;"	v
board_info_type	boards.h	/^struct board_info_type {$/;"	s
board_msginfo	boards.h	/^struct board_msginfo {$/;"	s
bonus	structs.h	/^   byte bonus;       \/* how many practices player gains per lev *\/$/;"	m	struct:wis_app_type
bool	structs.h	/^typedef char			bool;$/;"	t
boot_db	db.c	/^void boot_db(void)$/;"	f
boot_social_messages	act.social.c	/^void boot_social_messages(void)$/;"	f
boot_the_shops	shop.c	/^void boot_the_shops(FILE * shop_f, char *filename, int rec_count, $/;"	f
boot_time	db.c	/^time_t boot_time = 0;		\/* time of mud boot		 *\/$/;"	v
boot_world	db.c	/^void boot_world(void)$/;"	f
bounty_hunter	spec_assign.c	/^  SPECIAL(bounty_hunter);$/;"	v
branch	structs.h	/^    short branch;$/;"	m	class:ReleaseInfo
break_obj	fight.c	/^void break_obj(struct obj_data *obj, struct char_data *ch) {$/;"	f
bribe_mtrigger	dg_triggers.c	/^void bribe_mtrigger(char_data *ch, char_data *actor, int amount)$/;"	f
buf	db.h	/^char	buf[MAX_STRING_LENGTH];$/;"	v
buf	structs.h	/^  char *buf;$/;"	m	struct:mob_prog_act_list
buf1	db.h	/^char	buf1[MAX_STRING_LENGTH];$/;"	v
buf2	db.h	/^char	buf2[MAX_STRING_LENGTH];$/;"	v
buf_largecount	comm.c	/^int buf_largecount = 0;		\/* # of large buffers which exist *\/$/;"	v
buf_overflows	comm.c	/^int buf_overflows = 0;		\/* # of overflows of output *\/$/;"	v
buf_switches	comm.c	/^int buf_switches = 0;		\/* # of switches from small to large buf *\/$/;"	v
bufpool	comm.c	/^struct txt_block *bufpool = 0;	\/* pool of large output buffers *\/$/;"	v
bufptr	structs.h	/^   int  bufptr;			\/* ptr to end of current output		*\/$/;"	m	struct:descriptor_data
bufspace	structs.h	/^   int	bufspace;		\/* space left in the output buffer	*\/$/;"	m	struct:descriptor_data
build_player_index	db.c	/^void build_player_index(void)$/;"	f
built_on	house.h	/^   time_t built_on;		\/* date this house was built	*\/$/;"	m	struct:house_control_rec
burglar_left_scene	act.informative.c	/^bool burglar_left_scene(Burglary *burglary)$/;"	f
burglaries	db.c	/^Burglary *burglaries = NULL;$/;"	v
burgle_area_occupant	spec_assign.c	/^  SPECIAL(burgle_area_occupant);$/;"	v
burgle_area_occupant	spec_procs.c	/^SPECIAL(burgle_area_occupant);$/;"	v
burgle_exp	act.offensive.c	/^void burgle_exp(struct char_data *ch, int areatype) $/;"	f
burgle_flags	structs.h	/^   long burgle_flags;$/;"	m	struct:room_data
burgle_rooms	constants.c	/^const char *burgle_rooms[] =$/;"	v
burgledRooms	structs.h	/^	BurgledRoom burgledRooms[MAX_BURGLED_ROOMS]; $/;"	m	class:Burglary
buy_price	shop.c	/^int buy_price(struct obj_data * obj, int shop_nr, int bargain)$/;"	f
buyerid	structs.h	/^  int buyerid;$/;"	m	struct:auc_file_elem
buyerid	structs.h	/^  long buyerid;$/;"	m	struct:auc_data
buyername	structs.h	/^  char buyername[MAX_NAME_LENGTH + 1];$/;"	m	struct:auc_data
buyername	structs.h	/^  char buyername[MAX_NAME_LENGTH+1];$/;"	m	struct:auc_file_elem
byte	structs.h	/^typedef char			byte;$/;"	t
cGossip	structs.h	/^	char cGossip[MAX_INPUT_LENGTH];		\/\/ the text$/;"	m	class:GossipItem
cGossiper	structs.h	/^	char cGossiper[MAX_NAME_LENGTH];	\/\/ The gossiper$/;"	m	class:GossipItem
c_lion	spec_assign.c	/^  SPECIAL(c_lion);$/;"	v
calcSlotResult	casino.c	/^void calcSlotResult(struct char_data *ch, int reel[5], int amount)$/;"	f
calc_dam_amt	utils.c	/^int calc_dam_amt(struct char_data *ch, struct char_data *vict, int skillnum)$/;"	f
call_magic	spell_parser.c	/^int call_magic(struct char_data * caster, struct char_data * cvict,$/;"	f
canMake	act.other.c	/^bool canMake(ObjProductClass opc, struct obj_data *obj, char_data *ch) {$/;"	f
canSplit	casino.c	/^int canSplit(int playernum) $/;"	f
can_modify	olc.c	/^int can_modify(struct char_data * ch, int vnum)$/;"	f
can_take_obj	act.item.c	/^int can_take_obj(struct char_data * ch, struct obj_data * obj)$/;"	f
can_wear_finger	utils.c	/^  int can_wear_finger(struct char_data *ch, int where) {$/;"	f
carbon_copy	modify.c	/^void carbon_copy(struct descriptor_data *d, char *msg, int ccsize) {$/;"	f
card_names	spec_procs.c	/^const char *card_names[] =$/;"	v
cards	structs.h	/^        int cards[MAX_GAME_BETS * 2][6];\/\/ 5 cards for every player and every dealer and info card$/;"	m	struct:blackjack_data
carol1	spec_procs.c	/^char carol1[12][80] = {$/;"	v
carol2	spec_procs.c	/^char carol2[12][45] = {$/;"	v
carol3	spec_procs.c	/^char carol3[12][50] = {$/;"	v
carol4	spec_procs.c	/^char carol4[18][50] = {$/;"	v
caroller	spec_assign.c	/^  SPECIAL(caroller);$/;"	v
carried_by	structs.h	/^   struct char_data *carried_by;  \/* Carried by :NULL in room\/conta   *\/$/;"	m	struct:obj_data
carry_items	structs.h	/^   byte carry_items;		\/* Number of items carried		  *\/$/;"	m	struct:char_special_data
carry_w	structs.h	/^   sh_int carry_w;  \/* Maximum weight that can be carrried *\/$/;"	m	struct:str_app_type
carry_weight	structs.h	/^   int	carry_weight;		\/* Carried weight			  *\/$/;"	m	struct:char_special_data
carrying	structs.h	/^   struct obj_data *carrying;            \/* Head of list                  *\/$/;"	m	struct:char_data
casino	casino.h	/^SPECIAL(casino);$/;"	v
casino	spec_assign.c	/^  SPECIAL(casino);$/;"	v
casino_blackjack	db.c	/^struct blackjack_data casino_blackjack;$/;"	v
casino_race	db.c	/^struct game_data casino_race;$/;"	v
cassandra_in	act.wizard.c	/^void cassandra_in(struct char_data *ch)$/;"	f
cast_spell	spell_parser.c	/^int cast_spell(struct char_data * ch, struct char_data * tch,$/;"	f
castle_cleaner	castle.c	/^int castle_cleaner(struct char_data *ch, int cmd, int gripe)$/;"	f
castle_twin_proc	castle.c	/^int castle_twin_proc(struct char_data *ch, int cmd, char *arg, int ctlnum, char *twinname)$/;"	f
ch	structs.h	/^        struct char_data *ch;           \/\/ Gambler$/;"	m	struct:game_item
ch	structs.h	/^  struct char_data *ch;$/;"	m	struct:mob_prog_act_list
chID	quest.h	/^  long chID;$/;"	m	struct:quest_score_data
chID	structs.h	/^	long chID;		\/\/ Initiator$/;"	m	class:Burglary
chID	structs.h	/^  long chID;				\/\/ Target\/initiator ID$/;"	m	struct:event_data
ch_trigger_trap	act.informative.c	/^void ch_trigger_trap(struct char_data *ch, struct obj_data *obj)$/;"	f
cha	spells.h	/^   sh_int cha[NUM_CLASSES];$/;"	m	struct:spell_info_type
cha	structs.h	/^   sbyte cha;$/;"	m	struct:char_ability_data
change	structs.h	/^   int	change;	\/* How fast and what way does it change. *\/$/;"	m	struct:weather_data
changeDescription	reports.h	/^    char changeDescription[REPORT_SHORTDESC_LENGTH]; \/\/ Description of the chang$/;"	m	class:ReportChange
changeDescription	reports.h	/^    char changeDescription[REPORT_SHORTDESC_LENGTH]; \/\/ Reason for change - copied$/;"	m	class:Report
changeDescription	reports.h	/^  char changeDescription[REPORT_SHORTDESC_LENGTH]; \/\/ Description of the change$/;"	m	struct:reportchange_file_elem
changeNum	reports.h	/^    int changeNum;$/;"	m	class:ReportChange
changeNum	reports.h	/^  int changeNum;$/;"	m	struct:reportchange_file_elem
changeRelease	reports.h	/^    ReleaseInfo changeRelease;  \/\/ Release info at change$/;"	m	class:ReportChange
changeTime	reports.h	/^    time_t changeTime;          \/\/ Time of change$/;"	m	class:ReportChange
changeTime	reports.h	/^  time_t changeTime;    \/\/ Time of change$/;"	m	struct:reportchange_file_elem
change_alignment	fight.c	/^void change_alignment(struct char_data * ch, struct char_data * victim)$/;"	f
changes	reports.h	/^    list<ReportChange> changes;    \/\/ List of the changes made to report $/;"	m	class:Report
char_ability_data	structs.h	/^struct char_ability_data$/;"	s
char_affected_by_timer	handler.c	/^struct timer_type *char_affected_by_timer(struct char_data *ch, int type)$/;"	f
char_auto	act.social.c	/^  char *char_auto;$/;"	m	struct:social_messg	file:
char_can_enter	act.movement.c	/^int char_can_enter(struct char_data *ch, struct room_data *room, bool show)$/;"	f
char_data	dg_scripts.h	/^typedef struct char_data char_data;$/;"	t
char_data	structs.h	/^struct char_data$/;"	s
char_disguised	structs.h	/^        long char_disguised;    \/* Mob disguised as     *\/$/;"	m	struct:primal_extend_data
char_file_u	structs.h	/^struct char_file_u$/;"	s
char_found	act.social.c	/^  char *char_found;		\/* if NULL, read no further, ignore args *\/$/;"	m	struct:social_messg	file:
char_from_room	handler.c	/^void char_from_room(struct char_data * ch)$/;"	f
char_has_ability	handler.c	/^bool char_has_ability(struct char_data *ch, struct affected_type *af)$/;"	f
char_has_eq_abil	handler.c	/^bool char_has_eq_abil(struct char_data *ch, struct affected_type *af, int type)$/;"	f
char_has_eq_affect	handler.c	/^bool char_has_eq_affect(struct char_data *ch, struct affected_type *af)$/;"	f
char_help	class.c	/^const char *char_help = $/;"	v
char_memorised	structs.h	/^        long char_memorised;    \/* Mob memorised        *\/$/;"	m	struct:primal_extend_data
char_no_arg	act.social.c	/^  char *char_no_arg;$/;"	m	struct:social_messg	file:
char_player_data	structs.h	/^struct char_player_data$/;"	s
char_point_data	structs.h	/^struct char_point_data$/;"	s
char_special_data	structs.h	/^struct char_special_data$/;"	s
char_special_data_saved	structs.h	/^struct char_special_data_saved$/;"	s
char_specials	structs.h	/^   struct char_special_data char_specials;	\/* PC\/NPC specials	  *\/$/;"	m	struct:char_data
char_specials_saved	structs.h	/^   struct char_special_data_saved char_specials_saved;$/;"	m	struct:char_file_u
char_to_room	handler.c	/^void char_to_room(struct char_data * ch, room_rnum room)$/;"	f
char_to_store	db.c	/^void char_to_store(struct char_data * ch, struct char_file_u * st)$/;"	f
character	structs.h	/^   struct char_data *character;	\/* linked to char			*\/$/;"	m	struct:descriptor_data
character_list	db.c	/^struct char_data *character_list = NULL;  \/* global linked list of chars *\/ $/;"	v
charge_for_remort_ability	act.other.c	/^bool charge_for_remort_ability(struct char_data *ch, long lAbility)$/;"	f
charm_room	act.other.c	/^void charm_room(struct char_data * ch)$/;"	f
chclass	structs.h	/^   byte chclass;       \/* PC \/ NPC's class		       *\/$/;"	m	struct:char_player_data
chclass	structs.h	/^   byte chclass;$/;"	m	struct:char_file_u
chdir	sysdep.h	287;"	d
check_autowiz	limits.c	/^void check_autowiz(struct char_data * ch)$/;"	f
check_blackjack	casino.c	/^void check_blackjack() $/;"	f
check_env_atmosphere	act.movement.c	/^int check_env_atmosphere(struct char_data *ch, int atmos)$/;"	f
check_env_environ	act.movement.c	/^int check_env_environ(struct char_data *ch, int environ)$/;"	f
check_env_gravity	act.movement.c	/^int check_env_gravity(struct char_data *ch, int gravity)$/;"	f
check_env_temperature	act.movement.c	/^int check_env_temperature(struct char_data *ch, int temperature)$/;"	f
check_environment_effect	act.movement.c	/^int check_environment_effect(struct char_data *ch)$/;"	f
check_for_event	act.informative.c	/^int check_for_event(int event, zone_rnum zone) $/;"	f
check_games	casino.c	/^void check_games() $/;"	f
check_idle_passwords	comm.c	/^void check_idle_passwords(void)$/;"	f
check_idling	limits.c	/^void check_idling(struct char_data * ch)$/;"	f
check_killer	fight.c	/^void check_killer(struct char_data * ch, struct char_data * vict)$/;"	f
check_mobile_string	genmob.c	/^void check_mobile_string(mob_vnum i, char **string, const char *dscr)$/;"	f
check_mobile_strings	genmob.c	/^void check_mobile_strings(struct char_data *mob)$/;"	f
check_object	db.c	/^int check_object(struct obj_data *obj)$/;"	f
check_object_level	db.c	/^int check_object_level(struct obj_data *obj, int val)$/;"	f
check_object_spell_number	db.c	/^int check_object_spell_number(struct obj_data *obj, int val)$/;"	f
check_races	casino.c	/^void check_races() $/;"	f
check_spell_values	db.c	/^int check_spell_values(int spell_type, int lineno, sh_int intl, sh_int wis, sh_int dex, sh_int str, $/;"	f
check_start_rooms	db.c	/^void check_start_rooms(void)$/;"	f
check_vampire	act.movement.c	/^int check_vampire(struct char_data *ch)$/;"	f
check_world_environment	act.movement.c	/^void check_world_environment(void)$/;"	f
checkpointing	comm.c	/^RETSIGTYPE checkpointing(int sig)$/;"	f
circle_follow	utils.c	/^bool circle_follow(struct char_data * ch, struct char_data * victim)$/;"	f
circle_random	random.c	/^unsigned long circle_random(void)$/;"	f
circle_reboot	comm.c	/^int circle_reboot = 0;		\/* reboot the game after a shutdown *\/$/;"	v
circle_restrict	db.c	/^int circle_restrict = 0;	\/* level of game restriction	 *\/$/;"	v
circle_shutdown	comm.c	/^int circle_shutdown = 0;	\/* clean shutdown *\/$/;"	v
circle_sleep	comm.c	/^void circle_sleep(struct timeval *timeout)$/;"	f
circle_srandom	random.c	/^void circle_srandom(unsigned long initial_seed)$/;"	f
circlemud_version	constants.c	/^cpp_extern const char *circlemud_version =$/;"	v
citizen	spec_assign.c	/^  SPECIAL(citizen);$/;"	v
cityguard	spec_assign.c	/^  SPECIAL(cityguard);$/;"	v
cityguard	spec_procs.c	/^SPECIAL(cityguard);$/;"	v
clan	clan.c	/^struct clan_rec clan[MAX_CLANS];$/;"	v
clan	structs.h	/^   int clan;			\/* Clan ID *\/$/;"	m	struct:player_special_data_saved
clan_can_hear	clan.c	/^int clan_can_hear(struct descriptor_data *d, int c) {$/;"	f
clan_check_priv	clan.c	/^int clan_check_priv (struct char_data *ch, int priv)$/;"	f
clan_coinage	clan.c	/^void clan_coinage (int c, int amount)$/;"	f
clan_enablers	clan.c	/^char clan_enablers[NUM_CO+1][20] = {   "hall"     ,"healer"   ,"talk"     ,$/;"	v
clan_guard	spec_assign.c	/^  SPECIAL(clan_guard);$/;"	v
clan_healer	spec_assign.c	/^  SPECIAL(clan_healer);$/;"	v
clan_levels	clan.c	/^const int clan_levels[] = {$/;"	v
clan_pk_update	clan.c	/^void clan_pk_update (struct char_data *winner, struct char_data *loser)$/;"	f
clan_privileges	clan.c	/^char clan_privileges[NUM_CP+1][20] = { "recruit"  ,"promote"  ,"demote"   ,$/;"	v
clan_rank	structs.h	/^   ubyte clan_rank;		\/* Clan Rank *\/$/;"	m	struct:player_special_data_saved
clan_rec	clan.h	/^struct clan_rec $/;"	s
clan_rel_change	clan.c	/^void clan_rel_change (int us, int them, int amt)$/;"	f
clan_rel_inc	clan.c	/^void clan_rel_inc (struct char_data *ch, struct char_data *vict, int amt)$/;"	f
clan_room_dirs	clan.c	/^int clan_room_dirs (char *arg) {$/;"	f
clan_tax_update	clan.c	/^void clan_tax_update (struct char_data *ch, struct char_data *vict)$/;"	f
class_abbrevs	class.c	/^const char *class_abbrevs[] =$/;"	v
class_help	class.c	/^const char *class_help = $/;"	v
class_menu	class.c	/^const char *class_menu =$/;"	v
class_modifiers	constants.c	/^cpp_extern const float class_modifiers[NUM_CLASSES] =$/;"	v
cleaning	castle.c	/^SPECIAL(cleaning);$/;"	v
cleanup_olc	oasis.c	/^void cleanup_olc(struct descriptor_data *d, byte cleanup_type)$/;"	f
clearMemory	mobact.c	/^void clearMemory(struct char_data * ch)$/;"	f
clear_char	db.c	/^void clear_char(struct char_data * ch)$/;"	f
clear_object	db.c	/^void clear_object(struct obj_data * obj)$/;"	f
clear_screen	oasis.c	/^void clear_screen(struct descriptor_data *d)$/;"	f
cleric	spec_assign.c	/^  SPECIAL(cleric);$/;"	v
cleric2	spec_assign.c	/^  SPECIAL(cleric2);$/;"	v
clone	spec_assign.c	/^  SPECIAL(clone);  \/* clone for clone spell      *\/$/;"	v
close1	shop.h	/^   int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close2	shop.h	/^   int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close_socket	comm.c	/^void close_socket(struct descriptor_data *d)$/;"	f
clr	screen.h	37;"	d
cmd	act.wizard.c	/^    const char *cmd;$/;"	m	struct:set_struct	file:
cmd	db.h	/^   struct reset_com *cmd;   \/* command table for reset	          *\/$/;"	m	struct:zone_data
cmd	dg_scripts.h	/^  char *cmd;                           \/* command, or NULL for generic *\/$/;"	m	struct:script_memory
cmd	dg_scripts.h	/^  char *cmd;                           \/* one line of a trigger *\/$/;"	m	struct:cmdlist_element
cmd_bhelp	constants.c	/^const char *cmd_bhelp[NUM_CMD_TYPES] =$/;"	v
cmd_door	act.movement.c	/^const char *cmd_door[] =$/;"	v
cmd_emote	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_info	interpreter.c	/^struct command_info cmd_info[] = {$/;"	v
cmd_otrig	dg_triggers.c	/^int cmd_otrig(obj_data *obj, char_data *actor, char *cmd,$/;"	f
cmd_puke	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_say	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_slap	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_sort_info	act.informative.c	/^} *cmd_sort_info = NULL;$/;"	v
cmd_tell	shop.c	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_types	constants.c	/^const char *cmd_types[NUM_CMD_TYPES + 1] =$/;"	v
cmdlist	dg_scripts.h	/^    struct cmdlist_element *cmdlist;   \/* top of command list             *\/$/;"	m	struct:trig_data
cmdlist_element	dg_scripts.h	/^struct cmdlist_element {$/;"	s
color_liquid	constants.c	/^const char *color_liquid[] =$/;"	v
color_perc	act.other.c	/^void color_perc(char col[], int curr, int max)$/;"	f
colour_headings	constants.c	/^const char *colour_headings[] =$/;"	v
colour_settings	structs.h	/^        byte colour_settings[NUM_COLOUR_SETTINGS];$/;"	m	struct:primal_extend_data
combat_list	fight.c	/^struct char_data *combat_list = NULL;	\/* head of l-list of fighting chars *\/$/;"	v
comlist	structs.h	/^  char *comlist;$/;"	m	struct:mob_prog_data
command	db.h	/^   char	command;   \/* current command                      *\/$/;"	m	struct:reset_com
command	dg_objcmd.c	/^   char *command;$/;"	m	struct:obj_command_info	file:
command	dg_wldcmd.c	/^    char *command;$/;"	m	struct:wld_command_info	file:
command	interpreter.h	/^   const char *command;$/;"	m	struct:command_info
command_info	interpreter.h	/^struct command_info {$/;"	s
command_interpreter	interpreter.c	/^void command_interpreter(struct char_data *ch, char *argument)$/;"	f
command_mtrigger	dg_triggers.c	/^int command_mtrigger(char_data *actor, char *cmd, char *argument)$/;"	f
command_otrigger	dg_triggers.c	/^int command_otrigger(char_data *actor, char *cmd, char *argument)$/;"	f
command_pointer	dg_objcmd.c	/^   void        (*command_pointer)(obj_data *obj, char *argument, int cmd, int subcmd);$/;"	m	struct:obj_command_info	file:
command_pointer	dg_wldcmd.c	/^    void (*command_pointer)$/;"	m	struct:wld_command_info	file:
command_pointer	interpreter.h	/^   void	(*command_pointer)$/;"	m	struct:command_info
command_wtrigger	dg_triggers.c	/^int command_wtrigger(char_data *actor, char *cmd, char *argument)$/;"	f
compareAffectDuration	act.informative.c	/^int compareAffectDuration(const void *l, const void *r)$/;"	f
compareCharLevelA	act.informative.c	/^int compareCharLevelA(const void *l, const void *r)$/;"	f
compareCharLevelD	act.informative.c	/^int compareCharLevelD(const void *l, const void *r)$/;"	f
compareCharName	act.informative.c	/^int compareCharName(const void *l, const void *r)$/;"	f
compare_mob_level	balance.c	/^int compare_mob_level(const void *x, const void *y)$/;"	f
compare_obj_level	balance.c	/^int compare_obj_level(const void *x, const void *y)$/;"	f
compare_spells	spec_procs.c	/^int compare_spells(const void *x, const void *y)$/;"	f
compare_spells_levela	spec_procs.c	/^int compare_spells_levela(const void *x, const void *y)$/;"	f
compare_spells_leveld	spec_procs.c	/^int compare_spells_leveld(const void *x, const void *y)$/;"	f
compute_armor_class	fight.c	/^int compute_armor_class(struct char_data *ch, bool divide)$/;"	f
con	spells.h	/^   sh_int con[NUM_CLASSES];$/;"	m	struct:spell_info_type
con	structs.h	/^   sbyte con;$/;"	m	struct:char_ability_data
con_app	constants.c	/^cpp_extern const struct con_app_type con_app[] = {$/;"	v
con_app_type	structs.h	/^struct con_app_type$/;"	s
con_type	oasis.c	/^  int con_type;$/;"	m	struct:olc_scmd_info_t	file:
conc_bouncer	spec_assign.c	/^  SPECIAL(conc_bouncer); \/\/ Artus: Rhcp's Concert Bouncer$/;"	v
conditions	structs.h	/^   sbyte conditions[3];         \/* Drunk, full, thirsty			*\/$/;"	m	struct:player_special_data_saved
connected	structs.h	/^   int	connected;		\/* mode of 'connectedness'		*\/$/;"	m	struct:descriptor_data
connected_types	constants.c	/^const char *connected_types[] =$/;"	v
constrictor	spec_assign.c	/^  SPECIAL(constrictor);$/;"	v
construction_worker	spec_assign.c	/^  SPECIAL(construction_worker);$/;"	v
consumedOnFail	structs.h	/^    bool consumedOnFail;$/;"	m	class:ObjMaterialClass
consumedOnSuccess	structs.h	/^    bool consumedOnSuccess;$/;"	m	class:ObjMaterialClass
container_bits	constants.c	/^const char *container_bits[] =$/;"	v
contains	corpses.h	/^    std::list<Contain> contains;  $/;"	m	class:Corpse
contains	corpses.h	/^    std::list<class Contain> contains;  $/;"	m	class:Contain
contains	structs.h	/^   struct obj_data *contains;     \/* Contains objects                 *\/$/;"	m	struct:obj_data
contents	structs.h	/^   struct obj_data *contents;   \/* List of items in room              *\/$/;"	m	struct:room_data
context	dg_scripts.h	/^  long context;                                \/* 0: global context *\/$/;"	m	struct:trig_var_data
context	dg_scripts.h	/^  long context;                                \/* current context for statics *\/$/;"	m	struct:script_data
copyGossip	act.comm.c	/^void GossipItem::copyGossip(GossipItem target)$/;"	f	class:GossipItem
copyReport	reports.cpp	/^ReportList::copyReport(struct descriptor_data * d, int number, int mode)$/;"	f	class:ReportList
copy_ex_descriptions	genolc.c	/^void copy_ex_descriptions(struct extra_descr_data **to, struct extra_descr_data *from)$/;"	f
copy_list	genshp.c	/^void copy_list(sh_int **tlist, sh_int *flist)$/;"	f
copy_mobile	genmob.c	/^int copy_mobile(struct char_data *to, struct char_data *from)$/;"	f
copy_mobile_strings	genmob.c	/^int copy_mobile_strings(struct char_data *t, struct char_data *f)$/;"	f
copy_object	genobj.c	/^int copy_object(struct obj_data *to, struct obj_data *from)$/;"	f
copy_object_main	genobj.c	/^static int copy_object_main(struct obj_data *to, struct obj_data *from, int free_object)$/;"	f	file:
copy_object_preserve	genobj.c	/^int copy_object_preserve(struct obj_data *to, struct obj_data *from)$/;"	f
copy_object_strings	genobj.c	/^void copy_object_strings(struct obj_data *to, struct obj_data *from)$/;"	f
copy_room	genwld.c	/^int copy_room(struct room_data *to, struct room_data *from)$/;"	f
copy_room_strings	genwld.c	/^int copy_room_strings(struct room_data *dest, struct room_data *source)$/;"	f
copy_shop	genshp.c	/^void copy_shop(struct shop_data *tshop, struct shop_data *fshop)$/;"	f
copy_type_list	genshp.c	/^void copy_type_list(struct shop_buy_data **tlist, struct shop_buy_data *flist)$/;"	f
core_dump	utils.h	78;"	d
core_dump_real	utils.c	/^void core_dump_real(const char *who, int line)$/;"	f
corpseData	db.c	/^CorpseData corpseData = CorpseData();$/;"	v
corpses	corpses.h	/^    std::list<Corpse> corpses;$/;"	m	class:CorpseData
corridor_guard	spec_assign.c	/^  SPECIAL(corridor_guard);$/;"	v
cost	structs.h	/^   int	cost;		\/* Value when sold (gp.)            *\/$/;"	m	struct:obj_flag_data
cost_per_day	structs.h	/^   int	cost_per_day;	\/* Cost to keep pr. real day        *\/$/;"	m	struct:obj_flag_data
count_alias_records	db.c	/^int count_alias_records(FILE *fl)$/;"	f
count_commands	genzon.c	/^int count_commands(struct reset_com *list)$/;"	f
count_hash_records	db.c	/^int count_hash_records(FILE * fl)$/;"	f
count_pages	modify.c	/^int count_pages(char *str, int page_width, int page_length)$/;"	f
cowboy_hat	spec_assign.c	/^  SPECIAL(cowboy_hat);$/;"	v
cpp_extern	sysdep.h	332;"	d
cpp_extern	sysdep.h	334;"	d
craps	spec_assign.c	/^  SPECIAL(craps);$/;"	v
craps1	spec_assign.c	/^  SPECIAL(craps1);$/;"	v
crash_file_timeout	config.c	/^int crash_file_timeout = 178;$/;"	v
createObject	corpses.cpp	/^struct obj_data *Contain::createObject() {$/;"	f	class:Contain
create_burgle_encounter	act.informative.c	/^void create_burgle_encounter(struct char_data *ch)$/;"	f
create_burgle_rooms	act.offensive.c	/^room_rnum create_burgle_rooms(struct char_data *ch, int area_type, int dir) {$/;"	f
create_char	db.c	/^struct char_data *create_char(void)$/;"	f
create_entry	db.c	/^int create_entry(char *name)$/;"	f
create_event_curfew	act.wizard.c	/^void create_event_curfew(struct char_data *ch, char *arg)$/;"	f
create_event_election	act.wizard.c	/^void create_event_election(struct char_data *ch, char *arg)$/;"	f
create_event_fire	act.wizard.c	/^void create_event_fire(struct char_data *ch, char *arg)$/;"	f
create_event_goldrush	act.wizard.c	/^void create_event_goldrush(struct char_data *ch, char *arg) $/;"	f
create_event_happy	act.wizard.c	/^void create_event_happy(struct char_data *ch)$/;"	f
create_money	handler.c	/^struct obj_data *create_money(int amount)$/;"	f
create_new_burglary	act.offensive.c	/^Burglary *create_new_burglary(struct char_data *ch)$/;"	f
create_new_zone	genzon.c	/^zone_rnum create_new_zone(zone_vnum vzone_num, const char **error)$/;"	f
create_obj	db.c	/^struct obj_data *create_obj(void)$/;"	f
create_suit	spec_procs.c	/^void create_suit(struct char_data *ch) {$/;"	f
create_world_index	genzon.c	/^void create_world_index(int znum, const char *type)$/;"	f
credits	db.c	/^char *credits = NULL;		\/* game credits			 *\/$/;"	v
cryogenicist	objsave.c	/^SPECIAL(cryogenicist);$/;"	v
cryogenicist	spec_assign.c	/^  SPECIAL(cryogenicist);$/;"	v
ctypes	act.informative.c	/^const char *ctypes[] = { "off", "sparse", "normal", "complete", "\\n" };$/;"	v
curr_state	dg_scripts.h	/^    struct cmdlist_element *curr_state;        \/* ptr to current line of trigger  *\/$/;"	m	struct:trig_data
customer_string	shop.c	/^char *customer_string(int shop_nr, int detailed)$/;"	f
cvsUpToDate	structs.h	/^    bool cvsUpToDate;$/;"	m	class:ReleaseInfo
cyn	oasis.c	/^const char *nrm, *grn, *cyn, *yel;$/;"	v
dam_message	fight.c	/^void dam_message(int dam, struct char_data * ch, struct char_data * victim,$/;"	f
damage	corpses.h	/^    sh_int damage;     $/;"	m	class:Corpse
damage	fight.c	/^int damage(struct char_data * ch, struct char_data * victim, int dam, int attacktype, bool vcheck)$/;"	f
damage	structs.h	/^   sh_int damage;		  \/* State of item		      *\/$/;"	m	struct:obj_data
damage	structs.h	/^   sh_int damage;$/;"	m	struct:obj_file_elem
damage_equipment	fight.c	/^void damage_equipment(struct char_data *ch) {$/;"	f
damage_obj	fight.c	/^void damage_obj(struct obj_data *obj, int damage, struct char_data *ch) {$/;"	f
damnodice	structs.h	/^   byte damnodice;          \/* The number of damage dice's	       *\/$/;"	m	struct:mob_special_data
damroll	structs.h	/^   sh_int \/*ubyte*\/  damroll;  \/* Any bonus or penalty to the damage roll *\/$/;"	m	struct:char_point_data
damsizedice	structs.h	/^   byte damsizedice;        \/* The size of the damage dice's           *\/$/;"	m	struct:mob_special_data
darkportal	spec_assign.c	/^  SPECIAL(darkportal);$/;"	v
data	shop.h	/^   int data[100];$/;"	m	struct:stack_data
data_block_type	mail.h	/^typedef struct data_block_type_d data_block_type;$/;"	t
data_block_type_d	mail.h	/^struct data_block_type_d {$/;"	s
data_type	dg_scripts.h	/^    byte data_type;                    \/* type of game_data for trig      *\/$/;"	m	struct:trig_data
date	db.h	/^   time_t date;$/;"	m	struct:ban_list_element
date	structs.h	/^    char date[30];$/;"	m	class:ReleaseInfo
day	structs.h	/^   int hours, day, month;$/;"	m	struct:time_info_data
days	spec_procs.c	/^char days[12][5] = {$/;"	v
deadlyblade	spec_assign.c	/^  SPECIAL(deadlyblade);$/;"	v
death_cry	fight.c	/^void death_cry(struct char_data * ch)$/;"	f
death_mtrigger	dg_triggers.c	/^int death_mtrigger(char_data *ch, char_data *actor)$/;"	f
deaths	clan.h	/^  int deaths[MAX_CLANS];                \/* Clan Deaths            *\/$/;"	m	struct:clan_rec
default_colour_codes	constants.c	/^cpp_extern const int default_colour_codes[] =$/;"	v
default_item_damage	constants.c	/^cpp_extern const int default_item_damage[] = $/;"	v
default_mob	act.build.c	/^  sh_int default_mob;	\/* PC OLC default mob proto	*\/$/;"	m	struct:obuild_olc_data	file:
default_obj	act.build.c	/^  sh_int default_obj;	\/* PC OLC default obj proto	*\/$/;"	m	struct:obuild_olc_data	file:
default_pos	structs.h	/^   byte default_pos;        \/* Default position for NPC                *\/$/;"	m	struct:mob_special_data
default_room	act.build.c	/^  sh_int default_room;	\/* PC OLC default room proto	*\/$/;"	m	struct:obuild_olc_data	file:
default_zmob	act.build.c	/^  int default_zmob;	\/* PC Zone mob default		*\/$/;"	m	struct:obuild_olc_data	file:
defensive	structs.h	/^   sh_int defensive;$/;"	m	struct:dex_app_type
delenn	spec_assign.c	/^  SPECIAL(delenn); 	\/* Delenn*\/$/;"	v
delete_command	genzon.c	/^void delete_command(struct zone_data *zone, int pos)$/;"	f
delete_doubledollar	interpreter.c	/^char *delete_doubledollar(char *string)$/;"	f
delete_mobile	genmob.c	/^int delete_mobile(mob_rnum refpt)$/;"	f
delete_room	genwld.c	/^int delete_room(room_rnum rnum)$/;"	f
demote_level	class.c	/^void demote_level(struct char_data * ch,int newlevel, const char *reason)$/;"	f
depth	dg_scripts.h	/^    int depth;                         \/* depth into nest ifs\/whiles\/etc  *\/$/;"	m	struct:trig_data
desc	oasis.h	/^  struct extra_descr_data *desc;$/;"	m	struct:oasis_olc_data
desc	structs.h	/^   struct descriptor_data *desc;         \/* NULL for mobiles              *\/$/;"	m	struct:char_data
desc	structs.h	/^  char desc[MAX_STRING_LENGTH + 1];	\/\/ Event description$/;"	m	struct:event_data
desc_num	structs.h	/^   int	desc_num;		\/* unique num assigned to desc		*\/$/;"	m	struct:descriptor_data
description	clan.h	/^  char description[CLAN_DESC_LENGTH];   \/* Clan Description       *\/$/;"	m	struct:clan_rec
description	corpses.h	/^    char *description;$/;"	m	class:Corpse
description	quest.h	/^  char description[MAX_INPUT_LENGTH+1];$/;"	m	struct:trivia_data
description	structs.h	/^   char	*description;		  \/* When in room                     *\/$/;"	m	struct:obj_data
description	structs.h	/^   char	*description;             \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description	structs.h	/^   char	*description;           \/* Shown when entered                 *\/$/;"	m	struct:room_data
description	structs.h	/^   char	*description;  \/* Extra descriptions                   *\/$/;"	m	struct:char_player_data
description	structs.h	/^   char	description[EXDSCR_LENGTH];$/;"	m	struct:char_file_u
descriptor	structs.h	/^   socket_t	descriptor;	\/* file descriptor for socket		*\/$/;"	m	struct:descriptor_data
descriptor_data	structs.h	/^struct descriptor_data$/;"	s
descriptor_list	comm.c	/^struct descriptor_data *descriptor_list = NULL;		\/* master desc list *\/$/;"	v
destroy_event_curfew	act.wizard.c	/^void destroy_event_curfew(struct char_data *ch, struct event_data *ev)$/;"	f
destroy_event_election	act.wizard.c	/^void destroy_event_election(struct char_data *ch, struct event_data *ev)$/;"	f
destroy_event_fire	act.wizard.c	/^void destroy_event_fire(struct char_data *ch, struct event_data *ev)$/;"	f
destroy_event_goldrush	act.wizard.c	/^void destroy_event_goldrush(struct char_data *ch, struct event_data *ev)$/;"	f
destroy_event_happy	act.wizard.c	/^void destroy_event_happy(struct char_data *ch, struct event_data *ev)$/;"	f
dex	spells.h	/^   sh_int dex[NUM_CLASSES];$/;"	m	struct:spell_info_type
dex	structs.h	/^   sbyte dex;$/;"	m	struct:char_ability_data
dex_app	constants.c	/^cpp_extern const struct dex_app_type dex_app[] = {$/;"	v
dex_app_skill	constants.c	/^cpp_extern const struct dex_skill_type dex_app_skill[] = {$/;"	v
dex_app_type	structs.h	/^struct dex_app_type$/;"	s
dex_skill_type	structs.h	/^struct dex_skill_type$/;"	s
dg_act_check	comm.c	/^int dg_act_check;              \/* toggle for act_trigger *\/$/;"	v
dg_global_pulse	comm.c	/^unsigned long dg_global_pulse = 0; \/* number of pulses since game start *\/$/;"	v
dg_obj_trigger	dg_db_scripts.c	/^void dg_obj_trigger(char *line, struct obj_data *obj)$/;"	f
dg_olc_script_copy	dg_olc.c	/^void dg_olc_script_copy(struct descriptor_data *d)$/;"	f
dg_olc_script_free	dg_olc.c	/^void dg_olc_script_free(struct descriptor_data *d)$/;"	f
dg_owner_purged	dg_scripts.c	/^int dg_owner_purged;$/;"	v
dg_read_trigger	dg_db_scripts.c	/^void dg_read_trigger(FILE *fp, void *proto, int type)$/;"	f
dg_room_of_obj	dg_scripts.c	/^struct room_data *dg_room_of_obj(struct obj_data *obj)$/;"	f
dg_script_edit_parse	dg_olc.c	/^int dg_script_edit_parse(struct descriptor_data *d, char *arg)$/;"	f
dg_script_menu	dg_olc.c	/^void dg_script_menu(struct descriptor_data *d)$/;"	f
diag_char_to_char	act.informative.c	/^void diag_char_to_char(struct char_data * i, struct char_data * ch)$/;"	f
dice	utils.c	/^int dice(int number, int size)$/;"	f
die	fight.c	/^void die(struct char_data * ch, struct char_data *killer, char *msg)$/;"	f
die_assisting	utils.c	/^void die_assisting(struct char_data * ch)$/;"	f
die_clone	utils.c	/^void die_clone(struct char_data *ch, struct char_data *killer) {$/;"	f
die_follower	utils.c	/^void die_follower(struct char_data * ch)$/;"	f
die_msg	structs.h	/^   struct msg_type die_msg;	\/* messages when death			*\/$/;"	m	struct:message_type
digits	act.informative.c	/^int digits(long number)$/;"	f
dimensional_gate	spec_assign.c	/^  SPECIAL(dimensional_gate); \/* spec proc for gate spell *\/$/;"	v
dir	graph.c	/^  char dir;$/;"	m	struct:bfs_queue_struct	file:
dir_option	structs.h	/^   struct room_direction_data *dir_option[NUM_OF_DIRS]; \/* Directions *\/$/;"	m	struct:room_data
dirs	constants.c	/^const char *dirs[] =$/;"	v
discrete_load	db.c	/^void discrete_load(FILE * fl, int mode, char *filename, char *zonefilename,$/;"	f
dispAddMenu	reports.cpp	/^ReportList::dispAddMenu(struct descriptor_data *d)$/;"	f	class:ReportList
dispEditMenu	reports.cpp	/^ReportList::dispEditMenu(struct descriptor_data *d)$/;"	f	class:ReportList
dispStateMenu	reports.cpp	/^ReportList::dispStateMenu(struct descriptor_data *d)$/;"	f	class:ReportList
dispTypeMenu	reports.cpp	/^ReportList::dispTypeMenu(struct descriptor_data *d)$/;"	f	class:ReportList
display_commands	act.informative.c	/^void display_commands(struct char_data *ch, struct char_data *vict, $/;"	f
disposable	spec_assign.c	/^  SPECIAL(disposable);$/;"	v
do_action	act.informative.c	/^ACMD(do_action);$/;"	v
do_action	act.social.c	/^ACMD(do_action);$/;"	v
do_action	interpreter.c	/^ACMD(do_action);$/;"	v
do_action	objsave.c	/^ACMD(do_action);$/;"	v
do_action	shop.c	/^ACMD(do_action);$/;"	v
do_adrenaline	interpreter.c	/^ACMD(do_adrenaline);$/;"	v
do_advance	act.wizard.c	/^ACMD(do_advance);$/;"	v
do_advance	interpreter.c	/^ACMD(do_advance);$/;"	v
do_affects	interpreter.c	/^ACMD(do_affects);  $/;"	v
do_alias	interpreter.c	/^ACMD(do_alias);$/;"	v
do_ambush	act.offensive.c	/^ACMD(do_ambush);$/;"	v
do_ambush	interpreter.c	/^ACMD(do_ambush);$/;"	v
do_assist	act.offensive.c	/^ACMD(do_assist);$/;"	v
do_assist	interpreter.c	/^ACMD(do_assist);$/;"	v
do_at	act.wizard.c	/^ACMD(do_at);$/;"	v
do_at	interpreter.c	/^ACMD(do_at);$/;"	v
do_attach	interpreter.c	/^ACMD(do_attach);$/;"	v
do_attend_wounds	interpreter.c	/^ACMD(do_attend_wounds);$/;"	v
do_auction	interpreter.c	/^ACMD(do_auction);$/;"	v
do_auto_exits	act.informative.c	/^void do_auto_exits(struct char_data * ch)$/;"	f
do_autoassist	interpreter.c	/^ACMD(do_autoassist);$/;"	v
do_balance	act.wizard.c	/^ACMD(do_balance);$/;"	v
do_balance	interpreter.c	/^ACMD(do_balance); \/* ARTUS - Rebalance *\/$/;"	v
do_ban	ban.c	/^ACMD(do_ban);$/;"	v
do_ban	interpreter.c	/^ACMD(do_ban);$/;"	v
do_bash	act.offensive.c	/^ACMD(do_bash);$/;"	v
do_bearhug	act.offensive.c	/^ACMD(do_bearhug);$/;"	v
do_berserk	interpreter.c	/^ACMD(do_berserk);$/;"	v
do_bite	interpreter.c	/^ACMD(do_bite);$/;"	v
do_blackjack	interpreter.c	/^ACMD(do_blackjack); $/;"	v
do_bounties	act.informative.c	/^ACMD(do_bounties);$/;"	v
do_bounties	interpreter.c	/^ACMD(do_bounties);$/;"	v
do_breakin	interpreter.c	/^ACMD(do_breakin);$/;"	v
do_burgle	interpreter.c	/^ACMD(do_burgle);$/;"	v
do_cast	interpreter.c	/^ACMD(do_cast);$/;"	v
do_cast	spell_parser.c	/^ACMD(do_cast);$/;"	v
do_change	interpreter.c	/^ACMD(do_change);   $/;"	v
do_charge	act.other.c	/^ACMD(do_charge);$/;"	v
do_charge	interpreter.c	/^ACMD(do_charge);$/;"	v
do_cheat	interpreter.c	/^ACMD(do_cheat); \/\/ Artus> Can't set myself back up.. Oops. $/;"	v
do_clan	interpreter.c	/^ACMD(do_clan); \/* ARTUS *\/$/;"	v
do_clan_about	clan.c	/^void do_clan_about (struct char_data *ch, char *arg) {$/;"	f
do_clan_application	clan.c	/^void do_clan_application( struct char_data *ch, char *arg)$/;"	f
do_clan_apply	clan.c	/^void do_clan_apply (struct char_data *ch, char *arg)$/;"	f
do_clan_banish	clan.c	/^void do_clan_banish (struct char_data *ch, char *arg)$/;"	f
do_clan_bank	clan.c	/^void do_clan_bank(struct char_data *ch, char *arg, int action)$/;"	f
do_clan_changefees	clan.c	/^void do_clan_changefees(struct char_data *ch, char *arg, int action)$/;"	f
do_clan_charge	clan.c	/^int do_clan_charge (struct char_data *ch, int amount)$/;"	f
do_clan_create	clan.c	/^void do_clan_create (struct char_data *ch, char *arg)$/;"	f
do_clan_demote	clan.c	/^void do_clan_demote (struct char_data *ch, char *arg)$/;"	f
do_clan_describe_mob	clan.c	/^void do_clan_describe_mob(struct char_data *ch, char *arg)$/;"	f
do_clan_destroy	clan.c	/^void do_clan_destroy (struct char_data *ch, char *arg)$/;"	f
do_clan_enable	clan.c	/^void do_clan_enable(struct char_data *ch, char *arg) $/;"	f
do_clan_enhance	clan.c	/^void do_clan_enhance(struct char_data *ch, char *arg)$/;"	f
do_clan_heal	clan.c	/^int do_clan_heal(struct char_data *ch, struct char_data *vict)$/;"	f
do_clan_info	clan.c	/^void do_clan_info (struct char_data *ch, char *arg)$/;"	f
do_clan_infocom	clan.c	/^void do_clan_infocom (int clan_one, int clan_two, char *arg) {$/;"	f
do_clan_name_mob	clan.c	/^void do_clan_name_mob(struct char_data *ch, char *arg)$/;"	f
do_clan_promote	clan.c	/^void do_clan_promote (struct char_data *ch, char *arg)$/;"	f
do_clan_recruit	clan.c	/^void do_clan_recruit (struct char_data *ch, char *arg)$/;"	f
do_clan_reset	clan.c	/^void do_clan_reset (struct char_data *ch, char *arg)$/;"	f
do_clan_room	clan.c	/^void do_clan_room(struct char_data *ch, char *arg)$/;"	f
do_clan_score	clan.c	/^void do_clan_score (struct char_data *ch)$/;"	f
do_clan_set	clan.c	/^void do_clan_set(struct char_data *ch, char *arg)$/;"	f
do_clan_set_desc	clan.c	/^void do_clan_set_desc(struct char_data *ch, char *arg)$/;"	f
do_clan_set_priv	clan.c	/^void do_clan_set_priv( struct char_data *ch, char *arg)$/;"	f
do_clan_set_ranks	clan.c	/^void do_clan_set_ranks(struct char_data *ch, char *arg)$/;"	f
do_clan_showrel	clan.c	/^void do_clan_showrel (struct char_data *ch, char *arg) {$/;"	f
do_clan_sp	clan.c	/^void do_clan_sp(struct char_data *ch, char *arg, int priv)$/;"	f
do_clan_stat	clan.c	/^void do_clan_stat (struct char_data *ch, char *arg)$/;"	f
do_clan_status	clan.c	/^void do_clan_status (struct char_data *ch)$/;"	f
do_clan_titles	clan.c	/^void do_clan_titles( struct char_data *ch, char *arg)$/;"	f
do_clan_who	clan.c	/^void do_clan_who (struct char_data *ch, char *arg)$/;"	f
do_classes	interpreter.c	/^ACMD(do_classes);$/;"	v
do_clot_wounds	interpreter.c	/^ACMD(do_clot_wounds);$/;"	v
do_cltalk	interpreter.c	/^ACMD(do_cltalk); \/* ARTUS *\/$/;"	v
do_color	act.informative.c	/^ACMD(do_color);$/;"	v
do_color	interpreter.c	/^ACMD(do_color);$/;"	v
do_combine	act.other.c	/^ACMD(do_combine);$/;"	v
do_combine	interpreter.c	/^ACMD(do_combine);$/;"	v
do_commands	act.informative.c	/^ACMD(do_commands);$/;"	v
do_commands	interpreter.c	/^ACMD(do_commands);$/;"	v
do_compare	interpreter.c	/^ACMD(do_compare);$/;"	v
do_compost	act.other.c	/^ACMD(do_compost);$/;"	v
do_compost	interpreter.c	/^ACMD(do_compost);$/;"	v
do_consider	act.informative.c	/^ACMD(do_consider);$/;"	v
do_consider	interpreter.c	/^ACMD(do_consider);$/;"	v
do_corpse	act.other.c	/^ACMD(do_corpse);$/;"	v
do_corpse	interpreter.c	/^ACMD(do_corpse);$/;"	v
do_cream	interpreter.c	/^ACMD(do_cream);$/;"	v
do_credits	interpreter.c	/^ACMD(do_credits);$/;"	v
do_ctalk	interpreter.c	/^ACMD(do_ctalk); \/* ARTUS *\/$/;"	v
do_date	act.wizard.c	/^ACMD(do_date);$/;"	v
do_date	interpreter.c	/^ACMD(do_date);$/;"	v
do_dc	act.wizard.c	/^ACMD(do_dc);$/;"	v
do_dc	interpreter.c	/^ACMD(do_dc);$/;"	v
do_debug_cmd	act.wizard.c	/^ACMD(do_debug_cmd);$/;"	v
do_debug_cmd	interpreter.c	/^ACMD(do_debug_cmd);$/;"	v
do_deimmort	interpreter.c	/^ACMD(do_deimmort);$/;"	v
do_demort	act.wizard.c	/^ACMD(do_demort);$/;"	v
do_detach	interpreter.c	/^ACMD(do_detach);$/;"	v
do_dg_affect	dg_misc.c	/^void do_dg_affect(void *go, struct script_data *sc, trig_data *trig,$/;"	f
do_dg_cast	dg_misc.c	/^void do_dg_cast(void *go, struct script_data *sc, trig_data *trig,$/;"	f
do_diagnose	act.informative.c	/^ACMD(do_diagnose);$/;"	v
do_diagnose	interpreter.c	/^ACMD(do_diagnose);$/;"	v
do_disarm	act.offensive.c	/^ACMD(do_disarm);$/;"	v
do_disarm	interpreter.c	/^ACMD(do_disarm);$/;"	v
do_disguise	act.other.c	/^ACMD(do_disguise);$/;"	v
do_disguise	interpreter.c	/^ACMD(do_disguise);$/;"	v
do_dismount	interpreter.c	/^ACMD(do_dismount);  $/;"	v
do_display	act.other.c	/^ACMD(do_display);$/;"	v
do_display	interpreter.c	/^ACMD(do_display);$/;"	v
do_doorcmd	act.movement.c	/^void do_doorcmd(struct char_data *ch, struct obj_data *obj, int door, int scmd)$/;"	f
do_drink	act.item.c	/^ACMD(do_drink);$/;"	v
do_drink	interpreter.c	/^ACMD(do_drink);$/;"	v
do_drop	act.item.c	/^ACMD(do_drop);$/;"	v
do_drop	interpreter.c	/^ACMD(do_drop);$/;"	v
do_drop	spec_procs.c	/^ACMD(do_drop);$/;"	v
do_eat	act.item.c	/^ACMD(do_eat);$/;"	v
do_eat	interpreter.c	/^ACMD(do_eat);$/;"	v
do_echo	act.wizard.c	/^ACMD(do_echo);$/;"	v
do_echo	interpreter.c	/^ACMD(do_echo);$/;"	v
do_echo	shop.c	/^ACMD(do_echo);$/;"	v
do_edit	genolc.c	/^ACMD(do_edit);$/;"	v
do_edit	interpreter.c	/^ACMD(do_edit);         \/* Mainly intended as a test function. *\/$/;"	v
do_enter	act.movement.c	/^ACMD(do_enter);$/;"	v
do_enter	interpreter.c	/^ACMD(do_enter);$/;"	v
do_environ_arrive_message	act.movement.c	/^static void do_environ_arrive_message(struct char_data *ch, int dir)$/;"	f	file:
do_environ_leave_message	act.movement.c	/^static void do_environ_leave_message(struct char_data *ch, int dir)$/;"	f	file:
do_eq_find	act.wizard.c	/^void do_eq_find(struct char_data *ch, char *argument)$/;"	f
do_equipment	act.informative.c	/^ACMD(do_equipment);$/;"	v
do_equipment	interpreter.c	/^ACMD(do_equipment);$/;"	v
do_escape	act.movement.c	/^ACMD(do_escape);$/;"	v
do_escape	interpreter.c	/^ACMD(do_escape);$/;"	v
do_event	act.wizard.c	/^ACMD(do_event);$/;"	v
do_event	interpreter.c	/^ACMD(do_event);$/;"	v
do_events	act.informative.c	/^ACMD(do_events);$/;"	v
do_events	interpreter.c	/^ACMD(do_events);$/;"	v
do_examine	act.informative.c	/^ACMD(do_examine);$/;"	v
do_examine	interpreter.c	/^ACMD(do_examine);$/;"	v
do_exit	interpreter.c	/^ACMD(do_exit);$/;"	v
do_exits	act.informative.c	/^ACMD(do_exits);$/;"	v
do_exits	interpreter.c	/^ACMD(do_exits);$/;"	v
do_exp	interpreter.c	/^ACMD(do_exp);$/;"	v
do_first_aid	interpreter.c	/^ACMD(do_first_aid);$/;"	v
do_flee	act.offensive.c	/^ACMD(do_flee);$/;"	v
do_flee	fight.c	/^ACMD(do_flee);$/;"	v
do_flee	interpreter.c	/^ACMD(do_flee);$/;"	v
do_flee	spec_procs.c	/^ACMD(do_flee);$/;"	v
do_follow	act.movement.c	/^ACMD(do_follow);$/;"	v
do_follow	castle.c	/^ACMD(do_follow);$/;"	v
do_follow	interpreter.c	/^ACMD(do_follow);$/;"	v
do_force	act.wizard.c	/^ACMD(do_force);$/;"	v
do_force	interpreter.c	/^ACMD(do_force);$/;"	v
do_friend	interpreter.c	/^ACMD(do_friend);$/;"	v
do_gecho	act.wizard.c	/^ACMD(do_gecho);$/;"	v
do_gecho	interpreter.c	/^ACMD(do_gecho);$/;"	v
do_gen_comm	act.comm.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	act.other.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	interpreter.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	spec_procs.c	/^ACMD(do_gen_comm);$/;"	v
do_gen_door	act.movement.c	/^ACMD(do_gen_door);$/;"	v
do_gen_door	castle.c	/^ACMD(do_gen_door);$/;"	v
do_gen_door	interpreter.c	/^ACMD(do_gen_door);$/;"	v
do_gen_door	spec_procs.c	/^ACMD(do_gen_door);$/;"	v
do_gen_ps	act.informative.c	/^ACMD(do_gen_ps);$/;"	v
do_gen_ps	interpreter.c	/^ACMD(do_gen_ps);$/;"	v
do_gen_tog	act.other.c	/^ACMD(do_gen_tog);$/;"	v
do_gen_tog	interpreter.c	/^ACMD(do_gen_tog);$/;"	v
do_gen_write	interpreter.c	/^ACMD(do_gen_write);$/;"	v
do_get	act.item.c	/^ACMD(do_get);$/;"	v
do_get	interpreter.c	/^ACMD(do_get);$/;"	v
do_get	mobact.c	/^ACMD(do_get);$/;"	v
do_give	act.item.c	/^ACMD(do_give);$/;"	v
do_give	interpreter.c	/^ACMD(do_give);$/;"	v
do_go	interpreter.c	/^ACMD(do_go);$/;"	v
do_gold	act.informative.c	/^ACMD(do_gold);$/;"	v
do_gold	interpreter.c	/^ACMD(do_gold);$/;"	v
do_goto	act.wizard.c	/^ACMD(do_goto);$/;"	v
do_goto	interpreter.c	/^ACMD(do_goto);$/;"	v
do_grab	act.item.c	/^ACMD(do_grab);$/;"	v
do_grab	interpreter.c	/^ACMD(do_grab);$/;"	v
do_group	act.other.c	/^ACMD(do_group);$/;"	v
do_group	interpreter.c	/^ACMD(do_group);$/;"	v
do_gsay	act.comm.c	/^ACMD(do_gsay);$/;"	v
do_gsay	interpreter.c	/^ACMD(do_gsay);$/;"	v
do_hcontrol	house.c	/^ACMD(do_hcontrol);$/;"	v
do_hcontrol	interpreter.c	/^ACMD(do_hcontrol);$/;"	v
do_headbutt	act.offensive.c	/^ACMD(do_headbutt);$/;"	v
do_help	act.informative.c	/^ACMD(do_help);$/;"	v
do_help	interpreter.c	/^ACMD(do_help);$/;"	v
do_hide	act.other.c	/^ACMD(do_hide);$/;"	v
do_hide	interpreter.c	/^ACMD(do_hide);$/;"	v
do_hint	act.informative.c	/^void do_hint(void)$/;"	f
do_hit	act.offensive.c	/^ACMD(do_hit);$/;"	v
do_hit	spell_parser.c	/^ACMD(do_hit);$/;"	v
do_house	house.c	/^ACMD(do_house);$/;"	v
do_house	interpreter.c	/^ACMD(do_house);$/;"	v
do_ignore	interpreter.c	/^ACMD(do_ignore);$/;"	v
do_immlist	act.informative.c	/^ACMD(do_immlist);$/;"	v
do_immlist	interpreter.c	/^ACMD(do_immlist);$/;"	v
do_immort	act.wizard.c	/^ACMD(do_immort);$/;"	v
do_immort	interpreter.c	/^ACMD(do_immort);$/;"	v
do_info	act.informative.c	/^ACMD(do_info);$/;"	v
do_info	interpreter.c	/^ACMD(do_info);$/;"	v
do_insult	act.social.c	/^ACMD(do_insult);$/;"	v
do_insult	interpreter.c	/^ACMD(do_insult);$/;"	v
do_inventory	act.informative.c	/^ACMD(do_inventory);$/;"	v
do_inventory	interpreter.c	/^ACMD(do_inventory);$/;"	v
do_invis	act.wizard.c	/^ACMD(do_invis);$/;"	v
do_invis	interpreter.c	/^ACMD(do_invis);$/;"	v
do_join	interpreter.c	/^ACMD(do_join); $/;"	v
do_kick	act.offensive.c	/^ACMD(do_kick);$/;"	v
do_kick	interpreter.c	/^ACMD(do_kick);$/;"	v
do_kill	act.offensive.c	/^ACMD(do_kill);$/;"	v
do_last	act.wizard.c	/^ACMD(do_last);$/;"	v
do_last	interpreter.c	/^ACMD(do_last);$/;"	v
do_laston	interpreter.c	/^ACMD(do_laston); $/;"	v
do_leave	act.movement.c	/^ACMD(do_leave);$/;"	v
do_leave	interpreter.c	/^ACMD(do_leave);$/;"	v
do_levels	act.informative.c	/^ACMD(do_levels);$/;"	v
do_levels	interpreter.c	/^ACMD(do_levels);$/;"	v
do_list_obj_values	act.wizard.c	/^void do_list_obj_values(struct obj_data *j, char * buf)$/;"	f
do_listen	act.informative.c	/^ACMD(do_listen);$/;"	v
do_listen	interpreter.c	/^ACMD(do_listen);$/;"	v
do_load	act.wizard.c	/^ACMD(do_load);$/;"	v
do_load	interpreter.c	/^ACMD(do_load);$/;"	v
do_loadweapon	interpreter.c	/^ACMD(do_loadweapon);$/;"	v
do_look	act.informative.c	/^ACMD(do_look);$/;"	v
do_look	interpreter.c	/^ACMD(do_look);$/;"	v
do_masound	interpreter.c	/^ACMD(do_masound);$/;"	v
do_mat	interpreter.c	/^ACMD(do_mat);$/;"	v
do_mdamage	interpreter.c	/^ACMD(do_mdamage);$/;"	v
do_mdoor	interpreter.c	/^ACMD(do_mdoor);$/;"	v
do_mecho	interpreter.c	/^ACMD(do_mecho);$/;"	v
do_mechoaround	interpreter.c	/^ACMD(do_mechoaround);$/;"	v
do_meditate	interpreter.c	/^ACMD(do_meditate);$/;"	v
do_memorise	act.other.c	/^ACMD(do_memorise);$/;"	v
do_memorise	interpreter.c	/^ACMD(do_memorise);$/;"	v
do_mexp	interpreter.c	/^ACMD(do_mexp);$/;"	v
do_mforce	interpreter.c	/^ACMD(do_mforce);$/;"	v
do_mforget	interpreter.c	/^ACMD(do_mforget);$/;"	v
do_mgold	interpreter.c	/^ACMD(do_mgold);$/;"	v
do_mgoto	interpreter.c	/^ACMD(do_mgoto);$/;"	v
do_mhunt	interpreter.c	/^ACMD(do_mhunt);$/;"	v
do_mjunk	interpreter.c	/^ACMD(do_mjunk);$/;"	v
do_mkill	interpreter.c	/^ACMD(do_mkill);$/;"	v
do_mload	interpreter.c	/^ACMD(do_mload);$/;"	v
do_modifiers	act.other.c	/^ACMD(do_modifiers);$/;"	v
do_modifiers	interpreter.c	/^ACMD(do_modifiers);$/;"	v
do_moon	interpreter.c	/^ACMD(do_moon);$/;"	v
do_mortal_kombat	interpreter.c	/^ACMD(do_mortal_kombat);$/;"	v
do_mount	interpreter.c	/^ACMD(do_mount);$/;"	v
do_move	interpreter.h	/^ACMD(do_move);$/;"	v
do_mpurge	interpreter.c	/^ACMD(do_mpurge);$/;"	v
do_mremember	interpreter.c	/^ACMD(do_mremember);$/;"	v
do_mrestore	interpreter.c	/^ACMD(do_mrestore);$/;"	v
do_msend	interpreter.c	/^ACMD(do_msend);$/;"	v
do_mteleport	interpreter.c	/^ACMD(do_mteleport);$/;"	v
do_mtransform	interpreter.c	/^ACMD(do_mtransform);$/;"	v
do_mzoneecho	interpreter.c	/^ACMD(do_mzoneecho);$/;"	v
do_not_buy	shop.h	/^   char	*do_not_buy;		\/* If keeper dosn't buy such things	*\/$/;"	m	struct:shop_data
do_not_here	act.other.c	/^ACMD(do_not_here);$/;"	v
do_not_here	interpreter.c	/^ACMD(do_not_here);$/;"	v
do_npc_rescue	castle.c	/^int do_npc_rescue(struct char_data * ch_hero, struct char_data * ch_victim)$/;"	f
do_oasis	interpreter.c	/^ACMD(do_oasis);$/;"	v
do_oasislist	interpreter.c	/^ACMD(do_oasislist);$/;"	v
do_odd_write	modify.c	/^void do_odd_write(struct descriptor_data *d, ubyte wtype, int maxlen)$/;"	f
do_offer	interpreter.c	/^ACMD(do_offer);$/;"	v
do_olc	interpreter.c	/^ACMD(do_olc);$/;"	v
do_olc	olc.c	/^ACMD(do_olc);$/;"	v
do_order	act.offensive.c	/^ACMD(do_order);$/;"	v
do_order	interpreter.c	/^ACMD(do_order);$/;"	v
do_page	act.comm.c	/^ACMD(do_page);$/;"	v
do_page	interpreter.c	/^ACMD(do_page);$/;"	v
do_pagelength	act.other.c	/^ACMD(do_pagelength);$/;"	v
do_pagelength	interpreter.c	/^ACMD(do_pagelength);$/;"	v
do_pagewidth	act.other.c	/^ACMD(do_pagewidth);$/;"	v
do_pagewidth	interpreter.c	/^ACMD(do_pagewidth);$/;"	v
do_piledrive	act.offensive.c	/^ACMD(do_piledrive);$/;"	v
do_pinch	act.wizard.c	/^ACMD(do_pinch);$/;"	v
do_pinch	interpreter.c	/^ACMD(do_pinch);$/;"	v
do_pkill	interpreter.c	/^ACMD(do_pkill); \/* ARTUS *\/$/;"	v
do_pkset	act.wizard.c	/^ACMD(do_pkset);$/;"	v
do_pkset	interpreter.c	/^ACMD(do_pkset);   $/;"	v
do_playerhunt	graph.c	/^void do_playerhunt( struct char_data *ch, struct char_data *victim ) {$/;"	f
do_poisonblade	interpreter.c	/^ACMD(do_poisonblade);$/;"	v
do_poofset	act.wizard.c	/^ACMD(do_poofset);$/;"	v
do_poofset	interpreter.c	/^ACMD(do_poofset);$/;"	v
do_pour	act.item.c	/^ACMD(do_pour);$/;"	v
do_pour	interpreter.c	/^ACMD(do_pour);$/;"	v
do_practice	act.other.c	/^ACMD(do_practice);$/;"	v
do_practice	interpreter.c	/^ACMD(do_practice);$/;"	v
do_punish	interpreter.c	/^ACMD(do_punish); \/* ARTUS - Punish *\/$/;"	v
do_purge	act.wizard.c	/^ACMD(do_purge);$/;"	v
do_purge	interpreter.c	/^ACMD(do_purge);$/;"	v
do_purse	act.other.c	/^ACMD(do_purse);$/;"	v
do_purse	interpreter.c	/^ACMD(do_purse);$/;"	v
do_put	act.item.c	/^ACMD(do_put);$/;"	v
do_put	interpreter.c	/^ACMD(do_put);$/;"	v
do_qcomm	act.comm.c	/^ACMD(do_qcomm);$/;"	v
do_qcomm	act.item.c	/^ACMD(do_qcomm);$/;"	v
do_qcomm	act.wizard.c	/^ACMD(do_qcomm);$/;"	v
do_qcomm	interpreter.c	/^ACMD(do_qcomm);$/;"	v
do_qcomm	quest.c	/^ACMD(do_qcomm);$/;"	v
do_quest	interpreter.c	/^ACMD(do_quest);$/;"	v
do_quest_log	interpreter.c	/^ACMD(do_quest_log);$/;"	v
do_questoff	act.wizard.c	/^ACMD(do_questoff);$/;"	v
do_questoff	interpreter.c	/^ACMD(do_questoff);$/;"	v
do_queston	act.wizard.c	/^ACMD(do_queston);$/;"	v
do_queston	interpreter.c	/^ACMD(do_queston);$/;"	v
do_quit	act.other.c	/^ACMD(do_quit);$/;"	v
do_quit	interpreter.c	/^ACMD(do_quit);$/;"	v
do_race	interpreter.c	/^ACMD(do_race);$/;"	v
do_read	interpreter.c	/^ACMD(do_read);$/;"	v
do_realtime	interpreter.c	/^ACMD(do_realtime);$/;"	v
do_reboot	db.c	/^ACMD(do_reboot);$/;"	v
do_reboot	interpreter.c	/^ACMD(do_reboot);$/;"	v
do_recall	act.movement.c	/^ACMD(do_recall);$/;"	v
do_recall	interpreter.c	/^ACMD(do_recall);$/;"	v
do_remort	act.other.c	/^ACMD(do_remort);$/;"	v
do_remort	interpreter.c	/^ACMD(do_remort);$/;"	v
do_remove	act.item.c	/^ACMD(do_remove);$/;"	v
do_remove	interpreter.c	/^ACMD(do_remove);$/;"	v
do_repair	interpreter.c	/^ACMD(do_repair);$/;"	v
do_reply	act.comm.c	/^ACMD(do_reply);$/;"	v
do_reply	interpreter.c	/^ACMD(do_reply);$/;"	v
do_report	act.other.c	/^ACMD(do_report);$/;"	v
do_report	interpreter.c	/^ACMD(do_report);$/;"	v
do_reporting	interpreter.c	/^ACMD(do_reporting);$/;"	v
do_rescue	act.offensive.c	/^ACMD(do_rescue);$/;"	v
do_rescue	interpreter.c	/^ACMD(do_rescue);$/;"	v
do_rest	act.movement.c	/^ACMD(do_rest);$/;"	v
do_rest	interpreter.c	/^ACMD(do_rest);$/;"	v
do_restore	act.wizard.c	/^ACMD(do_restore);$/;"	v
do_restore	interpreter.c	/^ACMD(do_restore);$/;"	v
do_retreat	interpreter.c	/^ACMD(do_retreat);$/;"	v
do_return	act.wizard.c	/^ACMD(do_return);$/;"	v
do_return	handler.c	/^ACMD(do_return);$/;"	v
do_return	interpreter.c	/^ACMD(do_return);$/;"	v
do_ritual	act.other.c	/^ACMD(do_ritual);$/;"	v
do_ritual	interpreter.c	/^ACMD(do_ritual);$/;"	v
do_save	act.other.c	/^ACMD(do_save);$/;"	v
do_save	interpreter.c	/^ACMD(do_save);$/;"	v
do_say	act.comm.c	/^ACMD(do_say);$/;"	v
do_say	graph.c	/^ACMD(do_say);$/;"	v
do_say	interpreter.c	/^ACMD(do_say);$/;"	v
do_say	shop.c	/^ACMD(do_say);$/;"	v
do_say	spec_procs.c	/^ACMD(do_say);$/;"	v
do_scan	interpreter.c	/^ACMD(do_scan);$/;"	v
do_score	act.informative.c	/^ACMD(do_score);$/;"	v
do_score	interpreter.c	/^ACMD(do_score);$/;"	v
do_search	act.informative.c	/^ACMD(do_search);$/;"	v
do_search	interpreter.c	/^ACMD(do_search);$/;"	v
do_send	act.wizard.c	/^ACMD(do_send);$/;"	v
do_send	interpreter.c	/^ACMD(do_send);$/;"	v
do_sense	act.informative.c	/^ACMD(do_sense);$/;"	v
do_sense	interpreter.c	/^ACMD(do_sense);$/;"	v
do_sentence	interpreter.c	/^ACMD(do_sentence); \/* ARTUS - Sentence *\/$/;"	v
do_set	act.wizard.c	/^ACMD(do_set);$/;"	v
do_set	interpreter.c	/^ACMD(do_set);$/;"	v
do_setcolour	act.informative.c	/^ACMD(do_setcolour);$/;"	v
do_setcolour	interpreter.c	/^ACMD(do_setcolour);$/;"	v
do_shoot	interpreter.c	/^ACMD(do_shoot);$/;"	v
do_show	act.wizard.c	/^ACMD(do_show);$/;"	v
do_show	interpreter.c	/^ACMD(do_show);$/;"	v
do_show_hint	act.informative.c	/^ACMD(do_show_hint);$/;"	v
do_show_hint	interpreter.c	/^ACMD(do_show_hint);$/;"	v
do_show_save_list	genolc.c	/^void do_show_save_list(struct char_data *ch)$/;"	f
do_shutdown	act.wizard.c	/^ACMD(do_shutdown);$/;"	v
do_shutdown	interpreter.c	/^ACMD(do_shutdown);$/;"	v
do_simple_move	act.movement.c	/^int do_simple_move(struct char_data *ch, int dir, int need_specials_check,$/;"	f
do_sit	act.movement.c	/^ACMD(do_sit);$/;"	v
do_sit	interpreter.c	/^ACMD(do_sit);$/;"	v
do_skillset	interpreter.c	/^ACMD(do_skillset);$/;"	v
do_skillset	modify.c	/^ACMD(do_skillset);$/;"	v
do_skillshow	act.wizard.c	/^ACMD(do_skillshow);$/;"	v
do_skillshow	interpreter.c	/^ACMD(do_skillshow);$/;"	v
do_slay	interpreter.c	/^ACMD(do_slay);$/;"	v
do_sleep	act.movement.c	/^ACMD(do_sleep);$/;"	v
do_sleep	interpreter.c	/^ACMD(do_sleep);$/;"	v
do_slots	interpreter.c	/^ACMD(do_slots);$/;"	v
do_sneak	act.other.c	/^ACMD(do_sneak);$/;"	v
do_sneak	interpreter.c	/^ACMD(do_sneak);$/;"	v
do_snoop	act.wizard.c	/^ACMD(do_snoop);$/;"	v
do_snoop	interpreter.c	/^ACMD(do_snoop);$/;"	v
do_spec_comm	act.comm.c	/^ACMD(do_spec_comm);$/;"	v
do_spec_comm	interpreter.c	/^ACMD(do_spec_comm);$/;"	v
do_spellinfo	interpreter.c	/^ACMD(do_spellinfo);$/;"	v
do_split	act.other.c	/^ACMD(do_split);$/;"	v
do_split	interpreter.c	/^ACMD(do_split);$/;"	v
do_spy	interpreter.c	/^ACMD(do_spy);$/;"	v
do_sstat_character	dg_scripts.c	/^void do_sstat_character(char_data *ch, char_data *k)$/;"	f
do_sstat_object	dg_scripts.c	/^void do_sstat_object(char_data *ch, obj_data *j)$/;"	f
do_sstat_room	dg_scripts.c	/^void do_sstat_room(struct char_data * ch)$/;"	f
do_stand	act.movement.c	/^ACMD(do_stand);$/;"	v
do_stand	interpreter.c	/^ACMD(do_stand);$/;"	v
do_start	class.c	/^void do_start(struct char_data * ch)$/;"	f
do_stat	act.wizard.c	/^ACMD(do_stat);$/;"	v
do_stat	interpreter.c	/^ACMD(do_stat);$/;"	v
do_stat_character	act.wizard.c	/^void do_stat_character(struct char_data * ch, struct char_data * k)$/;"	f
do_stat_object	act.wizard.c	/^void do_stat_object(struct char_data * ch, struct obj_data * j)$/;"	f
do_stat_room	act.wizard.c	/^void do_stat_room(struct char_data * ch)$/;"	f
do_stat_trigger	dg_scripts.c	/^void do_stat_trigger(struct char_data *ch, trig_data *trig)$/;"	f
do_stats	interpreter.c	/^ACMD(do_stats);$/;"	v
do_steal	act.other.c	/^ACMD(do_steal);$/;"	v
do_steal	interpreter.c	/^ACMD(do_steal);$/;"	v
do_suicide	act.other.c	/^ACMD(do_suicide);$/;"	v
do_suicide	interpreter.c	/^ACMD(do_suicide);$/;"	v
do_switch	act.wizard.c	/^ACMD(do_switch);$/;"	v
do_switch	interpreter.c	/^ACMD(do_switch);$/;"	v
do_syslog	act.wizard.c	/^ACMD(do_syslog);$/;"	v
do_syslog	interpreter.c	/^ACMD(do_syslog);$/;"	v
do_tag	interpreter.c	/^ACMD(do_tag);$/;"	v
do_tedit	tedit.h	/^ACMD(do_tedit);$/;"	v
do_teleport	act.wizard.c	/^ACMD(do_teleport);$/;"	v
do_teleport	interpreter.c	/^ACMD(do_teleport);$/;"	v
do_tell	act.comm.c	/^ACMD(do_tell);$/;"	v
do_tell	interpreter.c	/^ACMD(do_tell);$/;"	v
do_tell	objsave.c	/^ACMD(do_tell);$/;"	v
do_tell	shop.c	/^ACMD(do_tell);$/;"	v
do_throw	act.offensive.c	/^ACMD(do_throw);$/;"	v
do_throw	interpreter.c	/^ACMD(do_throw);$/;"	v
do_tic	act.wizard.c	/^ACMD(do_tic);$/;"	v
do_tic	interpreter.c	/^ACMD(do_tic);   $/;"	v
do_time	act.informative.c	/^ACMD(do_time);$/;"	v
do_time	interpreter.c	/^ACMD(do_time);$/;"	v
do_timers	interpreter.c	/^ACMD(do_timers);$/;"	v
do_title	act.other.c	/^ACMD(do_title);$/;"	v
do_title	interpreter.c	/^ACMD(do_title);$/;"	v
do_tlist	interpreter.c	/^ACMD(do_tlist);$/;"	v
do_toggle	act.informative.c	/^ACMD(do_toggle);$/;"	v
do_toggle	interpreter.c	/^ACMD(do_toggle);$/;"	v
do_torch	act.other.c	/^ACMD(do_torch);$/;"	v
do_torch	interpreter.c	/^ACMD(do_torch);$/;"	v
do_track	act.informative.c	/^ACMD(do_track);$/;"	v
do_track	graph.c	/^ACMD(do_track);$/;"	v
do_track	interpreter.c	/^ACMD(do_track);$/;"	v
do_trade	interpreter.c	/^ACMD(do_trade);$/;"	v
do_trans	act.wizard.c	/^ACMD(do_trans);$/;"	v
do_trans	interpreter.c	/^ACMD(do_trans);$/;"	v
do_trap	act.offensive.c	/^ACMD(do_trap);$/;"	v
do_trap	interpreter.c	/^ACMD(do_trap);$/;"	v
do_trip	act.offensive.c	/^ACMD(do_trip);$/;"	v
do_tstat	interpreter.c	/^ACMD(do_tstat);$/;"	v
do_unban	ban.c	/^ACMD(do_unban);$/;"	v
do_unban	interpreter.c	/^ACMD(do_unban);$/;"	v
do_ungroup	act.other.c	/^ACMD(do_ungroup);$/;"	v
do_ungroup	interpreter.c	/^ACMD(do_ungroup);$/;"	v
do_use	act.other.c	/^ACMD(do_use);$/;"	v
do_use	interpreter.c	/^ACMD(do_use);$/;"	v
do_users	act.informative.c	/^ACMD(do_users);$/;"	v
do_users	interpreter.c	/^ACMD(do_users);$/;"	v
do_vdelete	interpreter.c	/^ACMD(do_vdelete);$/;"	v
do_violent_skill	act.movement.c	/^ACMD(do_violent_skill);$/;"	v
do_violent_skill	fight.c	/^ACMD(do_violent_skill);$/;"	v
do_violent_skill	interpreter.c	/^ACMD(do_violent_skill);$/;"	v
do_visible	act.other.c	/^ACMD(do_visible);$/;"	v
do_visible	interpreter.c	/^ACMD(do_visible);$/;"	v
do_vnum	act.wizard.c	/^ACMD(do_vnum);$/;"	v
do_vnum	interpreter.c	/^ACMD(do_vnum);$/;"	v
do_vote	interpreter.c	/^ACMD(do_vote);$/;"	v
do_vstat	act.wizard.c	/^ACMD(do_vstat);$/;"	v
do_vstat	interpreter.c	/^ACMD(do_vstat);$/;"	v
do_wake	act.movement.c	/^ACMD(do_wake);$/;"	v
do_wake	interpreter.c	/^ACMD(do_wake);$/;"	v
do_wear	act.item.c	/^ACMD(do_wear);$/;"	v
do_wear	interpreter.c	/^ACMD(do_wear);$/;"	v
do_weather	act.informative.c	/^ACMD(do_weather);$/;"	v
do_weather	interpreter.c	/^ACMD(do_weather);$/;"	v
do_where	act.informative.c	/^ACMD(do_where);$/;"	v
do_where	interpreter.c	/^ACMD(do_where);$/;"	v
do_who	act.informative.c	/^ACMD(do_who);$/;"	v
do_who	interpreter.c	/^ACMD(do_who);$/;"	v
do_whostr	act.wizard.c	/^ACMD(do_whostr);$/;"	v
do_whostr	interpreter.c	/^ACMD(do_whostr);$/;"	v
do_wield	act.item.c	/^ACMD(do_wield);$/;"	v
do_wield	interpreter.c	/^ACMD(do_wield);$/;"	v
do_wimpy	act.other.c	/^ACMD(do_wimpy);$/;"	v
do_wimpy	interpreter.c	/^ACMD(do_wimpy);$/;"	v
do_wizlock	act.wizard.c	/^ACMD(do_wizlock);$/;"	v
do_wizlock	interpreter.c	/^ACMD(do_wizlock);$/;"	v
do_wiznet	act.wizard.c	/^ACMD(do_wiznet);$/;"	v
do_wiznet	interpreter.c	/^ACMD(do_wiznet);$/;"	v
do_wizutil	act.wizard.c	/^ACMD(do_wizutil);$/;"	v
do_wizutil	interpreter.c	/^ACMD(do_wizutil);$/;"	v
do_write	act.comm.c	/^ACMD(do_write);$/;"	v
do_write	interpreter.c	/^ACMD(do_write);$/;"	v
do_zone_hint	act.informative.c	/^void do_zone_hint(void)$/;"	f
do_zreset	act.wizard.c	/^ACMD(do_zreset);$/;"	v
do_zreset	interpreter.c	/^ACMD(do_zreset);$/;"	v
doc	spec_assign.c	/^  SPECIAL(doc);$/;"	v
donation_room_1	config.c	/^room_vnum donation_room_1 = 1190;$/;"	v
donation_room_2	config.c	/^room_vnum donation_room_2 = NOWHERE;	\/* unused - room for expansion *\/$/;"	v
donation_room_3	config.c	/^room_vnum donation_room_3 = NOWHERE;	\/* unused - room for expansion *\/$/;"	v
dopy	spec_assign.c	/^  SPECIAL(dopy);$/;"	v
dragon	spec_assign.c	/^  SPECIAL(dragon);$/;"	v
drainer	spec_assign.c	/^  SPECIAL(drainer); $/;"	v
drink_aff	constants.c	/^int drink_aff[][3] = {$/;"	v
drinknames	constants.c	/^const char *drinknames[] =$/;"	v
drinks	constants.c	/^const char *drinks[] =$/;"	v
drop_otrigger	dg_triggers.c	/^int drop_otrigger(obj_data *obj, char_data *actor, int mode)$/;"	f
drop_wtrigger	dg_triggers.c	/^int drop_wtrigger(obj_data *obj, char_data *actor)$/;"	f
dummy_mob	db.c	/^struct player_special_data dummy_mob;	\/* dummy spec area for mobs	*\/$/;"	v
dump	spec_procs.c	/^SPECIAL(dump);$/;"	v
duplicate	db.h	/^   int duplicate;$/;"	m	struct:help_index_element
duplicate_room	genwld.c	/^room_rnum duplicate_room(room_vnum dest_vnum, room_rnum orig)$/;"	f
duration	structs.h	/^   sh_int duration;      \/* For how long its effects will last      *\/$/;"	m	struct:affected_type
duration	structs.h	/^  sh_int duration;$/;"	m	struct:timer_type
easter_bunny	spec_assign.c	/^  SPECIAL(easter_bunny);$/;"	v
echo_off	comm.c	/^void echo_off(struct descriptor_data *d)$/;"	f
echo_on	comm.c	/^void echo_on(struct descriptor_data *d)$/;"	f
elec_shock	spec_assign.c	/^  SPECIAL(elec_shock);$/;"	v
elevator	spec_assign.c	/^  SPECIAL(elevator); \/* glass elevator *\/$/;"	v
elitist_modifier	utils.c	/^float elitist_modifier(struct char_data *ch)$/;"	f
email	structs.h	/^   char *email;		\/* Email *\/$/;"	m	struct:char_player_data
email	structs.h	/^   char email[MAX_INPUT_LENGTH + 1];$/;"	m	struct:char_file_u
encrypt_names	telnet.h	/^char *encrypt_names[] = {$/;"	v
enctype_names	telnet.h	/^char *enctype_names[] = {$/;"	v
endBJGame	casino.c	/^void endBJGame(struct game_item *bjitem, int playernum) $/;"	f
end_read_list	shop.c	/^int end_read_list(struct shop_buy_data * list, int len, int error)$/;"	f
enh_setting	structs.h	/^  short enh_setting[MAX_NUM_ENHANCEMENTS];      \/\/ Enhancent positions$/;"	m	struct:quest_obj_data
enhance_quest_item	quest.c	/^void enhance_quest_item(struct obj_data *qitem, struct char_data *ch, $/;"	f
enhancement_names	constants.c	/^const char* enhancement_names[] =$/;"	v
enhancements	structs.h	/^  short enhancements[MAX_NUM_ENHANCEMENTS][MAX_ENHANCEMENT_VALUES];  \/\/ Values at positions$/;"	m	struct:quest_obj_data
enter_reality_rip	spec_procs.c	/^void enter_reality_rip(struct char_data *ch ) {$/;"	f
enter_wtrigger	dg_triggers.c	/^int enter_wtrigger(struct room_data *room, char_data *actor, int dir)$/;"	f
entry	db.h	/^   char *entry;$/;"	m	struct:help_index_element
entry_memory_mtrigger	dg_triggers.c	/^void entry_memory_mtrigger(char_data *ch)$/;"	f
entry_mtrigger	dg_triggers.c	/^int entry_mtrigger(char_data *ch)$/;"	f
eq_affect_from_char	handler.c	/^void eq_affect_from_char(struct char_data *ch, int type)$/;"	f
eq_pos_ok	utils.c	/^int eq_pos_ok(struct char_data *ch, int where)$/;"	f
equip_char	handler.c	/^bool equip_char(struct char_data * ch, struct obj_data * obj, int pos, $/;"	f
equipment	structs.h	/^   struct obj_data *equipment[NUM_WEARS];\/* Equipment array               *\/$/;"	m	struct:char_data
equipment_types	constants.c	/^const char *equipment_types[] =$/;"	v
ev	quest.h	/^  struct event_data *ev;$/;"	m	struct:itemhunt_data
ev	quest.h	/^  struct event_data *ev;$/;"	m	struct:trivia_data
eval_expr	dg_scripts.c	/^void eval_expr(char *line, char *result, void *go, struct script_data *sc,$/;"	f
eval_lhs_op_rhs	dg_scripts.c	/^int eval_lhs_op_rhs(char *expr, char *result, void *go, struct script_data *sc,$/;"	f
eval_op	dg_scripts.c	/^void eval_op(char *op, char *lhs, char *rhs, char *result, void *go,$/;"	f
evaluate_expression	shop.c	/^int evaluate_expression(struct obj_data * obj, char *expr)$/;"	f
evaluate_operation	shop.c	/^void evaluate_operation(struct stack_data * ops, struct stack_data * vals)$/;"	f
event_data	structs.h	/^struct event_data$/;"	s
event_info	dg_event.h	/^struct event_info {$/;"	s
event_list	dg_event.c	/^static struct event_info *event_list = NULL;$/;"	v	file:
event_list	structs.h	/^struct event_list$/;"	s
events	db.c	/^struct event_list events;$/;"	v
ex_description	structs.h	/^   struct extra_descr_data *ex_description; \/* extra descriptions     *\/$/;"	m	struct:obj_data
ex_description	structs.h	/^   struct extra_descr_data *ex_description; \/* for examine\/look       *\/$/;"	m	struct:room_data
exdesc_string_cleanup	modify.c	/^void exdesc_string_cleanup(struct descriptor_data *d, int action)$/;"	f
exit_bits	constants.c	/^const char *exit_bits[] =$/;"	v
exit_info	structs.h	/^   sh_int \/*bitvector_t*\/ exit_info;	\/* Exit info			*\/$/;"	m	struct:room_direction_data
exit_nocturnal	utils.c	/^void exit_nocturnal(void)$/;"	f
exit_num	house.h	/^   sh_int exit_num;		\/* direction of house's exit	*\/$/;"	m	struct:house_control_rec
exp	clan.h	/^  long exp;                             \/* Clan Experience....?   *\/$/;"	m	struct:clan_rec
exp	structs.h	/^   int	exp;            \/* The experience of the player            *\/$/;"	m	struct:char_point_data
exp	structs.h	/^   int	exp;$/;"	m	struct:title_type
exp_reqs	class.c	/^const int exp_reqs[LVL_IMMORT] =$/;"	v
ext_flag	structs.h	/^	long ext_flag;$/;"	m	struct:primal_extend_data
extended_bits	constants.c	/^const char *extended_bits[] =$/;"	v
extra_bits	constants.c	/^const char *extra_bits[] =$/;"	v
extra_descr_data	structs.h	/^struct extra_descr_data$/;"	s
extra_flags	structs.h	/^   int \/*bitvector_t*\/	extra_flags;$/;"	m	struct:obj_file_elem
extra_flags	structs.h	/^   int \/*bitvector_t*\/ extra_flags;    \/* If it hums, glows, etc.      *\/ $/;"	m	struct:obj_flag_data
extractCorpses	corpses.cpp	/^void CorpseData::extractCorpses(room_vnum loadTo, int retainIDs) {$/;"	f	class:CorpseData
extractOriginalCorpses	corpses.cpp	/^void CorpseData::extractOriginalCorpses(int retainIDs) {$/;"	f	class:CorpseData
extract_char	handler.c	/^void extract_char(struct char_data * ch)$/;"	f
extract_mobile_all	genmob.c	/^void extract_mobile_all(mob_vnum vnum)$/;"	f
extract_obj	handler.c	/^void extract_obj(struct obj_data * obj)$/;"	f
extract_object_all	genobj.c	/^void extract_object_all(obj_vnum vnum)$/;"	f
extract_script	dg_handler.c	/^void extract_script(struct script_data *sc)$/;"	f
extract_script_mem	dg_handler.c	/^void extract_script_mem(struct script_memory *sc)$/;"	f
extract_trigger	dg_handler.c	/^void extract_trigger(struct trig_data *trig)$/;"	f
extract_value	dg_scripts.c	/^void extract_value(struct script_data *sc, trig_data *trig, char *cmd)$/;"	f
farg	structs.h	/^   char *farg;         \/* string argument for special function     *\/$/;"	m	struct:index_data
fate	spec_assign.c	/^  SPECIAL(fate);$/;"	v
fgetline	dg_scripts.c	/^int fgetline(FILE *file, char *p)$/;"	f
fido	spec_procs.c	/^SPECIAL(fido);$/;"	v
fight_messages	db.c	/^struct message_list fight_messages[MAX_MESSAGES];	\/* fighting messages	 *\/$/;"	v
fight_mtrigger	dg_triggers.c	/^int fight_mtrigger(char_data *ch)$/;"	f
fight_prompt	structs.h	/^        int fight_prompt;            \/* Fight prompt type                   *\/ $/;"	m	struct:primal_extend_data
fighting	structs.h	/^   struct char_data *fighting;	  \/* Opponent				*\/$/;"	m	struct:char_special_data
file_end_pos	mail.c	/^long file_end_pos = 0;			\/* length of file *\/$/;"	v
file_to_string	db.c	/^int file_to_string(const char *name, char *buf)$/;"	f
file_to_string_alloc	db.c	/^int file_to_string_alloc(const char *name, char **buf)$/;"	f
filename	boards.h	/^   char	filename[50];	\/* file to save this board to *\/$/;"	m	struct:board_info_type
files_need_saving	genolc.c	/^int files_need_saving(void) {$/;"	f
fill_word	interpreter.c	/^int fill_word(char *argument)$/;"	f
fill_words	interpreter.c	/^const char *fill_words[] =$/;"	v
find_action	act.social.c	/^int find_action(int cmd)$/;"	f
find_alias	interpreter.c	/^struct alias_data *find_alias(struct alias_data *alias_list, char *str)$/;"	f
find_all_dots	handler.c	/^int find_all_dots(char *arg)$/;"	f
find_auction_by_id	act.comm.c	/^struct auc_data *find_auction_by_id(int target)$/;"	f
find_auction_by_seller	act.comm.c	/^struct auc_data *find_auction_by_seller(int target)$/;"	f
find_board	boards.c	/^int find_board(struct char_data * ch)$/;"	f
find_case	dg_scripts.c	/^find_case(struct trig_data *trig, struct cmdlist_element *cl,$/;"	f
find_char	dg_scripts.c	/^struct char_data *find_char(long n)$/;"	f
find_char_in_index	mail.c	/^mail_index_type *find_char_in_index(long searchee)$/;"	f
find_char_room	locate.c	/^struct char_data *find_char_room(struct char_data *ch, int *itemnum, char *name,$/;"	f
find_char_world	locate.c	/^struct char_data *find_char_world(struct char_data *ch, int *itemnum, $/;"	f
find_clan	clan.c	/^sh_int find_clan(char *name)$/;"	f
find_clan_by_id	clan.c	/^sh_int find_clan_by_id(int idnum)$/;"	f
find_clan_by_sid	clan.c	/^sh_int find_clan_by_sid(char *test)$/;"	f
find_class_bitvector	class.c	/^long find_class_bitvector(char arg)$/;"	f
find_command	interpreter.c	/^int find_command(const char *command)$/;"	f
find_done	dg_scripts.c	/^find_done(struct cmdlist_element *cl)$/;"	f
find_door	act.movement.c	/^int find_door(struct char_data *ch, const char *type, char *dir, const char *cmdname, bool dispMessages)$/;"	f
find_else_end	dg_scripts.c	/^struct cmdlist_element *find_else_end(trig_data *trig,$/;"	f
find_end	dg_scripts.c	/^struct cmdlist_element *find_end(struct cmdlist_element *cl)$/;"	f
find_eq_pos	act.item.c	/^int find_eq_pos(struct char_data * ch, struct obj_data * obj, char *arg)$/;"	f
find_exdesc	act.informative.c	/^char *find_exdesc(char *word, struct extra_descr_data * list)$/;"	f
find_first_step	graph.c	/^int find_first_step(struct char_data *ch, room_rnum src, room_rnum target)$/;"	f
find_guard	castle.c	/^struct char_data *find_guard(struct char_data * chAtChar)$/;"	f
find_house	house.c	/^int find_house(room_vnum vnum)$/;"	f
find_name	interpreter.c	/^int find_name(char *name)$/;"	f
find_npc_by_name	castle.c	/^struct char_data *find_npc_by_name(struct char_data * chAtChar,$/;"	f
find_obj	dg_scripts.c	/^obj_data *find_obj(long n)$/;"	f
find_obj_eq	locate.c	/^struct obj_data *find_obj_eq(struct char_data *ch, char *arg)$/;"	f
find_obj_eqpos	locate.c	/^int find_obj_eqpos(struct char_data *ch, char *arg)$/;"	f
find_obj_equip	locate.c	/^struct obj_data *find_obj_equip(struct char_data *ch, int *itemnum, char *name)$/;"	f
find_obj_in_list	locate.c	/^struct obj_data *find_obj_in_list(struct char_data *ch, int *itemnum, $/;"	f
find_obj_inv	locate.c	/^struct obj_data *find_obj_inv(struct char_data *ch, int *itemnum, char *name)$/;"	f
find_obj_list	locate.c	/^struct obj_data *find_obj_list(struct char_data *ch, char *arg,$/;"	f
find_obj_room	locate.c	/^struct obj_data *find_obj_room(struct char_data *ch, int *itemnum, char *name)$/;"	f
find_obj_target_room	dg_objcmd.c	/^sh_int find_obj_target_room(obj_data *obj, char *rawroomstr)$/;"	f
find_obj_world	locate.c	/^struct obj_data *find_obj_world(struct char_data *ch, int *itemnum, char *name)$/;"	f
find_oper_num	shop.c	/^int find_oper_num(char token)$/;"	f
find_player_online	locate.c	/^struct char_data *find_player_online(struct char_data *ch, int *itemnum, $/;"	f
find_quest_event	quest.c	/^struct event_data *find_quest_event()$/;"	f
find_replacement	dg_scripts.c	/^void find_replacement(void *go, struct script_data *sc, trig_data *trig,$/;"	f
find_room	dg_scripts.c	/^room_data *find_room(long n)$/;"	f
find_skill_num	spell_parser.c	/^int find_skill_num(char *name)$/;"	f
find_slot	boards.c	/^int find_slot(void)$/;"	f
find_target_room	act.wizard.c	/^room_rnum find_target_room(struct char_data * ch, char *rawroomstr)$/;"	f
find_uid_name	dg_scripts.c	/^void find_uid_name(char *uid, char *name)$/;"	f
fire_breath	spec_assign.c	/^  SPECIAL(fire_breath);$/;"	v
first_disp_char	colour.c	/^int first_disp_char(const char *txt)$/;"	f
flag	structs.h	/^  int flag;          \/\/ TRAP_INSIDE, TRAP_OUTSIDE, etc.$/;"	m	struct:trap_type
flags_door	act.movement.c	/^const int flags_door[] =$/;"	v
flush_queues	comm.c	/^void flush_queues(struct descriptor_data *d)$/;"	f
fname	handler.c	/^char *fname(const char *namelist)$/;"	f
follow_type	structs.h	/^struct follow_type$/;"	s
follower	structs.h	/^   struct char_data *follower;$/;"	m	struct:follow_type
followers	structs.h	/^   struct follow_type *followers;        \/* List of chars followers       *\/$/;"	m	struct:char_data
forget	mobact.c	/^void forget(struct char_data * ch, struct char_data * victim)$/;"	f
format_text	improved-edit.c	/^void format_text(char **ptr_string, int mode, struct descriptor_data *d, unsigned int maxlen)$/;"	f
frags	clan.h	/^  int frags[MAX_CLANS];                 \/* Clan Kills             *\/$/;"	m	struct:clan_rec
fread_action	act.social.c	/^char *fread_action(FILE * fl, int nr)$/;"	f
fread_letter	db.c	/^char fread_letter(FILE *fp)$/;"	f
fread_string	db.c	/^char *fread_string(FILE * fl, char *error)$/;"	f
free_alias	interpreter.c	/^void free_alias(struct alias_data *a)$/;"	f
free_char	db.c	/^void free_char(struct char_data * ch)$/;"	f
free_ex_descriptions	genolc.c	/^void free_ex_descriptions(struct extra_descr_data *head)$/;"	f
free_list	mail.c	/^position_list_type *free_list = NULL;	\/* list of free positions in file *\/$/;"	v
free_mobile	genmob.c	/^int free_mobile(struct char_data *mob)$/;"	f
free_mobile_strings	genmob.c	/^int free_mobile_strings(struct char_data *mob)$/;"	f
free_obj	db.c	/^void free_obj(struct obj_data * obj)$/;"	f
free_object_strings	genobj.c	/^void free_object_strings(struct obj_data *obj)$/;"	f
free_object_strings_proto	genobj.c	/^void free_object_strings_proto(struct obj_data *obj)$/;"	f
free_remaining_responses	quest.c	/^void free_remaining_responses(struct trivia_data *qevtr)$/;"	f
free_rent	config.c	/^char free_rent = YES;$/;"	v
free_room	redit.c	/^void free_room(struct room_data *room)$/;"	f
free_room_strings	genwld.c	/^int free_room_strings(struct room_data *room)$/;"	f
free_script	dg_db_scripts.c	/^void free_script(struct script_data *sc)$/;"	f
free_shop	genshp.c	/^void free_shop(struct shop_data *shop)$/;"	f
free_shop_strings	genshp.c	/^void free_shop_strings(struct shop_data *shop)$/;"	f
free_trigger	dg_handler.c	/^void free_trigger(struct trig_data *trig)$/;"	f
free_trivia_response	quest.c	/^void free_trivia_response(struct trivia_data *qevtr)$/;"	f
free_type_list	genshp.c	/^void free_type_list(struct shop_buy_data **list)$/;"	f
free_var_el	dg_scripts.c	/^void free_var_el(struct trig_var_data *var)$/;"	f
free_varlist	dg_db_scripts.c	/^void free_varlist(struct trig_var_data *vd)$/;"	f
freeze_level	structs.h	/^   ubyte freeze_level;		\/* Level of god who froze char, if any	*\/$/;"	m	struct:player_special_data_saved
friends	structs.h	/^        long friends[MAX_FRIENDS]; $/;"	m	struct:primal_extend_data
frisbee	spec_assign.c	/^  SPECIAL(frisbee);$/;"	v
from	mail.h	/^   long from;			\/* idnum of the mail's sender		*\/$/;"	m	struct:header_data_type
fromState	reports.h	/^    int fromState;              \/\/ The old state$/;"	m	class:ReportChange
fromState	reports.h	/^  int fromState;        \/\/ The old state$/;"	m	struct:reportchange_file_elem
fromType	reports.h	/^    int fromType;               \/\/ The old type$/;"	m	class:ReportChange
fromType	reports.h	/^  int fromType;         \/\/ The old type $/;"	m	struct:reportchange_file_elem
frozen_start_room	config.c	/^room_vnum frozen_start_room = 501;$/;"	v
fry_victim	castle.c	/^void fry_victim(struct char_data * ch)$/;"	f
fullness	constants.c	/^const char *fullness[] =$/;"	v
func	dg_event.h	/^  EVENT(*func);$/;"	m	struct:event_info
func	genolc.c	/^  int (*func)(sh_int rnum);$/;"	m	file:
func	shop.h	/^   SPECIAL (*func);		\/* Secondary spec_proc for shopkeeper	*\/$/;"	m	struct:shop_data
func	structs.h	/^   SPECIAL(*func);$/;"	m	struct:index_data
func	structs.h	/^   SPECIAL(*func);$/;"	m	struct:room_data
gain_clan_exp	clan.c	/^void gain_clan_exp (struct char_data *ch, long amount)$/;"	f
gain_condition	limits.c	/^void gain_condition(struct char_data * ch, int condition, int value)$/;"	f
gain_exp	limits.c	/^int gain_exp(struct char_data * ch, int gain)$/;"	f
gain_exp_regardless	limits.c	/^void gain_exp_regardless(struct char_data * ch, int \/*gain*\/ newlevel)$/;"	f
gamble_blackjack	casino.c	/^void gamble_blackjack(struct char_data *ch, char *arg) $/;"	f
gamble_race	casino.c	/^void gamble_race(struct char_data *ch, char *arg) $/;"	f
gamble_slots	casino.c	/^void gamble_slots(struct char_data *ch, char *arg) $/;"	f
gameInfo	db.c	/^GameInfo gameInfo = GameInfo();$/;"	v
game_data	structs.h	/^struct game_data$/;"	s
game_item	structs.h	/^struct game_item$/;"	s
game_loop	comm.c	/^void game_loop(socket_t mother_desc)$/;"	f
gaze_npc	spec_assign.c	/^  SPECIAL(gaze_npc);$/;"	v
gemReward	spec_procs.c	/^void gemReward(struct char_data *ch, int num, int type)$/;"	f
gen_board	boards.c	/^SPECIAL(gen_board);$/;"	v
gen_board	spec_assign.c	/^  SPECIAL(gen_board);$/;"	v
gen_receptionist	objsave.c	/^int gen_receptionist(struct char_data * ch, struct char_data * recep,$/;"	f
genders	constants.c	/^const char *genders[] =$/;"	v
general_description	structs.h	/^   char	*general_description;       \/* When look DIR.			*\/$/;"	m	struct:room_direction_data
generate_zone_data	db.c	/^void generate_zone_data()$/;"	f
generic_find	locate.c	/^int generic_find(char *arg, bitvector_t findbits, struct char_data *ch,$/;"	f
generic_find_char	locate.c	/^struct char_data *generic_find_char(struct char_data *ch, char *arg, int where)$/;"	f
generic_find_obj	locate.c	/^struct obj_data *generic_find_obj(struct char_data *ch, char *arg, int where)$/;"	f
genolc_checkstring	genolc.c	/^int genolc_checkstring(struct descriptor_data *d, const char *arg)$/;"	f
getBranch	structs.h	/^    int getBranch() { return ReleaseInfo::branch; };$/;"	f	class:ReleaseInfo
getCard	casino.c	/^int getCard() $/;"	f
getCardName	casino.c	/^char *getCardName(int card) $/;"	f
getChangeDescription	reports.h	/^    char *getChangeDescription() { return Report::changeDescription; };$/;"	f	class:Report
getChangeDescription	reports.h	/^    char *getChangeDescription() { return ReportChange::changeDescription; };$/;"	f	class:ReportChange
getChangeNum	reports.h	/^    int getChangeNum() { return ReportChange::changeNum; };$/;"	f	class:ReportChange
getContents	corpses.h	/^    std::list<Contain> getContents() { return contains; } $/;"	f	class:Contain
getDate	structs.h	/^    char *getDate() { return ReleaseInfo::date; };$/;"	f	class:ReleaseInfo
getFromState	reports.h	/^    int getFromState() { return ReportChange::fromState; };$/;"	f	class:ReportChange
getFromType	reports.h	/^    int getFromType() { return ReportChange::fromType; };$/;"	f	class:ReportChange
getGamePlayer	casino.c	/^struct game_item *getGamePlayer(struct char_data *ch, char game) $/;"	f
getGossip	act.comm.c	/^void GossipItem::getGossip(struct char_data *forChar, char *gossip)$/;"	f	class:GossipItem
getLongDescription	reports.h	/^    char *getLongDescription() { return Report::longDescription; };$/;"	f	class:Report
getMajor	structs.h	/^    int getMajor() { return ReleaseInfo::major; };$/;"	f	class:ReleaseInfo
getMaxUsersOnline	structs.h	/^    int getMaxUsersOnline(void) { return maxUsersOnline; }$/;"	f	class:GameInfo
getMaxUsersOnlinePeriod	structs.h	/^    int getMaxUsersOnlinePeriod(void) { return maxUsersOnlinePeriod; }$/;"	f	class:GameInfo
getMeHere	graph.c	/^int getMeHere(sh_int chroom, sh_int victroom) {$/;"	f
getMinor	structs.h	/^    int getMinor() { return ReleaseInfo::minor; };$/;"	f	class:ReleaseInfo
getNoneExistMesg	reports.cpp	/^void ReportList::getNoneExistMesg(int mode, char *writeto)$/;"	f	class:ReportList
getNotFoundMesg	reports.cpp	/^void ReportList::getNotFoundMesg(int mode, char *writeto)$/;"	f	class:ReportList
getOrgRelease	reports.h	/^    ReleaseInfo getOrgRelease() { return Report::orgRelease; };$/;"	f	class:Report
getOrgRoom	reports.h	/^    room_vnum getOrgRoom() { return Report::orgRoom; };$/;"	f	class:Report
getOrgTime	reports.h	/^    time_t getOrgTime() { return Report::orgTime; };$/;"	f	class:Report
getOutOfRangeMesg	reports.cpp	/^void ReportList::getOutOfRangeMesg(int mode, char *writeto)$/;"	f	class:ReportList
getPlayerId	reports.h	/^    long getPlayerId() { return Report::playerId; };$/;"	f	class:Report
getPlayerId	reports.h	/^    long getPlayerId() { return ReportChange::playerId; };$/;"	f	class:ReportChange
getRelease	reports.h	/^    ReleaseInfo getRelease() { return ReportChange::changeRelease; };$/;"	f	class:ReportChange
getReportModeName	reports.cpp	/^void getReportModeName(int mode, char *writeto)$/;"	f
getReportNum	reports.h	/^    int getReportNum() { return Report::reportNum; };$/;"	f	class:Report
getReportNum	reports.h	/^    int getReportNum() { return ReportChange::reportNum; };$/;"	f	class:ReportChange
getReportType	reports.cpp	/^Report::getReportType()$/;"	f	class:Report
getReporterId	reports.h	/^    long getReporterId() { return Report::reporterId; };$/;"	f	class:Report
getRestrictedMesg	reports.cpp	/^void ReportList::getRestrictedMesg(int mode, char *writeto)$/;"	f	class:ReportList
getShortDescription	reports.h	/^    char *getShortDescription() { return Report::shortDescription; };$/;"	f	class:Report
getState	reports.h	/^    int getState() { return Report::reportState; };$/;"	f	class:Report
getTag	structs.h	/^    char *getTag() { return ReleaseInfo::tag; }; $/;"	f	class:ReleaseInfo
getTime	reports.h	/^    time_t getTime() { return ReportChange::changeTime; };$/;"	f	class:ReportChange
getToState	reports.h	/^    int getToState() { return ReportChange::toState; };$/;"	f	class:ReportChange
getToType	reports.h	/^    int getToType() { return ReportChange::toType; };$/;"	f	class:ReportChange
getTopReportNum	reports.h	/^    int getTopReportNum() { return ReportList::topReportNum; };$/;"	f	class:ReportList
getType	reports.h	/^    int getType() { return Report::type; };$/;"	f	class:Report
getUsersOnline	structs.h	/^    int getUsersOnline(void) { return usersOnline; }$/;"	f	class:GameInfo
getVNum	corpses.h	/^    obj_vnum getVNum() { return itemNumber; }               $/;"	f	class:Contain
getVRoom	corpses.h	/^    room_vnum getVRoom(void) {$/;"	f	class:Corpse
getWeight	corpses.h	/^    int getWeight() {$/;"	f	class:Corpse
get_align_prompt_string	comm.c	/^char *get_align_prompt_string(struct char_data *ch) {$/;"	f
get_bind_addr	comm.c	/^struct in_addr *get_bind_addr()$/;"	f
get_bit	act.other.c	/^int get_bit(struct obj_data *obj)$/;"	f
get_burgle_area	act.offensive.c	/^int get_burgle_area(room_rnum r) {$/;"	f
get_burgle_room_type	act.offensive.c	/^long get_burgle_room_type(long lArea)$/;"	f
get_char	dg_scripts.c	/^char_data *get_char(char *name)$/;"	f
get_char_by_obj	dg_scripts.c	/^char_data *get_char_by_obj(obj_data *obj, char *name)$/;"	f
get_char_by_room	dg_scripts.c	/^char_data *get_char_by_room(room_data *room, char *name)$/;"	f
get_char_colors	oasis.c	/^void get_char_colors(struct char_data *ch)$/;"	f
get_char_num	handler.c	/^struct char_data *get_char_num(mob_rnum nr)$/;"	f
get_char_room	handler.c	/^struct char_data *get_char_room(char *name, room_rnum room)$/;"	f
get_check_money	act.item.c	/^void get_check_money(struct char_data * ch, struct obj_data * obj)$/;"	f
get_exp_prompt_string	comm.c	/^char *get_exp_prompt_string(struct char_data *ch) {$/;"	f
get_fight_prompt	comm.c	/^char *get_fight_prompt(struct char_data *ch) {$/;"	f
get_filename	utils.c	/^int get_filename(char *orig_name, char *filename, int mode)$/;"	f
get_from_container	act.item.c	/^void get_from_container(struct char_data * ch, struct obj_data * cont,$/;"	f
get_from_q	comm.c	/^int get_from_q(struct txt_q *queue, char *dest, int *aliased)$/;"	f
get_from_room	act.item.c	/^void get_from_room(struct char_data * ch, char *arg, int howmany)$/;"	f
get_hash_obj_vis	shop.c	/^struct obj_data *get_hash_obj_vis(struct char_data * ch, char *name,$/;"	f
get_id_by_name	db.c	/^long get_id_by_name(char *name)$/;"	f
get_line	utils.c	/^int get_line(FILE * fl, char *buf)$/;"	f
get_lowest_valid_level	db.c	/^int get_lowest_valid_level(int base_min_level[SECOND_REMORT_CLASS - 1], int bclass1, int bclass2, int level) {$/;"	f
get_max_players	comm.c	/^int get_max_players(void)$/;"	f
get_name_by_id	db.c	/^char *get_name_by_id(long id)$/;"	f
get_number	handler.c	/^int get_number(char **name)$/;"	f
get_obj	dg_scripts.c	/^obj_data *get_obj(char *name)  $/;"	f
get_obj_by_obj	dg_scripts.c	/^obj_data *get_obj_by_obj(obj_data *obj, char *name)$/;"	f
get_obj_by_room	dg_scripts.c	/^obj_data *get_obj_by_room(room_data *room, char *name)$/;"	f
get_obj_from	act.wizard.c	/^struct obj_data *get_obj_from(struct obj_data *list, long objID, int itemNumber) {$/;"	f
get_obj_in_list	dg_scripts.c	/^obj_data *get_obj_in_list(char *name, obj_data *list)$/;"	f
get_obj_in_list_num	handler.c	/^struct obj_data *get_obj_in_list_num(int num, struct obj_data * list)$/;"	f
get_obj_num	handler.c	/^struct obj_data *get_obj_num(obj_rnum nr)$/;"	f
get_object_in_equip	dg_scripts.c	/^obj_data *get_object_in_equip(char_data * ch, char *name)$/;"	f
get_one_line	db.c	/^void get_one_line(FILE *fl, char *buf)$/;"	f
get_otrigger	dg_triggers.c	/^int get_otrigger(obj_data *obj, char_data *actor)$/;"	f
get_player	clan.c	/^struct char_data *get_player (struct char_data *ch, char *name)$/;"	f
get_player_by_id	handler.c	/^struct char_data *get_player_by_id(long idnum)$/;"	f
get_player_online	locate.c	/^struct char_data *get_player_online(struct char_data *ch, char *arg, int where)$/;"	f
get_point_prompt_string	comm.c	/^char *get_point_prompt_string(int curr, int max, bool max_point)$/;"	f
get_ptable_by_name	db.c	/^long get_ptable_by_name(char *name)$/;"	f
get_purchase_obj	shop.c	/^struct obj_data *get_purchase_obj(struct char_data * ch, char *arg,$/;"	f
get_quest_scores	quest.c	/^struct quest_score_data *get_quest_scores(struct event_data *ev)$/;"	f
get_random_exit	act.offensive.c	/^int get_random_exit(long lRoom)$/;"	f
get_repair_cost	spec_procs.c	/^int get_repair_cost(struct char_data *ch, struct obj_data *obj, char *output) {$/;"	f
get_room	dg_scripts.c	/^room_data *get_room(char *name)$/;"	f
get_selling_obj	shop.c	/^struct obj_data *get_selling_obj(struct char_data * ch, char *name,$/;"	f
get_slide_obj_vis	shop.c	/^struct obj_data *get_slide_obj_vis(struct char_data * ch, char *name,$/;"	f
get_type	oasis.c	/^int get_type(char *str, int type)$/;"	f
get_user_prompt_string	comm.c	/^char *get_user_prompt_string(struct char_data *ch) {$/;"	f
get_victim	castle.c	/^struct char_data *get_victim(struct char_data * chAtChar)$/;"	f
get_world	utils.c	/^int get_world(room_rnum room)$/;"	f
gettimeofday	comm.c	/^void gettimeofday(struct timeval *t, struct timezone *dummy)$/;"	f
giant	spec_assign.c	/^  SPECIAL(giant);$/;"	v
give_find_vict	act.item.c	/^struct char_data *give_find_vict(struct char_data * ch, char *arg)$/;"	f
give_otrigger	dg_triggers.c	/^int give_otrigger(obj_data *obj, char_data *actor, char_data *victim)$/;"	f
global_vars	dg_scripts.h	/^  struct trig_var_data *global_vars;   \/* list of global variables   *\/$/;"	m	struct:script_data
go	dg_scripts.c	/^  void *go;$/;"	m	struct:wait_event_data	file:
god_msg	structs.h	/^   struct msg_type god_msg;	\/* messages when hit on god		*\/$/;"	m	struct:message_type
gold	corpses.h	/^    int gold;$/;"	m	class:Corpse
gold	structs.h	/^   int	gold;           \/* Money carried                           *\/$/;"	m	struct:char_point_data
gold	structs.h	/^   int	gold;$/;"	m	struct:rent_info
graf	limits.c	/^int graf(int age, int p0, int p1, int p2, int p3, int p4, int p5, int p6)$/;"	f
greet_memory_mtrigger	dg_triggers.c	/^void greet_memory_mtrigger(char_data *actor)$/;"	f
greet_mtrigger	dg_triggers.c	/^int greet_mtrigger(char_data *actor, int dir)$/;"	f
grn	oasis.c	/^const char *nrm, *grn, *cyn, *yel;$/;"	v
group_gain	fight.c	/^void group_gain(struct char_data * ch, struct char_data * victim)$/;"	f
grumpy	spec_assign.c	/^  SPECIAL(grumpy);$/;"	v
guests	house.h	/^   long guests[MAX_GUESTS];	\/* idnums of house's guests	*\/$/;"	m	struct:house_control_rec
guild	castle.c	/^SPECIAL(guild);$/;"	v
guild	spec_assign.c	/^  SPECIAL(guild);$/;"	v
guild	spec_procs.c	/^SPECIAL(guild);$/;"	v
guild_guard	spec_assign.c	/^  SPECIAL(guild_guard);$/;"	v
guild_guard	spec_procs.c	/^SPECIAL(guild_guard);$/;"	v
half_chop	interpreter.c	/^void half_chop(char *string, char *arg1, char *arg2)$/;"	f
half_chop_case_sens	interpreter.c	/^void half_chop_case_sens(char *string, char *arg1, char *arg2)$/;"	f
handbook	db.c	/^char *handbook = NULL;		\/* handbook for new immortals	 *\/$/;"	v
handle_burglaries	act.informative.c	/^void handle_burglaries()$/;"	f
handle_burglary	act.informative.c	/^void handle_burglary(struct event_data *ev) $/;"	f
handle_curfew	act.informative.c	/^void handle_curfew(struct event_data *ev)$/;"	f
handle_detailed_list	shop.c	/^void handle_detailed_list(char *buf, char *buf1, struct char_data * ch)$/;"	f
handle_events	act.informative.c	/^void handle_events() $/;"	f
handle_fire	act.informative.c	/^void handle_fire(struct event_data *ev)$/;"	f
handle_fireball	magic.c	/^void handle_fireball(struct char_data *ch)$/;"	f
handle_gold_rush	act.informative.c	/^void handle_gold_rush(struct event_data *ev)$/;"	f
handle_happy	act.informative.c	/^void handle_happy(struct event_data *ev)$/;"	f
handle_hit	casino.c	/^void handle_hit(struct char_data *ch) $/;"	f
handle_itemhunt_cmd	quest.c	/^bool handle_itemhunt_cmd(struct char_data *ch, struct event_data *ev,$/;"	f
handle_quest_event	quest.c	/^void handle_quest_event(struct event_data *ev)$/;"	f
handle_quest_item_hunt	quest.c	/^void handle_quest_item_hunt(struct event_data *ev)$/;"	f
handle_quest_item_take	quest.c	/^int handle_quest_item_take(struct char_data *ch, struct obj_data *obj)$/;"	f
handle_quest_load	quest.c	/^bool handle_quest_load(struct char_data *ch, mob_rnum mobr, obj_rnum objr, $/;"	f
handle_quest_mob_death	quest.c	/^void handle_quest_mob_death(struct char_data *ch, struct char_data *killer)$/;"	f
handle_spell_payment	spell_parser.c	/^int handle_spell_payment(struct char_data *ch, struct char_data *tch, $/;"	f
handle_split	casino.c	/^void handle_split(int counter) $/;"	f
handle_trivia_cmd	quest.c	/^bool handle_trivia_cmd(struct char_data *ch, struct event_data *ev, $/;"	f
hasBlackjack	casino.c	/^int hasBlackjack(int playernum) $/;"	f
has_available_exit	act.offensive.c	/^int has_available_exit(long room, short limit)$/;"	f
has_boat	act.movement.c	/^int has_boat(struct char_data *ch)$/;"	f
has_exit	spec_procs.c	/^bool has_exit(room_rnum rnum) {$/;"	f
has_key	act.movement.c	/^int has_key(struct char_data *ch, obj_vnum key)$/;"	f
has_mail	mail.c	/^int has_mail(long recipient)$/;"	f
has_prompt	structs.h	/^   int	has_prompt;		\/* is the user at a prompt?             *\/$/;"	m	struct:descriptor_data
has_stats_for_prac	utils.c	/^int has_stats_for_prac(struct char_data *ch, int skillnum, bool show)$/;"	f
has_stats_for_skill	utils.c	/^int has_stats_for_skill(struct char_data *ch, int skillnum, bool show)$/;"	f
has_voted	structs.h	/^   int has_voted;               \/* Whether character has voted          *\/$/;"	m	struct:player_special_data
hcontrol_build_house	house.c	/^void hcontrol_build_house(struct char_data * ch, char *arg)$/;"	f
hcontrol_destroy_house	house.c	/^void hcontrol_destroy_house(struct char_data * ch, char *arg)$/;"	f
hcontrol_list_houses	house.c	/^void hcontrol_list_houses(struct char_data * ch, char *arg)$/;"	f
hcontrol_pay_house	house.c	/^void hcontrol_pay_house(struct char_data * ch, char *arg)$/;"	f
head	db.h	/^   struct reset_q_element *head;$/;"	m	struct:reset_q_type
head	structs.h	/^   struct txt_block *head;$/;"	m	struct:txt_q
header_block_type	mail.h	/^typedef struct header_block_type_d header_block_type;$/;"	t
header_block_type_d	mail.h	/^struct header_block_type_d {$/;"	s
header_data	mail.h	/^   struct header_data_type header_data;	\/* other header data		*\/$/;"	m	struct:header_block_type_d
header_data_type	mail.h	/^struct header_data_type {$/;"	s
heading	boards.h	/^   char	*heading;     \/* pointer to message's heading *\/$/;"	m	struct:board_msginfo
heading_len	boards.h	/^   int	heading_len;  \/* size of header (for file write) *\/$/;"	m	struct:board_msginfo
heartbeat	comm.c	/^void heartbeat(int pulse)$/;"	f
height	structs.h	/^   ubyte height;       \/* PC \/ NPC's height                    *\/$/;"	m	struct:char_player_data
height	structs.h	/^   ubyte height;$/;"	m	struct:char_file_u
help	act.wizard.c	/^    const char *help;	\/\/ Some brief help for the command$/;"	m	struct:set_struct	file:
help	db.c	/^char *help = NULL;		\/* help screen			 *\/$/;"	v
helpAssigned	interpreter.h	/^   bool helpAssigned;$/;"	m	struct:command_info
help_index_element	db.h	/^struct help_index_element {$/;"	s
help_table	db.c	/^struct help_index_element *help_table = 0;	\/* the help table	 *\/$/;"	v
hide	act.social.c	/^  int hide;$/;"	m	struct:social_messg	file:
hide	structs.h	/^   sh_int hide;$/;"	m	struct:dex_skill_type
high_dice	spec_assign.c	/^  SPECIAL(high_dice);$/;"	v
high_dice1	spec_assign.c	/^  SPECIAL(high_dice1);$/;"	v
hint_table	db.c	/^char *hint_table[MAX_HINTS];    \/* hint table                    *\/$/;"	v
hints	db.h	/^   char *hints[MAX_ZONE_HINTS];$/;"	m	struct:zone_data
history	structs.h	/^   char **history;		\/* History of commands, for ! mostly.	*\/$/;"	m	struct:descriptor_data
history_pos	structs.h	/^   int	history_pos;		\/* Circular array position.		*\/$/;"	m	struct:descriptor_data
hit	fight.c	/^void hit(struct char_data * ch, struct char_data * victim, int type)$/;"	f
hit	structs.h	/^   \/*sh_int*\/int hit;$/;"	m	struct:char_point_data
hit_gain	limits.c	/^int hit_gain(struct char_data *ch)$/;"	f
hit_msg	structs.h	/^   struct msg_type hit_msg;	\/* messages when hit			*\/$/;"	m	struct:message_type
hitp	structs.h	/^   sh_int hitp;$/;"	m	struct:con_app_type
hitprcnt_mtrigger	dg_triggers.c	/^void hitprcnt_mtrigger(char_data *ch)$/;"	f
hitroll	structs.h	/^   sh_int \/*ubyte*\/  hitroll;  \/* Any bonus or penalty to the hit roll    *\/$/;"	m	struct:char_point_data
holler_move_cost	config.c	/^int holler_move_cost = 20;$/;"	v
hometown	structs.h	/^   int	hometown;      \/* PC s Hometown (zone)                 *\/$/;"	m	struct:char_player_data
hometown	structs.h	/^   sh_int hometown;$/;"	m	struct:char_file_u
host	structs.h	/^        char host[HOST_LENGTH+1];	\/* host of last logon *\/$/;"	m	struct:primal_extend_data
host	structs.h	/^   char	host[HOST_LENGTH+1];	\/* hostname				*\/$/;"	m	struct:descriptor_data
host	structs.h	/^  char host[HOST_LENGTH + 1];$/;"	m	struct:user_data
hours	structs.h	/^   int hours, day, month;$/;"	m	struct:time_info_data
house_control	house.c	/^struct house_control_rec house_control[MAX_HOUSES];$/;"	v
house_control_rec	house.h	/^struct house_control_rec {$/;"	s
how_good	spec_procs.c	/^const char *how_good(int percent)$/;"	f
hsort	db.c	/^int hsort(const void *a, const void *b)$/;"	f
hunt_data	structs.h	/^struct hunt_data$/;"	s
hunt_list	db.c	/^struct hunt_data *hunt_list = NULL;  \/* Artus> Hunting\/Hunted List *\/$/;"	v
hunt_victim	graph.c	/^void hunt_victim(struct char_data * ch)$/;"	f
hunter	structs.h	/^  struct char_data *hunter;$/;"	m	struct:hunt_data
hunting	structs.h	/^   struct char_data *hunting;	  \/* Char hunted by this char		*\/$/;"	m	struct:char_special_data
hupsig	comm.c	/^RETSIGTYPE hupsig(int sig)$/;"	f
ice_breath	spec_assign.c	/^  SPECIAL(ice_breath);$/;"	v
id	clan.h	/^  int id;				\/* Clan ID                *\/$/;"	m	struct:clan_rec
id	db.h	/^   long id;$/;"	m	struct:player_index_element
id	db.h	/^  long id;$/;"	m	struct:imm_list_element
id	db.h	/^  long id;$/;"	m	struct:questlist_element
id	dg_scripts.h	/^  long id;                             \/* id of who to remember *\/$/;"	m	struct:script_memory
id	structs.h	/^   long	id;$/;"	m	struct:memory_rec_struct
id	structs.h	/^   long id;                            \/* used by DG triggers             *\/$/;"	m	struct:char_data
id	structs.h	/^   long id;                       \/* used by DG triggers              *\/$/;"	m	struct:obj_data
identify_obj_to_char	spells.c	/^void identify_obj_to_char(struct char_data *ch, struct obj_data *obj)$/;"	f
idle_max_level	config.c	/^int idle_max_level = LVL_OWNER;$/;"	v
idle_rent_time	config.c	/^int idle_rent_time = 20;$/;"	v
idle_tics	structs.h	/^   byte idle_tics;		\/* tics idle at password prompt		*\/$/;"	m	struct:descriptor_data
idle_void	config.c	/^int idle_void = 8;$/;"	v
idnum	structs.h	/^   long	idnum;			\/* player's idnum; -1 for mobiles	*\/$/;"	m	struct:char_special_data_saved
idnum	structs.h	/^  int idnum;$/;"	m	struct:auc_data
idnum	structs.h	/^  int idnum;$/;"	m	struct:auc_file_elem
if_flag	db.h	/^   bool if_flag;	\/* if TRUE: exe only if preceding exe'd *\/$/;"	m	struct:reset_com
ignore	structs.h	/^        struct ignore_data ignore[MAX_IGNORE];$/;"	m	struct:primal_extend_data
ignore_data	structs.h	/^struct ignore_data$/;"	s
ignorelvl	structs.h	/^	int ignorelvl;$/;"	m	struct:primal_extend_data
ignorelvlall	structs.h	/^	ubyte ignorelvlall;$/;"	m	struct:primal_extend_data
imm_list_element	db.h	/^struct imm_list_element$/;"	s
immkills	structs.h	/^	long immkills;$/;"	m	struct:kill_data
immlist	db.c	/^char *immlist = NULL;		\/* list of peon gods		 *\/$/;"	v
immlist_table	db.c	/^struct imm_list_element *immlist_table = NULL;		\/* immlist data *\/$/;"	v
immort_start_room	config.c	/^room_vnum immort_start_room = 1200;$/;"	v
imotd	db.c	/^char *imotd = NULL;		\/* message of the day - immorts *\/$/;"	v
improved_editor_execute	improved-edit.c	/^int improved_editor_execute(struct descriptor_data *d, char *str)$/;"	f
inChangeFile	reports.h	/^    ifstream inChangeFile;$/;"	m	class:ReportList
inCorpseFile	corpses.cpp	/^ifstream inCorpseFile;$/;"	v
inReportFile	reports.h	/^    ifstream inReportFile;$/;"	m	class:ReportList
in_addr	sysdep.h	/^struct in_addr {$/;"	s
in_obj	structs.h	/^   struct obj_data *in_obj;       \/* In what object NULL when none    *\/$/;"	m	struct:obj_data
in_room	corpses.h	/^    room_vnum in_room;      $/;"	m	class:Corpse
in_room	shop.h	/^   room_rnum *in_room;		\/* Where is the shop?			*\/$/;"	m	struct:shop_data
in_room	structs.h	/^   room_rnum in_room;		\/* In what room -1 when conta\/carr	*\/$/;"	m	struct:obj_data
in_room	structs.h	/^   room_rnum in_room;                    \/* Location (real room number)	  *\/$/;"	m	struct:char_data
inbuf	structs.h	/^   char	inbuf[MAX_RAW_INPUT_LENGTH];  \/* buffer for raw input		*\/$/;"	m	struct:descriptor_data
incinerate	act.informative.c	/^void incinerate(room_rnum room)$/;"	f
index_boot	db.c	/^void index_boot(int mode)$/;"	f
index_data	dg_scripts.h	/^typedef struct index_data index_data;$/;"	t
index_data	structs.h	/^struct index_data$/;"	s
index_mail	mail.c	/^void index_mail(long id_to_index, long pos)$/;"	f
index_object	genobj.c	/^int index_object(struct obj_data *obj, obj_vnum ovnum, obj_rnum ornum, zone_vnum vznum)$/;"	f
info	db.c	/^char *info = NULL;		\/* info page			 *\/$/;"	v
info	dg_event.h	/^  void *info;$/;"	m	struct:event_info
info1	structs.h	/^  int info1;		$/;"	m	struct:event_data
info2	structs.h	/^  int info2;$/;"	m	struct:event_data
info3	structs.h	/^  int info3;$/;"	m	struct:event_data
info_channel	utils.c	/^void info_channel( char *str , struct char_data *ch )$/;"	f
init_auctions	utils.c	/^void init_auctions(void)$/;"	f
init_blackjack	casino.c	/^void init_blackjack() $/;"	f
init_boards	boards.c	/^void init_boards(void)$/;"	f
init_bounty_hunt	act.informative.c	/^void init_bounty_hunt()$/;"	f
init_char	db.c	/^void init_char(struct char_data * ch)$/;"	f
init_clans	clan.c	/^void init_clans()$/;"	f
init_event	act.informative.c	/^void init_event()$/;"	f
init_game	comm.c	/^void init_game(ush_int port)$/;"	f
init_games	casino.c	/^void init_games() $/;"	f
init_gold_rush	act.informative.c	/^void init_gold_rush()$/;"	f
init_mobile	medit.c	/^void init_mobile(struct char_data *mob)$/;"	f
init_nocturnal	utils.c	/^void init_nocturnal(void)$/;"	f
init_race	casino.c	/^void init_race(void) $/;"	f
init_socket	comm.c	/^socket_t init_socket(ush_int port)$/;"	f
initialArea	structs.h	/^	long initialArea;	\/\/ Area (ie RICH, REG, POOR)$/;"	m	class:Burglary
initialise	corpses.cpp	/^void Corpse::initialise(long playerId, int inVRoom, int gold, int weight, $/;"	f	class:Corpse
input	structs.h	/^   struct txt_q input;		\/* q of unprocessed input		*\/$/;"	m	struct:descriptor_data
insanity	spec_assign.c	/^  SPECIAL(insanity);$/;"	v
insert_object	genobj.c	/^int insert_object(struct obj_data *obj, obj_vnum ovnum, zone_vnum vznum)$/;"	f
instigator	structs.h	/^   bool instigator;             \/* Used for pk stuff - ARTUS            *\/$/;"	m	struct:player_special_data
int_app	constants.c	/^cpp_extern const struct int_app_type int_app[] = {$/;"	v
int_app_type	structs.h	/^struct int_app_type$/;"	s
intel	structs.h	/^   sbyte intel;$/;"	m	struct:char_ability_data
interpret_espec	db.c	/^void interpret_espec(const char *keyword, const char *value, int i, int nr)$/;"	f
intl	spells.h	/^   sh_int intl[NUM_CLASSES];$/;"	m	struct:spell_info_type
invalid_align	handler.c	/^int invalid_align(struct char_data *ch, struct obj_data *obj)$/;"	f
invalid_class	class.c	/^int invalid_class(struct char_data *ch, struct obj_data *obj) $/;"	f
invalid_level	act.item.c	/^int invalid_level(struct char_data *ch, struct obj_data *object, bool display)$/;"	f
invalid_list	ban.c	/^char *invalid_list[MAX_INVALID_NAMES];$/;"	v
invis_level	structs.h	/^   ubyte invis_level;		\/* level of invisibility		*\/$/;"	m	struct:player_special_data_saved
invis_type_flag	structs.h	/^	int invis_type_flag;	$/;"	m	struct:primal_extend_data
isCvsUpToDate	structs.h	/^    bool isCvsUpToDate() { return ReleaseInfo::cvsUpToDate; };$/;"	f	class:ReleaseInfo
isEditable	reports.cpp	/^bool Report::isEditable(struct descriptor_data * d, int mode)$/;"	f	class:Report
isInGame	casino.c	/^int isInGame(struct char_data *ch, char game) $/;"	f
isPlayerFriend	act.item.c	/^int isPlayerFriend(struct char_data *ch, long idnumOwner)$/;"	f
isRestricted	reports.cpp	/^bool Report::isRestricted(struct descriptor_data *d, int mode)$/;"	f	class:Report
isViewable	reports.cpp	/^bool Report::isViewable(struct descriptor_data *d)$/;"	f	class:Report
is_abbrev	interpreter.c	/^int is_abbrev(const char *arg1, const char *arg2)$/;"	f
is_axe	utils.c	/^int is_axe(struct obj_data *obj)$/;"	f
is_blade	utils.c	/^int is_blade(struct obj_data *obj)$/;"	f
is_burgling	act.offensive.c	/^bool is_burgling(struct char_data * ch)$/;"	f
is_carrying	utils.c	/^int is_carrying(struct char_data *ch, int item_type)$/;"	f
is_colour	colour.c	/^int is_colour(struct char_data *ch, char code, bool colour_code_only)$/;"	f
is_death_room	utils.c	/^bool is_death_room(room_rnum nr)$/;"	f
is_empty	db.c	/^int is_empty(zone_rnum zone_nr)$/;"	f
is_exit_available	act.offensive.c	/^bool is_exit_available(long room, int dir)$/;"	f
is_idnum_in_qlist	quest.c	/^struct quest_score_data *is_idnum_in_qlist(int idnum, $/;"	f
is_num	dg_scripts.c	/^int is_num(char *num)$/;"	f
is_number	interpreter.c	/^int is_number(const char *str)$/;"	f
is_ok	shop.c	/^int is_ok(struct char_data * keeper, struct char_data * ch, int shop_nr)$/;"	f
is_ok_char	shop.c	/^int is_ok_char(struct char_data * keeper, struct char_data * ch, int shop_nr)$/;"	f
is_open	shop.c	/^int is_open(struct char_data * keeper, int shop_nr, int msg)$/;"	f
is_player_bountied	act.informative.c	/^bool is_player_bountied(struct char_data *ch)$/;"	f
is_quest_participant	quest.c	/^struct quest_score_data *is_quest_participant(struct char_data *ch, $/;"	f
is_room_burgled	act.offensive.c	/^long is_room_burgled(int nRoom)$/;"	f
is_room_burgled	act.offensive.c	/^long is_room_burgled(long lRoom)$/;"	f
is_social	act.informative.c	/^  byte is_social;$/;"	m	struct:sort_struct	file:
is_substring	dg_triggers.c	/^int is_substring(char *sub, char *string)$/;"	f
is_tell_ok	act.comm.c	/^int is_tell_ok(struct char_data *ch, struct char_data *vict)$/;"	f
is_trash	castle.c	/^int is_trash(struct obj_data * i)$/;"	f
is_valid_char	utils.c	/^struct char_data *is_valid_char(struct char_data *ch)$/;"	f
is_wearing	utils.c	/^int is_wearing(struct char_data *ch, int item_type)$/;"	f
isascii	sysdep.h	279;"	d
isbanned	ban.c	/^int isbanned(char *hostname)$/;"	f
isipbanned	ban.c	/^int isipbanned(struct in_addr in, const int nameserver_is_slow) $/;"	f
island_blast	spec_procs.c	/^void island_blast(struct char_data *vict, char btype)$/;"	f
isname	handler.c	/^int isname(const char *str, const char *namelist)$/;"	f
isnum	colour.c	/^int isnum(char s)$/;"	f
itemNumber	corpses.h	/^    obj_vnum itemNumber;     $/;"	m	class:Contain
item_number	structs.h	/^   obj_vnum item_number;	\/* Where in data-base			*\/$/;"	m	struct:obj_data
item_number	structs.h	/^   obj_vnum item_number;$/;"	m	struct:obj_file_elem
item_type	oasis.h	/^  int item_type;$/;"	m	struct:oasis_olc_data
item_types	constants.c	/^const char *item_types[] =$/;"	v
itemhunt_data	quest.h	/^struct itemhunt_data$/;"	s
itemrnum	quest.h	/^  obj_rnum itemrnum;$/;"	m	struct:itemhunt_data
itemvnum	quest.h	/^  obj_vnum itemvnum;$/;"	m	struct:itemhunt_data
janitor	spec_assign.c	/^  SPECIAL(janitor);$/;"	v
janitor	spec_procs.c	/^SPECIAL(janitor);$/;"	v
jerry	castle.c	/^SPECIAL(jerry);$/;"	v
jk_localtime	utils.c	/^int jk_localtime(struct tm *lt, long int t)$/;"	f
jk_localtime_now	utils.c	/^int jk_localtime_now(struct tm *lt)$/;"	f
john_in	act.wizard.c	/^void john_in(struct char_data *ch)$/;"	f
keeper	shop.h	/^   mob_rnum	 keeper;	\/* The mobile who owns the shop (rnum)	*\/$/;"	m	struct:shop_data
key	structs.h	/^   obj_vnum key;		\/* Key's number (-1 for no key)		*\/$/;"	m	struct:room_direction_data
keyword	db.h	/^   char	*keyword;$/;"	m	struct:help_index_element
keyword	structs.h	/^   char	*keyword;		\/* for open\/close			*\/$/;"	m	struct:room_direction_data
keyword	structs.h	/^   char	*keyword;                 \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
keywords	shop.h	/^   char *keywords;$/;"	m	struct:shop_buy_data
kill_data	structs.h	/^struct kill_data$/;"	s
killedbyimms	structs.h	/^	long killedbyimms;$/;"	m	struct:kill_data
killedbymobs	structs.h	/^	long killedbymobs;$/;"	m	struct:kill_data
killedbypcs	structs.h	/^	long killedbypcs;$/;"	m	struct:kill_data
kills	db.h	/^  long kills;$/;"	m	struct:imm_list_element
kills	structs.h	/^	struct kill_data kills; $/;"	m	struct:primal_extend_data
king_welmar	castle.c	/^SPECIAL(king_welmar);$/;"	v
lArea	structs.h	/^	long lArea;		\/\/ Area type (ie, ROOM_AREA_WAREHOUSE_RICH)$/;"	m	class:BurgledRoom
large_outbuf	structs.h	/^   struct txt_block *large_outbuf; \/* ptr to large buffer, if we need it *\/$/;"	m	struct:descriptor_data
lastUnsuccessfulHost	structs.h	/^        char lastUnsuccessfulHost[HOST_LENGTH+1];\/* host of last failed logon *\/$/;"	m	struct:primal_extend_data
lastUnsuccessfulLogon	structs.h	/^        time_t lastUnsuccessfulLogon;\/* Time (in secs) of last failed logon *\/$/;"	m	struct:primal_extend_data
last_colour_code	structs.h	/^   int last_colour_code;	\/* The last colour code			*\/$/;"	m	struct:player_special_data
last_direction	structs.h	/^   byte last_direction;     \/* The last direction the monster went     *\/$/;"	m	struct:mob_special_data
last_gossips	act.comm.c	/^GossipItem last_gossips[LAST_GOSSIPS_TO_SAVE];$/;"	v
last_input	structs.h	/^   char	last_input[MAX_INPUT_LENGTH]; \/* the last input			*\/$/;"	m	struct:descriptor_data
last_logon	structs.h	/^        time_t last_logon;		\/* Time (in secs) of last logon *\/$/;"	m	struct:primal_extend_data
last_olc_mode	structs.h	/^   int last_olc_mode;		\/* olc control				*\/$/;"	m	struct:player_special_data
last_olc_targ	structs.h	/^   void *last_olc_targ;		\/* olc control				*\/$/;"	m	struct:player_special_data
last_payment	house.h	/^   time_t last_payment;		\/* date of last house payment   *\/$/;"	m	struct:house_control_rec
last_room	structs.h	/^   room_rnum last_room;			 \/* Last Location. (for DT corpse)*\/$/;"	m	struct:char_data
last_tell	structs.h	/^   long last_tell;		\/* idnum of last tell from		*\/$/;"	m	struct:player_special_data
lastsort	shop.h	/^   int	 lastsort;		\/* How many items are sorted in inven?	*\/$/;"	m	struct:shop_data
lazy	spec_assign.c	/^  SPECIAL(lazy);$/;"	v
learn	structs.h	/^   byte learn;       \/* how many % a player learns a spell\/skill *\/$/;"	m	struct:int_app_type
len	shop.h	/^   int len;$/;"	m	struct:stack_data
length	modify.c	/^int length[] =$/;"	v
level	act.wizard.c	/^    const int level;$/;"	m	struct:set_struct	file:
level	boards.h	/^   int	level;        \/* level of poster *\/$/;"	m	struct:board_msginfo
level	clan.h	/^  ubyte level;                          \/* Clan Level....?        *\/$/;"	m	struct:clan_rec
level	structs.h	/^    int level;$/;"	m	class:ObjProductClass
level	structs.h	/^   int level;          \/* Minimum level of object.             *\/$/;"	m	struct:obj_flag_data
level	structs.h	/^   ubyte level;         \/* PC \/ NPC's level                     *\/$/;"	m	struct:char_player_data
level	structs.h	/^   ubyte level;$/;"	m	struct:char_file_u
level	structs.h	/^  int level;$/;"	m	struct:user_data
level_bits	constants.c	/^const char *level_bits[] =$/;"	v
level_can_shout	config.c	/^int level_can_shout = 1;$/;"	v
level_exp	class.c	/^int level_exp(struct char_data *ch, int level)$/;"	f
level_flags	structs.h	/^   long		       level_flags;    \/* Level restrictive flags      *\/ $/;"	m	struct:obj_flag_data
level_restriction	db.h	/^   int level_restriction; \/\/ DM - currently only used for wizhelp$/;"	m	struct:help_index_element
levelrank_abbrev	act.informative.c	/^char *levelrank_abbrev(int level)$/;"	f
levelrank_colour	act.informative.c	/^char *levelrank_colour(struct char_data *ch, int targlevel, int colourlevel)$/;"	f
lifespan	db.h	/^   int	lifespan;           \/* how long between resets (minutes)  *\/$/;"	m	struct:zone_data
light	structs.h	/^   byte light;                  \/* Number of lightsources in room     *\/$/;"	m	struct:room_data
line	db.h	/^   int line;		\/* line number this command appears on  *\/$/;"	m	struct:reset_com
list	structs.h	/^        struct game_item list[MAX_GAME_BETS];   \/\/ List of bets$/;"	m	struct:game_data
list	structs.h	/^        struct game_item list[MAX_GAME_BETS];   \/\/ Player list$/;"	m	struct:blackjack_data
list	structs.h	/^  struct event_data *list;	\/\/ Pointer to first event$/;"	m	struct:event_list
listReports	reports.cpp	/^ReportList::listReports(struct descriptor_data *d, int mode, char *arg)$/;"	f	class:ReportList
list_ability_upgrades_to_char	act.other.c	/^void list_ability_upgrades_to_char(struct char_data *ch, char newclass)$/;"	f
list_all_shops	shop.c	/^void list_all_shops(struct char_data * ch)$/;"	f
list_char_to_char	act.informative.c	/^void list_char_to_char(struct char_data * list, struct char_data * ch)$/;"	f
list_detailed_shop	shop.c	/^void list_detailed_shop(struct char_data * ch, int shop_nr)$/;"	f
list_events_to_char	act.wizard.c	/^void list_events_to_char(struct char_data *ch, int specific) $/;"	f
list_fighters_to_char	spell_parser.c	/^void list_fighters_to_char(struct char_data *ch, int skillnum)$/;"	f
list_mobiles	db.c	/^int list_mobiles(struct char_data *ch, zone_vnum vznum, int type) {$/;"	f
list_obj_to_char	act.informative.c	/^void list_obj_to_char(struct obj_data * list, struct char_data * ch, int mode,$/;"	f
list_obj_to_char2	act.informative.c	/^void list_obj_to_char2(struct obj_data * list, struct char_data * ch, int mode,$/;"	f
list_object	shop.c	/^char *list_object(struct obj_data * obj, int cnt, int index, int shop_nr)$/;"	f
list_objects	db.c	/^int list_objects(struct char_data *ch, zone_vnum vznum, int type) {$/;"	f
list_one_char	act.informative.c	/^void list_one_char(struct char_data * i, struct char_data * ch)$/;"	f
list_rider	act.informative.c	/^void list_rider(struct char_data *i, struct char_data *ch, int mode)$/;"	f
list_skills	spec_procs.c	/^void list_skills(struct char_data * ch)$/;"	f
list_start	mail.h	/^   position_list_type *list_start;	\/* list of mail positions	*\/$/;"	m	struct:mail_index_type_d
list_top	act.social.c	/^static int list_top = -1;$/;"	v	file:
load	corpses.cpp	/^int CorpseData::load() {$/;"	f	class:CorpseData
loadFile	reports.cpp	/^void ReportList::loadFile()$/;"	f	class:ReportList
loadRevision	db.c	/^void loadRevision() {$/;"	f
load_banned	ban.c	/^void load_banned(void)$/;"	f
load_char	db.c	/^int load_char(char *name, struct char_file_u * char_element)$/;"	f
load_help	db.c	/^void load_help(FILE *fl, int wizflag)$/;"	f
load_hints	db.c	/^void load_hints()$/;"	f
load_into_inventory	config.c	/^char load_into_inventory = YES;$/;"	v
load_messages	fight.c	/^void load_messages(void)$/;"	f
load_mtrigger	dg_triggers.c	/^void load_mtrigger(char_data *ch)$/;"	f
load_otrigger	dg_triggers.c	/^void load_otrigger(obj_data *obj)$/;"	f
load_primal_spell_levels	db.c	/^int load_primal_spell_levels()$/;"	f
load_room	structs.h	/^   room_vnum load_room;		\/* Which room to place char in		*\/$/;"	m	struct:player_special_data_saved
load_zone_hints	db.c	/^void load_zone_hints(FILE *fl, zone_rnum rzone) {$/;"	f
load_zones	db.c	/^void load_zones(FILE * fl, char *zonename)$/;"	f
location	structs.h	/^   byte location;        \/* Tells which ability to change(APPLY_XXX)*\/$/;"	m	struct:affected_type
location	structs.h	/^   byte location;      \/* Which ability to change (APPLY_XXX) *\/$/;"	m	struct:obj_affected_type
location	structs.h	/^   sh_int location;$/;"	m	struct:obj_file_elem
log	utils.h	21;"	d
log_death_trap	utils.c	/^void log_death_trap(struct char_data *ch, int dtype)$/;"	f
log_gossip	act.comm.c	/^void log_gossip(struct char_data *ch, char *gossip)$/;"	f
log_zone_error	db.c	/^void log_zone_error(zone_rnum zone, int cmd_no, const char *message)$/;"	f
logfile	comm.c	/^FILE *logfile = NULL;		\/* Where to send the log messages. *\/$/;"	v
login	structs.h	/^  time_t login;$/;"	m	struct:user_data
login_time	structs.h	/^   time_t login_time;		\/* when the person connected		*\/$/;"	m	struct:descriptor_data
logon	structs.h	/^   time_t logon;    \/* Time of the last logon (used to calculate played) *\/$/;"	m	struct:time_data
logout	structs.h	/^  time_t logout;$/;"	m	struct:user_data
logtypes	act.wizard.c	/^const char *logtypes[] = {$/;"	v
longDescription	reports.h	/^    char longDescription[REPORT_LONGDESC_LENGTH];  \/\/ Long desc about report$/;"	m	class:Report
longDescription	reports.h	/^  char longDescription[REPORT_LONGDESC_LENGTH];    \/\/ Long desc about report$/;"	m	struct:report_file_elem
long_descr	structs.h	/^   char	*long_descr;   \/* for 'look'			       *\/$/;"	m	struct:char_player_data
look_at_char	act.informative.c	/^void look_at_char(struct char_data * i, struct char_data * ch)$/;"	f
look_at_room	act.informative.c	/^void look_at_room(struct char_data * ch, int ignore_brief)$/;"	f
look_at_target	act.informative.c	/^void look_at_target(struct char_data *ch, char *arg, $/;"	f
look_in_direction	act.informative.c	/^void look_in_direction(struct char_data * ch, int dir)$/;"	f
look_in_obj	act.informative.c	/^void look_in_obj(struct char_data * ch, char *arg)$/;"	f
loops	dg_scripts.h	/^    int loops;                         \/* loop iteration counter          *\/$/;"	m	struct:trig_data
lowlevel	quest.h	/^  int lowlevel;$/;"	m	struct:itemhunt_data
m	random.c	45;"	d	file:
mag_affects	magic.c	/^void mag_affects(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mag_alter_objs	magic.c	/^void mag_alter_objs(int level, struct char_data * ch, struct obj_data * obj,$/;"	f
mag_areas	magic.c	/^void mag_areas(int level, struct char_data * ch, int spellnum, int savetype)$/;"	f
mag_assign_spells	spell_parser.c	/^void mag_assign_spells(void)$/;"	f
mag_creations	magic.c	/^void mag_creations(int level, struct char_data * ch, int spellnum)$/;"	f
mag_damage	magic.c	/^int mag_damage(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mag_groups	magic.c	/^void mag_groups(int level, struct char_data * ch, int spellnum, int savetype)$/;"	f
mag_manacost	spell_parser.c	/^int mag_manacost(struct char_data * ch, int spellnum)$/;"	f
mag_masses	magic.c	/^void mag_masses(int level, struct char_data * ch, int spellnum, int savetype)$/;"	f
mag_materials	magic.c	/^int mag_materials(struct char_data * ch, int item0, int item1, int item2,$/;"	f
mag_objectmagic	spell_parser.c	/^void mag_objectmagic(struct char_data * ch, struct obj_data * obj,$/;"	f
mag_points	magic.c	/^void mag_points(int level, struct char_data * ch, struct char_data * victim,$/;"	f
mag_savingthrow	magic.c	/^int mag_savingthrow(struct char_data * ch, int type, int modifier)$/;"	f
mag_summon_fail_msgs	magic.c	/^const char *mag_summon_fail_msgs[] = {$/;"	v
mag_summon_msgs	magic.c	/^const char *mag_summon_msgs[] = {$/;"	v
mag_summons	magic.c	/^void mag_summons(int level, struct char_data * ch, struct obj_data * obj,$/;"	f
mag_unaffects	magic.c	/^void mag_unaffects(int level, struct char_data * ch, struct char_data * victim,$/;"	f
magic_user	spec_assign.c	/^  SPECIAL(magic_user);$/;"	v
magic_user	spec_procs.c	/^SPECIAL(magic_user);$/;"	v
mailChanges	reports.cpp	/^Report::mailChanges() {$/;"	f	class:Report
mail_index	mail.c	/^mail_index_type *mail_index = NULL;	\/* list of recs in the mail file  *\/$/;"	v
mail_index_type	mail.h	/^typedef struct mail_index_type_d mail_index_type;$/;"	t
mail_index_type_d	mail.h	/^struct mail_index_type_d {$/;"	s
mail_time	mail.h	/^   time_t mail_time;		\/* when was the letter mailed?		*\/$/;"	m	struct:header_data_type
mail_to	structs.h	/^   long	mail_to;		\/* name for mail system			*\/$/;"	m	struct:descriptor_data
main	comm.c	/^int main(int argc, char **argv)$/;"	f
major	structs.h	/^    short major;$/;"	m	class:ReleaseInfo
make_corpse	fight.c	/^struct obj_data *make_corpse(struct char_data * ch)$/;"	f
make_prompt	comm.c	/^char *make_prompt(struct descriptor_data *d)$/;"	f
make_titan_corpse	spec_procs.c	/^void make_titan_corpse(struct char_data *ch)$/;"	f
makeuid_var	dg_scripts.c	/^void makeuid_var(void *go, struct script_data *sc, trig_data *trig,$/;"	f
mana	structs.h	/^   \/*sh_int*\/int mana;$/;"	m	struct:char_point_data
mana_change	spells.h	/^   int mana_change[NUM_CLASSES]; \/* Change in mana used by spell from lev to lev *\/$/;"	m	struct:spell_info_type
mana_gain	limits.c	/^int mana_gain(struct char_data *ch)$/;"	f
mana_max	spells.h	/^   int mana_max[NUM_CLASSES]; \/* Max amount of mana used by a spell (lowest lev) *\/$/;"	m	struct:spell_info_type
mana_min	spells.h	/^   int mana_min[NUM_CLASSES]; \/* Min amount of mana used by a spell (highest lev) *\/$/;"	m	struct:spell_info_type
mana_perc	spells.h	/^   sh_int mana_perc[NUM_CLASSES];	\/* percentage of mana min\/max *\/$/;"	m	struct:spell_info_type
marbles	spec_assign.c	/^  SPECIAL(marbles);$/;"	v
mark_colour_code	structs.h	/^   int mark_colour_code;	\/* The last marked colour code		*\/$/;"	m	struct:player_special_data
master	structs.h	/^   struct char_data *master;             \/* Who is char following?        *\/$/;"	m	struct:char_data
matching_paren	dg_scripts.c	/^char *matching_paren(char *p)$/;"	f
matching_quote	dg_scripts.c	/^char *matching_quote(char *p)$/;"	f
materials	structs.h	/^   list<ObjMaterialClass> *materials; \/* list of materials\/objs that are required to make this object *\/$/;"	m	struct:obj_data
maxUsersOnline	structs.h	/^    int maxUsersOnline;$/;"	m	class:GameInfo
maxUsersOnlinePeriod	structs.h	/^    int maxUsersOnlinePeriod;$/;"	m	class:GameInfo
max_bad_pws	config.c	/^int max_bad_pws = 3;$/;"	v
max_damage	corpses.h	/^    sh_int max_damage;       $/;"	m	class:Corpse
max_damage	structs.h	/^   sh_int max_damage;		  \/* Max durability of item	      *\/ $/;"	m	struct:obj_data
max_exp_gain	config.c	/^int max_exp_gain = 10000000;	\/* max gainable per kill *\/$/;"	v
max_exp_loss	config.c	/^int max_exp_loss = 500000;	\/* max losable per death *\/$/;"	v
max_filesize	config.c	/^int max_filesize = 50000;$/;"	v
max_hit	structs.h	/^   \/*sh_int*\/int max_hit;      \/* Max hit for PC\/NPC                      *\/$/;"	m	struct:char_point_data
max_id	db.c	/^long max_id = MOBOBJ_ID_BASE;   \/* for unique mob\/obj id's       *\/$/;"	v
max_mana	structs.h	/^   \/*sh_int*\/int max_mana;     \/* Max mana for PC\/NPC			   *\/$/;"	m	struct:char_point_data
max_move	structs.h	/^   \/*sh_int*\/int max_move;     \/* Max move for PC\/NPC                     *\/$/;"	m	struct:char_point_data
max_npc_corpse_time	config.c	/^int max_npc_corpse_time = 5;$/;"	v
max_number	structs.h	/^  byte max_number;$/;"	m	struct:quest_obj_data
max_obj_save	config.c	/^int max_obj_save = 100;$/;"	v
max_pc_corpse_time	config.c	/^int max_pc_corpse_time = 20;$/;"	v
max_players	comm.c	/^int max_players = 0;		\/* max descriptors available *\/$/;"	v
max_playing	config.c	/^int max_playing = 300;$/;"	v
max_stat_value	utils.c	/^int max_stat_value(struct char_data *ch, int stat)$/;"	f
max_str	structs.h	/^   size_t max_str;             \/* maximum size of string in modify-str *\/$/;"	m	struct:descriptor_data
max_uses	structs.h	/^  sh_int max_uses;$/;"	m	struct:timer_type
mayor	spec_procs.c	/^SPECIAL(mayor);$/;"	v
maze	spec_assign.c	/^  SPECIAL(maze);$/;"	v
medit_change_mprog	medit.c	/^void medit_change_mprog(struct descriptor_data *d)$/;"	f
medit_disp_aff_flags	medit.c	/^void medit_disp_aff_flags(struct descriptor_data *d)$/;"	f
medit_disp_attack_types	medit.c	/^void medit_disp_attack_types(struct descriptor_data *d)$/;"	f
medit_disp_classes	medit.c	/^void medit_disp_classes(struct descriptor_data *d)$/;"	f
medit_disp_menu	medit.c	/^void medit_disp_menu(struct descriptor_data *d)$/;"	f
medit_disp_mob_flags	medit.c	/^void medit_disp_mob_flags(struct descriptor_data *d)$/;"	f
medit_disp_mprog	medit.c	/^void medit_disp_mprog(struct descriptor_data *d)$/;"	f
medit_disp_mprog_types	medit.c	/^void medit_disp_mprog_types(struct descriptor_data *d)$/;"	f
medit_disp_positions	medit.c	/^void medit_disp_positions(struct descriptor_data *d)$/;"	f
medit_disp_sex	medit.c	/^void medit_disp_sex(struct descriptor_data *d)$/;"	f
medit_get_mprog_type	medit.c	/^const char *medit_get_mprog_type(struct mob_prog_data *mprog)$/;"	f
medit_parse	medit.c	/^void medit_parse(struct descriptor_data *d, char *arg)$/;"	f
medit_save_internally	medit.c	/^void medit_save_internally(struct descriptor_data *d)$/;"	f
medit_save_to_disk	medit.c	/^void medit_save_to_disk(zone_vnum foo)$/;"	f
medit_setup_existing	medit.c	/^void medit_setup_existing(struct descriptor_data *d, int rmob_num)$/;"	f
medit_setup_new	medit.c	/^void medit_setup_new(struct descriptor_data *d)$/;"	f
medit_string_cleanup	medit.c	/^void medit_string_cleanup(struct descriptor_data *d, int terminator)$/;"	f
member_of_royal_guard	castle.c	/^int member_of_royal_guard(struct char_data * chChar)$/;"	f
member_of_staff	castle.c	/^int member_of_staff(struct char_data * chChar)$/;"	f
members	clan.h	/^  int members;                          \/* Clan Member Count      *\/$/;"	m	struct:clan_rec
memory	structs.h	/^   memory_rec *memory;	    \/* List of attackers to remember	       *\/$/;"	m	struct:mob_special_data
memory	structs.h	/^   struct script_memory *memory;       \/* for mob memory triggers         *\/$/;"	m	struct:char_data
memoryAddress	corpses.h	/^    int memoryAddress;$/;"	m	class:Corpse
memoryEqual	corpses.h	/^    bool memoryEqual(struct obj_data *corpse) { $/;"	f	class:Corpse
memory_rec	structs.h	/^typedef struct memory_rec_struct memory_rec;$/;"	t
memory_rec_struct	structs.h	/^struct memory_rec_struct$/;"	s
message	genolc.c	/^  const char *message;$/;"	m	file:
message_buy	shop.h	/^   char	*message_buy;		\/* Message when player buys item	*\/$/;"	m	struct:shop_data
message_len	boards.h	/^   int	message_len;  \/* size of message text (for file write) *\/$/;"	m	struct:board_msginfo
message_list	structs.h	/^struct message_list$/;"	s
message_sell	shop.h	/^   char	*message_sell;		\/* Message when player sells item	*\/$/;"	m	struct:shop_data
message_type	structs.h	/^struct message_type$/;"	s
min_level	spells.h	/^   int min_level[NUM_CLASSES];$/;"	m	struct:spell_info_type
min_position	spells.h	/^   byte min_position;	\/* Position for caster	 *\/$/;"	m	struct:spell_info_type
min_rent_cost	config.c	/^int min_rent_cost = 0;$/;"	v
min_victim_position	act.social.c	/^  int min_victim_position;	\/* Position of victim *\/$/;"	m	struct:social_messg	file:
min_wizlist_lev	config.c	/^int min_wizlist_lev = LVL_GOD;$/;"	v
mini_mud	db.c	/^int mini_mud = 0;		\/* mini-mud mode?		 *\/$/;"	v
minimum_level	interpreter.h	/^   sh_int minimum_level;$/;"	m	struct:command_info
minimum_position	interpreter.h	/^   byte minimum_position;$/;"	m	struct:command_info
minor	structs.h	/^    short minor;$/;"	m	class:ReleaseInfo
misc_specials	structs.h	/^	long misc_specials;	\/* Bitvector representation of misc. specials *\/$/;"	m	struct:primal_extend_data
miss_att	structs.h	/^   sh_int miss_att;$/;"	m	struct:dex_app_type
miss_msg	structs.h	/^   struct msg_type miss_msg;	\/* messages when miss			*\/$/;"	m	struct:message_type
missing_cash1	shop.h	/^   char	*missing_cash1;		\/* Message if keeper hasn't got cash	*\/$/;"	m	struct:shop_data
missing_cash2	shop.h	/^   char	*missing_cash2;		\/* Message if player hasn't got cash	*\/$/;"	m	struct:shop_data
mob	act.build.c	/^  struct char_data *mob;\/*PC mob edit buffer		*\/$/;"	m	struct:obuild_olc_data	file:
mob	oasis.h	/^  struct char_data *mob;$/;"	m	struct:oasis_olc_data
mob_allow	act.build.c	/^int mob_allow = TRUE;$/;"	v
mob_attr	balance.c	/^int mob_attr(struct char_data *mob, long attribute)$/;"	f
mob_bits	balance.c	/^const char *mob_bits[NUM_MOB_ATTRIBUTES + 1] = {$/;"	v
mob_index	db.c	/^struct index_data *mob_index;	\/* index table for mobile file	 *\/$/;"	v
mob_levels	balance.c	/^int *mob_levels;$/;"	v
mob_log	dg_mobcmd.c	/^void mob_log(char_data *mob, char *msg)$/;"	f
mob_prog_act_list	structs.h	/^struct mob_prog_act_list$/;"	s
mob_prog_data	structs.h	/^struct mob_prog_data$/;"	s
mob_proto	db.c	/^struct char_data *mob_proto;	\/* prototypes for mobs		 *\/$/;"	v
mob_rnum	structs.h	/^typedef sh_int	mob_rnum;	\/* A mobile's real (internal) num type *\/$/;"	t
mob_special_data	structs.h	/^struct mob_special_data$/;"	s
mob_specials	structs.h	/^   struct mob_special_data mob_specials;	\/* NPC specials		  *\/$/;"	m	struct:char_data
mob_vnum	structs.h	/^typedef sh_int mob_vnum;       	\/* A mob's vnum type.           *\/$/;"	t
mobile_activity	mobact.c	/^void mobile_activity(void)$/;"	f
mobkills	structs.h	/^	long mobkills;$/;"	m	struct:kill_data
mobprog_types	constants.c	/^const char *mobprog_types[] =$/;"	v
mobprogs	structs.h	/^   MPROG_DATA *mobprogs; \/* programs for MOBProg              *\/$/;"	m	struct:index_data
mobsloaded	quest.h	/^  int mobsloaded;$/;"	m	struct:itemhunt_data
mode	house.h	/^   int mode;			\/* mode of ownership		*\/$/;"	m	struct:house_control_rec
mode	oasis.h	/^  int mode;$/;"	m	struct:oasis_olc_data
mode	reports.h	/^    int mode;                   \/\/ Report adding\/editing modes idea\/report \/typo\/todo$/;"	m	class:Report
modified	reports.h	/^    int modified;               \/\/ Report adding\/editing modified flag$/;"	m	class:Report
modifier	structs.h	/^   float modifier;$/;"	m	struct:char_special_data
modifier	structs.h	/^   sbyte modifier;       \/* This is added to apropriate ability     *\/$/;"	m	struct:affected_type
modifier	structs.h	/^   sbyte modifier;     \/* How much it changes by              *\/$/;"	m	struct:obj_affected_type
modify_string	genshp.c	/^void modify_string(char **str, char *new_s)$/;"	f
money_desc	handler.c	/^char *money_desc(int amount)$/;"	f
month	structs.h	/^   int hours, day, month;$/;"	m	struct:time_info_data
month_name	constants.c	/^const char *month_name[] =$/;"	v
moon	structs.h	/^   int moon;		\/* Moon state for were creatures *\/$/;"	m	struct:weather_data
moon_mesg	constants.c	/^const char *moon_mesg[] =$/;"	v
mortal_detectcurses	act.informative.c	/^void mortal_detectcurses(struct char_data *ch)$/;"	f
mortal_start_room	config.c	/^room_vnum mortal_start_room = 1115;$/;"	v
mortal_stat	act.informative.c	/^void mortal_stat(struct char_data *ch, char *arg)$/;"	f
motd	db.c	/^char *motd = NULL;		\/* message of the day - mortals *\/$/;"	v
mounting	structs.h	/^   struct char_data *mounting;$/;"	m	struct:char_special_data
mounting_obj	structs.h	/^   struct obj_data *mounting_obj; \/\/ DM - TODO - check with tali char_data ...$/;"	m	struct:char_special_data
move	structs.h	/^   \/*sh_int*\/int move;$/;"	m	struct:char_point_data
move_arm_away	spec_procs.c	/^void move_arm_away(int room)$/;"	f
move_bus	act.item.c	/^void move_bus(void)$/;"	f
move_falcon	act.item.c	/^void move_falcon(void)$/;"	f
move_gain	limits.c	/^int move_gain(struct char_data *ch)$/;"	f
move_ship	act.item.c	/^void move_ship(void)$/;"	f
movement_loss	constants.c	/^int movement_loss[] =$/;"	v
mpact	structs.h	/^   MPROG_ACT_LIST *mpact;$/;"	m	struct:char_data
mprog	oasis.h	/^  struct mob_prog_data *mprog;$/;"	m	struct:oasis_olc_data
mprogl	oasis.h	/^  struct mob_prog_data *mprogl;$/;"	m	struct:oasis_olc_data
msg	structs.h	/^   struct message_type *msg;	\/* List of messages.			*\/$/;"	m	struct:message_list
msg_index	boards.c	/^struct board_msginfo msg_index[NUM_OF_BOARDS][MAX_BOARD_MESSAGES];$/;"	v
msg_storage	boards.c	/^char *msg_storage[INDEX_SIZE];$/;"	v
msg_storage_taken	boards.c	/^int msg_storage_taken[INDEX_SIZE];$/;"	v
msg_type	structs.h	/^struct msg_type$/;"	s
mud_time_passed	utils.c	/^struct time_info_data *mud_time_passed(time_t t2, time_t t1)$/;"	f
mudlog	utils.c	/^void mudlog(const char *str, int type, int level, int file)$/;"	f
my_signal	comm.c	/^sigfunc *my_signal(int signo, sigfunc * func)$/;"	f
my_signal	comm.c	2540;"	d	file:
nInvisLevel	structs.h	/^	int nInvisLevel;	\/\/ Level gossiper was invis$/;"	m	class:GossipItem
nInvisSingle	structs.h	/^	int nInvisSingle;		\/\/ Id gossiper was invis to$/;"	m	class:GossipItem
nInvisSpecific	structs.h	/^	int nInvisSpecific;	\/\/ Specific level of invis of gossiper$/;"	m	class:GossipItem
name	clan.h	/^  char name[32];			\/* Clan Name              *\/$/;"	m	struct:clan_rec
name	corpses.h	/^    char *name;$/;"	m	class:Corpse
name	db.h	/^   char	*name;		    \/* name of this zone                  *\/$/;"	m	struct:zone_data
name	db.h	/^   char	*name;$/;"	m	struct:player_index_element
name	db.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:ban_list_element
name	db.h	/^  char *name;$/;"	m	struct:imm_list_element
name	db.h	/^  char *name;$/;"	m	struct:questlist_element
name	dg_scripts.h	/^    char *name;                                \/* name of trigger                 *\/$/;"	m	struct:trig_data
name	dg_scripts.h	/^  char *name;                          \/* name of variable  *\/$/;"	m	struct:trig_var_data
name	quest.h	/^  char name[MAX_NAME_LENGTH+1];$/;"	m	struct:quest_score_data
name	spells.h	/^   const char *name;$/;"	m	struct:spell_info_type
name	structs.h	/^   char	*name;	       \/* PC \/ NPC s name (kill ...  )         *\/$/;"	m	struct:char_player_data
name	structs.h	/^   char	*name;                    \/* Title of object :get etc.        *\/$/;"	m	struct:obj_data
name	structs.h	/^   char	*name;                  \/* Rooms name 'You are ...'           *\/$/;"	m	struct:room_data
name	structs.h	/^   char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:char_file_u
name	structs.h	/^  char name[MAX_NAME_LENGTH + 1];$/;"	m	struct:user_data
nameserver_is_slow	config.c	/^char nameserver_is_slow = YES;$/;"	v
nanny	interpreter.c	/^void nanny(struct descriptor_data *d, char *arg)$/;"	f
narg	dg_scripts.h	/^    int narg;                          \/* numerical argument              *\/$/;"	m	struct:trig_data
net_cost_per_diem	structs.h	/^   int	net_cost_per_diem;$/;"	m	struct:rent_info
new_command	genzon.c	/^int new_command(struct zone_data *zone, int pos)$/;"	f
new_descriptor	comm.c	/^int new_descriptor(socket_t s)$/;"	f
new_mobs	act.build.c	/^int new_mobs;$/;"	v
new_objects	act.build.c	/^int new_objects;$/;"	v
new_rooms	act.build.c	/^int new_rooms;$/;"	v
new_zones	act.build.c	/^int new_zones;$/;"	v
newbie_equip	class.c	/^void newbie_equip(struct char_data * ch)$/;"	f
news	db.c	/^char *news = NULL;		\/* mud news			 *\/$/;"	v
news	spell_parser.c	/^  const char *news;$/;"	m	struct:syllable	file:
next	db.h	/^   struct ban_list_element *next;$/;"	m	struct:ban_list_element
next	db.h	/^   struct reset_q_element *next;$/;"	m	struct:reset_q_element
next	db.h	/^  struct imm_list_element *next;$/;"	m	struct:imm_list_element
next	db.h	/^  struct questlist_element *next;$/;"	m	struct:questlist_element
next	dg_event.h	/^  struct event_info *next;  $/;"	m	struct:event_info
next	dg_scripts.h	/^    struct trig_data *next;  $/;"	m	struct:trig_data
next	dg_scripts.h	/^  struct cmdlist_element *next;$/;"	m	struct:cmdlist_element
next	dg_scripts.h	/^  struct script_data *next;            \/* used for purged_scripts    *\/$/;"	m	struct:script_data
next	dg_scripts.h	/^  struct script_memory *next;$/;"	m	struct:script_memory
next	dg_scripts.h	/^  struct trig_var_data *next;$/;"	m	struct:trig_var_data
next	genolc.h	/^  struct save_list_data *next;$/;"	m	struct:save_list_data
next	graph.c	/^  struct bfs_queue_struct *next;$/;"	m	struct:bfs_queue_struct	file:
next	interpreter.h	/^  struct alias_data *next;$/;"	m	struct:alias_data
next	mail.h	/^   struct mail_index_type_d *next;	\/* link to next one		*\/$/;"	m	struct:mail_index_type_d
next	mail.h	/^   struct position_list_type_d *next;$/;"	m	struct:position_list_type_d
next	quest.h	/^  struct quest_score_data *next;$/;"	m	struct:quest_score_data
next	quest.h	/^  struct trivia_response_data *next;$/;"	m	struct:trivia_response_data
next	structs.h	/^  	Burglary *next;$/;"	m	class:Burglary
next	structs.h	/^   struct affected_type *next;$/;"	m	struct:affected_type
next	structs.h	/^   struct char_data *next;             \/* For either monster or ppl-list  *\/$/;"	m	struct:char_data
next	structs.h	/^   struct descriptor_data *next; \/* link to next descriptor		*\/$/;"	m	struct:descriptor_data
next	structs.h	/^   struct extra_descr_data *next; \/* Next in list                     *\/$/;"	m	struct:extra_descr_data
next	structs.h	/^   struct follow_type *next;$/;"	m	struct:follow_type
next	structs.h	/^   struct memory_rec_struct *next;$/;"	m	struct:memory_rec_struct
next	structs.h	/^   struct message_type *next;	\/* to next messages of this kind.	*\/$/;"	m	struct:message_type
next	structs.h	/^   struct obj_data *next;         \/* For the object list              *\/$/;"	m	struct:obj_data
next	structs.h	/^   struct txt_block *next;$/;"	m	struct:txt_block
next	structs.h	/^  struct assisters_type *next;$/;"	m	struct:assisters_type
next	structs.h	/^  struct auc_data *next;$/;"	m	struct:auc_data
next	structs.h	/^  struct event_data *next;		\/\/ Pointer to next event$/;"	m	struct:event_data
next	structs.h	/^  struct hunt_data *next;$/;"	m	struct:hunt_data
next	structs.h	/^  struct mob_prog_act_list *next;$/;"	m	struct:mob_prog_act_list
next	structs.h	/^  struct mob_prog_data *next;$/;"	m	struct:mob_prog_data
next	structs.h	/^  struct timer_type *next;$/;"	m	struct:timer_type
next	structs.h	/^  struct trig_proto_list *next;         \/* next trigger          *\/$/;"	m	struct:trig_proto_list
next	structs.h	/^  struct user_data *next;$/;"	m	struct:user_data
next_block	mail.h	/^   long	next_block;		\/* if header block, link to next block	*\/$/;"	m	struct:header_data_type
next_combat_list	fight.c	/^struct char_data *next_combat_list = NULL;$/;"	v
next_content	structs.h	/^   struct obj_data *next_content; \/* For 'contains' lists             *\/$/;"	m	struct:obj_data
next_fighting	structs.h	/^   struct char_data *next_fighting;    \/* For fighting list               *\/$/;"	m	struct:char_data
next_in_room	structs.h	/^   struct char_data *next_in_room;     \/* For room->people - list         *\/$/;"	m	struct:char_data
next_in_world	dg_scripts.h	/^    struct trig_data *next_in_world;    \/* next in the global trigger list *\/$/;"	m	struct:trig_data
next_page	modify.c	/^char *next_page(char *str, int page_width, int page_length)$/;"	f
nitems	structs.h	/^   int	nitems;$/;"	m	struct:rent_info
no_mail	db.c	/^int no_mail = 0;		\/* mail disabled?		 *\/$/;"	v
no_rent_check	db.c	/^int no_rent_check = 0;		\/* skip rent check on boot?	 *\/$/;"	v
no_specials	comm.c	/^int no_specials = 0;		\/* Suppress ass. of special routines *\/$/;"	v
no_such_item1	shop.h	/^   char	*no_such_item1;		\/* Message if keeper hasn't got an item	*\/$/;"	m	struct:shop_data
no_such_item2	shop.h	/^   char	*no_such_item2;		\/* Message if player hasn't got an item	*\/$/;"	m	struct:shop_data
nohnts	db.h	/^   int nohnts;		\/\/ Number of hints in this zone$/;"	m	struct:zone_data
nomobs	db.h	/^   int nomobs;          \/\/ Number of mobiles in this zone $/;"	m	struct:zone_data
nonblock	comm.c	/^void nonblock(socket_t s)$/;"	f
noobjs	db.h	/^   int noobjs;          \/\/ Number of objs in this zone$/;"	m	struct:zone_data
noshps	db.h	/^   int noshps;          \/\/ Number of shops in this zone$/;"	m	struct:zone_data
not_found	act.social.c	/^  char *not_found;$/;"	m	struct:social_messg	file:
notify	reports.cpp	/^ReportList::notify(int number) {$/;"	f	class:ReportList
notrgs	db.h	/^   int notrgs;          \/\/ Number of triggers in this zone$/;"	m	struct:zone_data
nowlds	db.h	/^   int nowlds;          \/\/ Number or rooms in this zone$/;"	m	struct:zone_data
npc_class_types	constants.c	/^const char *npc_class_types[] =$/;"	v
npc_steal	spec_procs.c	/^void npc_steal(struct char_data * ch, struct char_data * victim)$/;"	f
nr	dg_scripts.h	/^    sh_int nr;                         \/* trigger's rnum                  *\/$/;"	m	struct:trig_data
nr	structs.h	/^   mob_rnum nr;                          \/* Mob's rnum			  *\/$/;"	m	struct:char_data
nrm	oasis.c	/^const char *nrm, *grn, *cyn, *yel;$/;"	v
null_time	comm.c	/^struct timeval null_time;	\/* zero-valued time structure *\/$/;"	v
numInContainer	act.other.c	/^int numInContainer(struct obj_data *aCont, int vnum) {$/;"	f
num_attacks	utils.c	/^int num_attacks(struct char_data *ch)$/;"	f
num_events	structs.h	/^  int num_events;		\/\/ Number in list$/;"	m	struct:event_list
num_hints	db.c	/^int num_hints = 0;$/;"	v
num_invalid	ban.c	/^int num_invalid = 0;$/;"	v
num_of_clans	clan.c	/^int num_of_clans;$/;"	v
num_of_cmds	act.informative.c	/^int num_of_cmds;$/;"	v
num_of_guests	house.h	/^   int num_of_guests;		\/* how many guests for house	*\/$/;"	m	struct:house_control_rec
num_of_houses	house.c	/^int num_of_houses = 0;$/;"	v
num_of_msgs	boards.c	/^int num_of_msgs[NUM_OF_BOARDS];$/;"	v
num_pc_in_room	utils.c	/^int num_pc_in_room(struct room_data *room)$/;"	f
num_rooms_burgled	db.c	/^int num_rooms_burgled = 0;	\/* number of burgled rooms, duh  *\/$/;"	v
number	db.h	/^   zone_vnum number;	    \/* virtual number of this zone	  *\/$/;"	m	struct:zone_data
number	oasis.h	/^  int number;$/;"	m	struct:oasis_olc_data
number	structs.h	/^    int number;$/;"	m	class:ObjMaterialClass
number	structs.h	/^   int	number;		\/* number of existing units of this mob\/obj	*\/$/;"	m	struct:index_data
number	structs.h	/^   room_vnum number;		\/* Rooms number	(vnum)		      *\/$/;"	m	struct:room_data
number	structs.h	/^  int number;$/;"	m	struct:user_data
number	utils.c	/^int number(int from, int to)$/;"	f
number_of_attacks	structs.h	/^   int	number_of_attacks;	\/* How many attack messages to chose from. *\/$/;"	m	struct:message_list
numbets	structs.h	/^        int numbets;                    \/\/ Number of bets on race$/;"	m	struct:game_data
numplayers	structs.h	/^        int numplayers;                 \/\/ Number of players $/;"	m	struct:blackjack_data
oasis_olc_data	oasis.h	/^struct oasis_olc_data {$/;"	s
obj	act.build.c	/^  struct obj_data *obj;	\/*PC object edit buffer		*\/$/;"	m	struct:obuild_olc_data	file:
obj	oasis.h	/^  struct obj_data *obj;$/;"	m	struct:oasis_olc_data
obj	structs.h	/^  struct obj_data *obj;$/;"	m	struct:auc_data
obj	structs.h	/^  struct obj_data *obj;$/;"	m	struct:mob_prog_act_list
obj	structs.h	/^  struct obj_file_elem obj;$/;"	m	struct:auc_file_elem
obj_affected_by_timer	handler.c	/^bool obj_affected_by_timer(struct obj_data *obj, int type) {$/;"	f
obj_affected_type	structs.h	/^struct obj_affected_type$/;"	s
obj_allow	act.build.c	/^int obj_allow = TRUE;$/;"	v
obj_attr	balance.c	/^int obj_attr(struct obj_data *obj, long attribute)$/;"	f
obj_bits	balance.c	/^const char *obj_bits[NUM_OBJ_ATTRIBUTES + 1] = {$/;"	v
obj_cmd_info	dg_objcmd.c	/^const struct obj_command_info obj_cmd_info[] = {$/;"	v
obj_command_info	dg_objcmd.c	/^struct obj_command_info {$/;"	s	file:
obj_command_interpreter	dg_objcmd.c	/^void obj_command_interpreter(obj_data *obj, char *argument)$/;"	f
obj_data	dg_scripts.h	/^typedef struct obj_data obj_data;$/;"	t
obj_data	structs.h	/^struct obj_data$/;"	s
obj_file_elem	structs.h	/^struct obj_file_elem$/;"	s
obj_flag_data	structs.h	/^struct obj_flag_data$/;"	s
obj_flags	corpses.h	/^    struct obj_flag_data obj_flags;$/;"	m	class:Corpse
obj_flags	structs.h	/^   struct obj_flag_data obj_flags;\/* Object information               *\/$/;"	m	struct:obj_data
obj_from_char	handler.c	/^void obj_from_char(struct obj_data * object)$/;"	f
obj_from_obj	handler.c	/^void obj_from_obj(struct obj_data * obj)$/;"	f
obj_from_room	handler.c	/^void obj_from_room(struct obj_data * object)$/;"	f
obj_index	db.c	/^struct index_data *obj_index;	\/* index table for object file	 *\/$/;"	v
obj_levels	balance.c	/^int *obj_levels;$/;"	v
obj_log	dg_objcmd.c	/^void obj_log(obj_data *obj, char *msg)$/;"	f
obj_proto	db.c	/^struct obj_data *obj_proto;	\/* prototypes for objs		 *\/$/;"	v
obj_rnum	structs.h	/^typedef sh_int	obj_rnum;	\/* An object's real (internal) num type *\/$/;"	t
obj_room	dg_objcmd.c	/^int obj_room(obj_data *obj)$/;"	f
obj_to_char	handler.c	/^void obj_to_char(struct obj_data * object, struct char_data * ch, char *file, int line)$/;"	f
obj_to_obj	handler.c	/^void obj_to_obj(struct obj_data * obj, struct obj_data * obj_to)$/;"	f
obj_to_room	handler.c	/^void obj_to_room(struct obj_data * object, room_rnum room)$/;"	f
obj_vnum	structs.h	/^typedef sh_int obj_vnum;       	\/* An object's vnum type.       *\/$/;"	t
obj_wear_spells	act.item.c	/^void obj_wear_spells(struct char_data *ch, struct obj_data *obj)$/;"	f
objdata	db.h	/^  struct quest_obj_data objdata;$/;"	m	struct:questlist_element
object_activity	mobact.c	/^void object_activity(void)$/;"	f
object_list	db.c	/^struct obj_data *object_list = NULL;	\/* global linked list of objs	 *\/$/;"	v
object_list_new_owner	handler.c	/^void object_list_new_owner(struct obj_data * list, struct char_data * ch)$/;"	f
objrnum	db.h	/^  obj_rnum objrnum;$/;"	m	struct:questlist_element
obuild_olc_data	act.build.c	/^struct obuild_olc_data {$/;"	s	file:
odd_write_cleanup	modify.c	/^void odd_write_cleanup(struct descriptor_data *d, int action)$/;"	f
oedit_disp_apply_menu	oedit.c	/^void oedit_disp_apply_menu(struct descriptor_data *d)$/;"	f
oedit_disp_battery_menu	oedit.c	/^void oedit_disp_battery_menu(struct descriptor_data *d)$/;"	f
oedit_disp_container_flags_menu	oedit.c	/^void oedit_disp_container_flags_menu(struct descriptor_data *d)$/;"	f
oedit_disp_extra_menu	oedit.c	/^void oedit_disp_extra_menu(struct descriptor_data *d)$/;"	f
oedit_disp_extradesc_menu	oedit.c	/^void oedit_disp_extradesc_menu(struct descriptor_data *d)$/;"	f
oedit_disp_menu	oedit.c	/^void oedit_disp_menu(struct descriptor_data *d)$/;"	f
oedit_disp_perm_menu	oedit.c	/^void oedit_disp_perm_menu(struct descriptor_data *d)$/;"	f
oedit_disp_prompt_apply_menu	oedit.c	/^void oedit_disp_prompt_apply_menu(struct descriptor_data *d)$/;"	f
oedit_disp_spells_menu	oedit.c	/^void oedit_disp_spells_menu(struct descriptor_data *d)$/;"	f
oedit_disp_type_menu	oedit.c	/^void oedit_disp_type_menu(struct descriptor_data *d)$/;"	f
oedit_disp_val1_menu	oedit.c	/^void oedit_disp_val1_menu(struct descriptor_data *d)$/;"	f
oedit_disp_val2_menu	oedit.c	/^void oedit_disp_val2_menu(struct descriptor_data *d)$/;"	f
oedit_disp_val3_menu	oedit.c	/^void oedit_disp_val3_menu(struct descriptor_data *d)$/;"	f
oedit_disp_val4_menu	oedit.c	/^void oedit_disp_val4_menu(struct descriptor_data *d)$/;"	f
oedit_disp_weapon_menu	oedit.c	/^void oedit_disp_weapon_menu(struct descriptor_data *d)$/;"	f
oedit_disp_wear_menu	oedit.c	/^void oedit_disp_wear_menu(struct descriptor_data *d)$/;"	f
oedit_liquid_type	oedit.c	/^void oedit_liquid_type(struct descriptor_data *d)$/;"	f
oedit_parse	oedit.c	/^void oedit_parse(struct descriptor_data *d, char *arg)$/;"	f
oedit_save_internally	oedit.c	/^void oedit_save_internally(struct descriptor_data *d)$/;"	f
oedit_save_to_disk	oedit.c	/^void oedit_save_to_disk(int zone_num)$/;"	f
oedit_setup_existing	oedit.c	/^void oedit_setup_existing(struct descriptor_data *d, int real_num)$/;"	f
oedit_setup_new	oedit.c	/^void oedit_setup_new(struct descriptor_data *d)$/;"	f
oedit_string_cleanup	oedit.c	/^void oedit_string_cleanup(struct descriptor_data *d, int terminator)$/;"	f
offence_types	constants.c	/^const char *offence_types[] =$/;"	v
offences	structs.h	/^   ubyte offences[32];           \/* Offence Counts                      *\/$/;"	m	struct:player_special_data_saved
offer	structs.h	/^  long offer;$/;"	m	struct:auc_data
offer	structs.h	/^  long offer;$/;"	m	struct:auc_file_elem
ok_damage_shopkeeper	shop.c	/^int ok_damage_shopkeeper(struct char_data * ch, struct char_data * victim)$/;"	f
ok_pick	act.movement.c	/^int ok_pick(struct char_data *ch, obj_vnum keynum, int pickproof, int scmd)$/;"	f
ok_shop_room	shop.c	/^int ok_shop_room(int shop_nr, int room)$/;"	f
olc	structs.h	/^   void *olc; $/;"	m	struct:descriptor_data
olc_bitvector	olc.c	/^void olc_bitvector(int *bv, const char **names, char *arg)$/;"	f
olc_ch	olc.c	/^struct char_data *olc_ch;$/;"	v
olc_commands	olc.c	/^const char *olc_commands[] = {$/;"	v
olc_interpreter	olc.c	/^void olc_interpreter(void *targ, int mode, char *arg)$/;"	f
olc_modes	olc.c	/^const char *olc_modes[] = {$/;"	v
olc_scmd_info	oasis.c	/^} olc_scmd_info[] = {$/;"	v
olc_scmd_info_t	oasis.c	/^struct olc_scmd_info_t {$/;"	s	file:
olc_set_show	olc.c	/^void olc_set_show(struct char_data * ch, int olc_mode, char *arg)$/;"	f
olc_string	olc.c	/^void olc_string(char **string, size_t maxlen, char *arg)$/;"	f
olc_zone	structs.h	/^   int olc_zone;$/;"	m	struct:player_special_data_saved
old_primal_score	act.informative.c	/^void old_primal_score(struct char_data *ch)$/;"	f
one_argument	interpreter.c	/^char *one_argument(char *argument, char *first_arg)$/;"	f
one_phrase	dg_triggers.c	/^char *one_phrase(char *arg, char *first_arg)$/;"	f
one_word	interpreter.c	/^char *one_word(char *argument, char *first_arg)$/;"	f
oompa	spec_assign.c	/^  SPECIAL(oompa);$/;"	v
open1	shop.h	/^   int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open2	shop.h	/^   int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open_logfile	comm.c	/^int open_logfile(const char *filename, FILE *stderr_fp)$/;"	f
operator_str	shop.c	/^const char *operator_str[] = {$/;"	v
options	clan.h	/^  long options; \/* bitvector_t *\/       \/* Clan Options           *\/$/;"	m	struct:clan_rec
org	spell_parser.c	/^  const char *org;$/;"	m	struct:syllable	file:
orgRelease	reports.h	/^    ReleaseInfo orgRelease;     \/\/ Release information of initial report$/;"	m	class:Report
orgRoom	reports.h	/^    room_vnum orgRoom;          \/\/ The room the player reported the report in$/;"	m	class:Report
orgRoom	reports.h	/^  room_vnum orgRoom;          \/\/ The room the player reported the report in$/;"	m	struct:report_file_elem
orgTime	reports.h	/^    time_t orgTime;             \/\/ Time the report was reported  $/;"	m	class:Report
orgTime	reports.h	/^  time_t orgTime;             \/\/ Time the report was reported  $/;"	m	struct:report_file_elem
original	dg_scripts.h	/^  struct cmdlist_element *original;$/;"	m	struct:cmdlist_element
original	structs.h	/^   struct char_data *original;	\/* original char if switched		*\/$/;"	m	struct:descriptor_data
others_auto	act.social.c	/^  char *others_auto;$/;"	m	struct:social_messg	file:
others_found	act.social.c	/^  char *others_found;$/;"	m	struct:social_messg	file:
others_no_arg	act.social.c	/^  char *others_no_arg;$/;"	m	struct:social_messg	file:
otrig_types	dg_triggers.c	/^char *otrig_types[] = {$/;"	v
outCorpseFile	corpses.cpp	/^ofstream outCorpseFile;$/;"	v
output	structs.h	/^   char *output;		\/* ptr to the current output buffer	*\/$/;"	m	struct:descriptor_data
output_mob	balance.c	/^void output_mob(struct char_data *mob, FILE *mob_file, long invalidbits)$/;"	f
output_obj	balance.c	/^void output_obj(struct obj_data *obj, FILE *obj_file, long invalidbits)$/;"	f
owner	house.h	/^   long owner;			\/* idnum of house's owner	*\/$/;"	m	struct:house_control_rec
owner	structs.h	/^  struct obj_data *owner; \/\/ Attach an owner after enhancing item$/;"	m	struct:quest_obj_data
p_locks	structs.h	/^   sh_int p_locks;$/;"	m	struct:dex_skill_type
p_pocket	structs.h	/^   sh_int p_pocket;$/;"	m	struct:dex_skill_type
packleader	spec_assign.c	/^  SPECIAL(packleader);$/;"	v
packmember	spec_assign.c	/^  SPECIAL(packmember);$/;"	v
page_length	structs.h	/^        int page_length;$/;"	m	struct:primal_extend_data
page_string	modify.c	/^void page_string(struct descriptor_data *d, char *str, int keep_internal)$/;"	f
page_width	structs.h	/^        int page_width;$/;"	m	struct:primal_extend_data
paginate_string	modify.c	/^void paginate_string(char *str, struct descriptor_data *d)$/;"	f
parse_action	improved-edit.c	/^void parse_action(int command, char *string, struct descriptor_data *d)$/;"	f
parse_class	class.c	/^int parse_class(char *arg)$/;"	f
parse_command_arg	act.informative.c	/^int parse_command_arg(struct char_data *ch, struct char_data **vict, $/;"	f
parse_enhanced_mob	db.c	/^void parse_enhanced_mob(FILE *mob_f, int i, int nr)$/;"	f
parse_espec	db.c	/^void parse_espec(char *buf, int i, int nr)$/;"	f
parse_ip	comm.c	/^int parse_ip(const char *addr, struct in_addr *inaddr)$/;"	f
parse_mobile	db.c	/^void parse_mobile(FILE * mob_f, int nr, zone_vnum vznum, zone_rnum rznum)$/;"	f
parse_object	db.c	/^char *parse_object(FILE * obj_f, int nr, zone_vnum vznum, zone_rnum rznum)$/;"	f
parse_offence	clan.c	/^int parse_offence(char *arg)$/;"	f
parse_punish	clan.c	/^int parse_punish(char *arg)$/;"	f
parse_race_name	class.c	/^int parse_race_name(char *arg) {$/;"	f
parse_room	db.c	/^void parse_room(FILE * fl, int virtual_nr)$/;"	f
parse_simple_mob	db.c	/^void parse_simple_mob(FILE *mob_f, int i, int nr)$/;"	f
parse_trigger	dg_db_scripts.c	/^void parse_trigger(FILE *trig_f, int nr, zone_vnum vznum, zone_rnum rznum)$/;"	f
passwd	structs.h	/^   char	passwd[MAX_PWD_LENGTH+1]; \/* character's password      *\/$/;"	m	struct:char_player_data
pc_class_primary_stats	constants.c	/^cpp_extern const int pc_class_primary_stats[NUM_CLASSES] = {$/;"	v
pc_class_types	constants.c	/^const char *pc_class_types[] =$/;"	v
pc_max_class_points	constants.c	/^cpp_extern const int pc_max_class_points[NUM_CLASSES][3] = {$/;"	v
pc_max_race_stats	constants.c	/^cpp_extern const int pc_max_race_stats[MAX_RACES][6] = {$/;"	v
pc_race_eq_masks	constants.c	/^cpp_extern const long pc_race_eq_masks[MAX_RACES] = $/;"	v
pc_race_types	constants.c	/^const char *pc_race_types[] =$/;"	v
pckills	structs.h	/^	long pckills;$/;"	m	struct:kill_data
pcnpc	act.wizard.c	/^    const char pcnpc;$/;"	m	struct:set_struct	file:
peacekeeper	spec_assign.c	/^  SPECIAL(peacekeeper);$/;"	v
people	structs.h	/^   struct char_data *people;    \/* List of NPC \/ PC in room           *\/$/;"	m	struct:room_data
perform_act	comm.c	/^void perform_act(const char *orig, struct char_data *ch, struct obj_data *obj,$/;"	f
perform_alias	interpreter.c	/^int perform_alias(struct descriptor_data *d, char *orig)$/;"	f
perform_change	act.other.c	/^void perform_change(struct char_data *ch)$/;"	f
perform_complex_alias	interpreter.c	/^void perform_complex_alias(struct txt_q *input_q, char *orig, struct alias_data *a)$/;"	f
perform_drop	act.item.c	/^int perform_drop(struct char_data * ch, struct obj_data * obj,$/;"	f
perform_drop_gold	act.item.c	/^void perform_drop_gold(struct char_data * ch, int amount, byte mode,$/;"	f
perform_dupe_check	interpreter.c	/^int perform_dupe_check(struct descriptor_data *d)$/;"	f
perform_eat	act.item.c	/^void perform_eat(struct char_data *ch, struct obj_data *food, int subcmd)$/;"	f
perform_event_destroy	act.wizard.c	/^void perform_event_destroy(struct char_data *ch, char *arg)$/;"	f
perform_get_from_container	act.item.c	/^void perform_get_from_container(struct char_data * ch, struct obj_data * obj,$/;"	f
perform_get_from_room	act.item.c	/^int perform_get_from_room(struct char_data * ch, struct obj_data * obj)$/;"	f
perform_give	act.item.c	/^void perform_give(struct char_data * ch, struct char_data * vict,$/;"	f
perform_give_gold	act.item.c	/^void perform_give_gold(struct char_data * ch, struct char_data * vict,$/;"	f
perform_group	act.other.c	/^int perform_group(struct char_data *ch, struct char_data *vict)$/;"	f
perform_group_gain	fight.c	/^void perform_group_gain(struct char_data * ch, int base,$/;"	f
perform_immort_invis	act.wizard.c	/^void perform_immort_invis(struct char_data *ch, int level)$/;"	f
perform_immort_vis	act.wizard.c	/^void perform_immort_vis(struct char_data *ch)$/;"	f
perform_immort_where	act.informative.c	/^void perform_immort_where(struct char_data * ch, char *arg)$/;"	f
perform_mag_groups	magic.c	/^void perform_mag_groups(int level, struct char_data * ch,$/;"	f
perform_mortal_where	act.informative.c	/^void perform_mortal_where(struct char_data * ch, char *arg)$/;"	f
perform_mount_violence	fight.c	/^void perform_mount_violence(struct char_data *rider)$/;"	f
perform_move	act.movement.c	/^int perform_move(struct char_data *ch, int aDir, int need_specials_check)$/;"	f
perform_punish	clan.c	/^void perform_punish (struct char_data * ch, int ptype, int hours, int offence)$/;"	f
perform_put	act.item.c	/^void perform_put(struct char_data * ch, struct obj_data * obj,$/;"	f
perform_quest_adjust	quest.c	/^void perform_quest_adjust(struct char_data *ch, struct event_data *ev, $/;"	f
perform_quest_create	quest.c	/^void perform_quest_create(struct char_data *ch, char *argument)$/;"	f
perform_quest_end	quest.c	/^void perform_quest_end(struct char_data *ch, struct event_data *ev)$/;"	f
perform_quest_info	quest.c	/^void perform_quest_info(struct char_data *ch)$/;"	f
perform_quest_join	quest.c	/^void perform_quest_join(struct char_data *ch, char *argument)$/;"	f
perform_quest_leave	quest.c	/^void perform_quest_leave(struct char_data *ch, char *argument)$/;"	f
perform_quest_load	quest.c	/^void perform_quest_load(struct char_data *ch, struct event_data *ev, char *arg)$/;"	f
perform_quest_restore	quest.c	/^void perform_quest_restore(struct char_data *ch, struct event_data *ev)$/;"	f
perform_quest_score	quest.c	/^void perform_quest_score(struct char_data *ch)$/;"	f
perform_quest_transwer	quest.c	/^void perform_quest_transwer(struct char_data *ch, struct event_data *ev, $/;"	f
perform_quest_trask	quest.c	/^void perform_quest_trask(struct char_data *ch, struct event_data *ev, $/;"	f
perform_quest_trclose	quest.c	/^void perform_quest_trclose(struct char_data *ch, struct event_data *ev,$/;"	f
perform_quest_trfail	quest.c	/^void perform_quest_trfail(struct char_data *ch, struct event_data *ev)$/;"	f
perform_quest_trpass	quest.c	/^void perform_quest_trpass(struct char_data *ch, struct event_data *ev)$/;"	f
perform_quest_trquestion	quest.c	/^void perform_quest_trquestion(struct char_data *ch, struct event_data *ev)$/;"	f
perform_quest_trresponse	quest.c	/^void perform_quest_trresponse(struct char_data *ch, struct event_data *ev)$/;"	f
perform_remove	act.item.c	/^void perform_remove(struct char_data * ch, int pos)$/;"	f
perform_repair	act.item.c	/^void perform_repair(struct char_data *ch, struct obj_data *obj)$/;"	f
perform_set	act.wizard.c	/^int perform_set(struct char_data *ch, struct char_data *vict, int mode,$/;"	f
perform_socket_read	comm.c	/^ssize_t perform_socket_read(socket_t desc, char *read_point, size_t space_left)$/;"	f
perform_socket_write	comm.c	/^ssize_t perform_socket_write(socket_t desc, const char *txt, size_t length)$/;"	f
perform_subst	comm.c	/^int perform_subst(struct descriptor_data *t, char *orig, char *subst)$/;"	f
perform_tell	act.comm.c	/^void perform_tell(struct char_data *ch, struct char_data *vict, char *arg)$/;"	f
perform_violence	fight.c	/^void perform_violence(void)$/;"	f
perform_wear	act.item.c	/^void perform_wear(struct char_data * ch, struct obj_data * obj, int where)$/;"	f
personal	structs.h	/^   char *personal;	\/* Personal info *\/$/;"	m	struct:char_player_data
personal	structs.h	/^   char personal[MAX_INPUT_LENGTH + 1];$/;"	m	struct:char_file_u
pet_shops	spec_assign.c	/^  SPECIAL(pet_shops);$/;"	v
pet_shops	spec_procs.c	/^SPECIAL(pet_shops);$/;"	v
peter	castle.c	/^SPECIAL(peter);$/;"	v
pfilepos	structs.h	/^   int pfilepos;			 \/* playerfile pos		  *\/$/;"	m	struct:char_data
phoenix	spec_assign.c	/^  SPECIAL(phoenix);$/;"	v
phours	structs.h	/^   sh_int phours[32];            \/* Punishment Hours                    *\/$/;"	m	struct:player_special_data_saved
pid_log	comm.c	/^void pid_log(void) {$/;"	f
pillars	spec_assign.c	/^  SPECIAL(pillars);$/;"	v
pk_allowed	config.c	/^char pk_allowed = NO;$/;"	v
plant_magic	comm.c	240;"	d	file:
play_slots	casino.c	/^void play_slots(struct char_data *ch, int amount) $/;"	f
played	structs.h	/^   int	played;     \/* This is the total accumulated time played in secs *\/$/;"	m	struct:time_data
played	structs.h	/^   int	played;    \/* Number of secs played in total *\/$/;"	m	struct:char_file_u
player	quest.h	/^  struct quest_score_data *player;$/;"	m	struct:trivia_response_data
player	structs.h	/^   struct char_player_data player;       \/* Normal data                   *\/$/;"	m	struct:char_data
playerId	corpses.h	/^    long playerId;$/;"	m	class:Contain
playerId	corpses.h	/^    long playerId;$/;"	m	class:Corpse
playerId	reports.h	/^    long playerId;              \/\/ Person responsible for report$/;"	m	class:Report
playerId	reports.h	/^    long playerId;              \/\/ The player which made this change$/;"	m	class:ReportChange
playerId	reports.h	/^  long playerId;              \/\/ Person Responsible for report$/;"	m	struct:report_file_elem
playerId	reports.h	/^  long playerId;        \/\/ The player which made this change$/;"	m	struct:reportchange_file_elem
player_bits	constants.c	/^const char *player_bits[] =$/;"	v
player_fl	db.c	/^FILE *player_fl = NULL;		\/* file desc of player file	 *\/$/;"	v
player_index_element	db.h	/^struct player_index_element$/;"	s
player_kill_data	structs.h	/^   struct kill_data player_kill_data;$/;"	m	struct:char_file_u
player_kills	structs.h	/^   struct kill_data player_kills;$/;"	m	struct:player_special_data
player_special_data	structs.h	/^struct player_special_data$/;"	s
player_special_data_saved	structs.h	/^struct player_special_data_saved$/;"	s
player_specials	structs.h	/^   struct player_special_data *player_specials; \/* PC specials		  *\/$/;"	m	struct:char_data
player_specials_primalsaved	structs.h	/^   struct primal_extend_data player_specials_primalsaved;$/;"	m	struct:char_file_u
player_specials_saved	structs.h	/^   struct player_special_data_saved player_specials_saved;$/;"	m	struct:char_file_u
player_table	db.c	/^struct player_index_element *player_table = NULL;	\/* index to plr file	 *\/$/;"	v
playerhunter	spec_assign.c	/^  SPECIAL(playerhunter);$/;"	v
playerid	structs.h	/^  long playerid;$/;"	m	struct:ignore_data
players	quest.h	/^  struct quest_score_data *players;$/;"	m	struct:itemhunt_data
players	quest.h	/^  struct quest_score_data *players;$/;"	m	struct:trivia_data
playing_string_cleanup	modify.c	/^void playing_string_cleanup(struct descriptor_data *d, int action)$/;"	f
plural	spells.h	/^   const char	*plural;$/;"	m	struct:attack_hit_type
point_update	limits.c	/^void point_update(void)$/;"	f
points	structs.h	/^   struct char_point_data points;        \/* Points                        *\/$/;"	m	struct:char_data
points	structs.h	/^   struct char_point_data points;$/;"	m	struct:char_file_u
pokies	spec_assign.c	/^  SPECIAL(pokies);$/;"	v
pokies1	spec_assign.c	/^  SPECIAL(pokies1);$/;"	v
pokies2	spec_assign.c	/^  SPECIAL(pokies2);$/;"	v
pokies3	spec_assign.c	/^  SPECIAL(pokies3);$/;"	v
policies	db.c	/^char *policies = NULL;		\/* policies page		 *\/$/;"	v
poofin	structs.h	/^   char	*poofin;		\/* Description on arrival of a god.     *\/$/;"	m	struct:player_special_data
poofin	structs.h	/^   char poofin[POOF_LENGTH + 1];$/;"	m	struct:char_file_u
poofout	structs.h	/^   char	*poofout;		\/* Description upon a god's exit.       *\/$/;"	m	struct:player_special_data
poofout	structs.h	/^   char poofout[POOF_LENGTH + 1];$/;"	m	struct:char_file_u
pop	shop.c	/^int pop(struct stack_data * stack)$/;"	f
pop_free_list	mail.c	/^long pop_free_list(void)$/;"	f
position	mail.h	/^   long	position;$/;"	m	struct:position_list_type_d
position	structs.h	/^   byte position;		\/* Standing, fighting, sleeping, etc.	  *\/$/;"	m	struct:char_special_data
position_list_type	mail.h	/^typedef struct position_list_type_d position_list_type;$/;"	t
position_list_type_d	mail.h	/^struct position_list_type_d {$/;"	s
position_types	constants.c	/^const char *position_types[] =$/;"	v
post_move_checks	act.movement.c	/^void post_move_checks(struct char_data *ch)$/;"	f
postmaster	mail.c	/^SPECIAL(postmaster);$/;"	v
postmaster	spec_assign.c	/^  SPECIAL(postmaster);$/;"	v
postmaster	spell_parser.c	/^SPECIAL(postmaster);$/;"	v
postmaster_check_mail	mail.c	/^void postmaster_check_mail(struct char_data * ch, struct char_data *mailman,$/;"	f
postmaster_receive_mail	mail.c	/^void postmaster_receive_mail(struct char_data * ch, struct char_data *mailman,$/;"	f
postmaster_send_mail	mail.c	/^void postmaster_send_mail(struct char_data * ch, struct char_data *mailman,$/;"	f
power	clan.h	/^  int power;                            \/* Clan Power             *\/$/;"	m	struct:clan_rec
prac_params	class.c	/^int prac_params[4][NUM_CLASSES] = {$/;"	v
prac_types	spec_procs.c	/^const char *prac_types[] = {$/;"	v
pray_for_items	spec_assign.c	/^  SPECIAL(pray_for_items);$/;"	v
pref	structs.h	/^   long \/*bitvector_t*\/	pref;	\/* preference flags for PC's.		*\/$/;"	m	struct:player_special_data_saved
preference_bits	constants.c	/^const char *preference_bits[] =$/;"	v
pressure	structs.h	/^   int	pressure;	\/* How is the pressure ( Mb ) *\/$/;"	m	struct:weather_data
prev_colour_code	structs.h	/^   int prev_colour_code;	\/* The previous colour code		*\/$/;"	m	struct:player_special_data
primal_extend_data	structs.h	/^struct primal_extend_data$/;"	s
primal_score	act.informative.c	/^void primal_score(struct char_data *ch, char *argument)$/;"	f
primalsaved	structs.h	/^   struct primal_extend_data primalsaved;$/;"	m	struct:player_special_data
printBriefDescription	reports.cpp	/^Report::printBriefDescription(struct descriptor_data *d, char *writeto)$/;"	f	class:Report
printDetails	reports.cpp	/^Report::printDetails(struct descriptor_data *d, char *writeto)$/;"	f	class:Report
printDetails	reports.cpp	/^ReportChange::printDetails(char *writeto)$/;"	f	class:ReportChange
printReport	reports.cpp	/^ReportList::printReport(struct descriptor_data *d, int number, int mode)$/;"	f	class:ReportList
print_group	act.other.c	/^void print_group(struct char_data *ch)$/;"	f
print_it	act.other.c	/^void print_it(int bit, struct obj_data *obj, struct char_data *ch)$/;"	f
print_object_location	act.informative.c	/^void print_object_location(int num, struct obj_data * obj, struct char_data *ch,$/;"	f
print_sort_types	act.wizard.c	/^void print_sort_types(struct char_data *ch) {$/;"	f
print_spell_info	act.wizard.c	/^void print_spell_info(struct char_data *ch, int spellnum, int race_index) {$/;"	f
print_spells	act.wizard.c	/^void print_spells(struct char_data *ch, int class_index, int race_index, int sort_type) {$/;"	f
print_who_info	act.informative.c	/^void print_who_info(struct char_data *array[], int length, $/;"	f
print_zone_to_buf	act.wizard.c	/^void print_zone_to_buf(char *bufptr, zone_rnum zone, int level, bool detailed)$/;"	f
privilege	clan.h	/^  ubyte privilege[20];                  \/* Clan Privileges        *\/$/;"	m	struct:clan_rec
proc_color	colour.c	/^void proc_color(char *inbuf, struct char_data *ch, int colour, int insize)$/;"	f
process_ability_purchase	act.other.c	/^long process_ability_purchase(struct char_data *ch, char newclass,$/;"	f
process_attach	dg_scripts.c	/^void process_attach(void *go, struct script_data *sc, trig_data *trig,$/;"	f
process_context	dg_scripts.c	/^void process_context(struct script_data *sc, trig_data *trig, char *cmd)$/;"	f
process_detach	dg_scripts.c	/^void process_detach(void *go, struct script_data *sc, trig_data *trig,$/;"	f
process_eval	dg_scripts.c	/^void process_eval(void *go, struct script_data *sc, trig_data *trig,$/;"	f
process_events	dg_event.c	/^void process_events(void)$/;"	f
process_global	dg_scripts.c	/^void process_global(struct script_data *sc, trig_data *trig, char *cmd, long id)$/;"	f
process_if	dg_scripts.c	/^int process_if(char *cond, void *go, struct script_data *sc,$/;"	f
process_input	comm.c	/^int process_input(struct descriptor_data *t)$/;"	f
process_output	comm.c	/^int process_output(struct descriptor_data *t)$/;"	f
process_rdelete	dg_scripts.c	/^void process_rdelete(struct script_data *sc, trig_data *trig, char *cmd)$/;"	f
process_remote	dg_scripts.c	/^void process_remote(struct script_data *sc, trig_data *trig, char *cmd)$/;"	f
process_return	dg_scripts.c	/^int process_return(trig_data *trig, char *cmd)$/;"	f
process_set	dg_scripts.c	/^void process_set(struct script_data *sc, trig_data *trig, char *cmd)$/;"	f
process_unset	dg_scripts.c	/^void process_unset(struct script_data *sc, trig_data *trig, char *cmd)$/;"	f
process_wait	dg_scripts.c	/^void process_wait(void *go, trig_data *trig, int type, char *cmd,$/;"	f
producing	shop.h	/^   obj_vnum *producing;		\/* Which item to produce (virtual)	*\/$/;"	m	struct:shop_data
products	structs.h	/^   list<ObjProductClass> *products; \/* list of products\/objs that this object can make *\/$/;"	m	struct:obj_data
profit_buy	shop.h	/^   float profit_buy;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
profit_sell	shop.h	/^   float profit_sell;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
progtypes	structs.h	/^   int  progtypes;  \/* program types for MOBProg              *\/$/;"	m	struct:index_data
prompt_string	structs.h	/^   char *prompt_string;         \/* user defined prompt string          *\/$/;"	m	struct:char_player_data
prompt_string	structs.h	/^   char prompt_string[25 + 1];$/;"	m	struct:char_file_u
proto	structs.h	/^   struct trig_data *proto;     \/* for triggers... the trigger     *\/$/;"	m	struct:index_data
proto_script	structs.h	/^   struct trig_proto_list *proto_script; \/* list of default triggers      *\/$/;"	m	struct:char_data
proto_script	structs.h	/^   struct trig_proto_list *proto_script; \/* list of default triggers  *\/$/;"	m	struct:obj_data
proto_script	structs.h	/^   struct trig_proto_list *proto_script; \/* list of default triggers  *\/$/;"	m	struct:room_data
prune_crlf	utils.c	/^void prune_crlf(char *txt)$/;"	f
pt_allowed	config.c	/^char pt_allowed = NO;$/;"	v
ptype	structs.h	/^   long \/* bitvector_t *\/ ptype; \/* Punishment Types (PUN_XXXX)         *\/$/;"	m	struct:player_special_data_saved
puff	spec_procs.c	/^SPECIAL(puff);$/;"	v
pulse	comm.c	/^int pulse = 0;$/;"	v
punish_types	constants.c	/^const char *punish_types[] =$/;"	v
punish_update	clan.c	/^void punish_update (struct char_data *ch) $/;"	f
purge_quest_mobs	quest.c	/^void purge_quest_mobs(void)$/;"	f
purge_quest_objs	quest.c	/^void purge_quest_objs(void)$/;"	f
purged	dg_scripts.h	/^    ubyte purged;                      \/* trigger is set to be purged     *\/$/;"	m	struct:trig_data
purged	dg_scripts.h	/^  ubyte purged;                                \/* script is set to be purged *\/$/;"	m	struct:script_data
push	shop.c	/^void push(struct stack_data * stack, int pushval)$/;"	f
push_free_list	mail.c	/^void push_free_list(long pos)$/;"	f
pwd	structs.h	/^   char	pwd[MAX_PWD_LENGTH+1];    \/* character's password *\/$/;"	m	struct:char_file_u
q	random.c	46;"	d	file:
qcount	quest.h	/^  int qcount;$/;"	m	struct:trivia_data
quest_create_itemhunt	quest.c	/^void quest_create_itemhunt(struct char_data *ch, char *arg)$/;"	f
quest_create_trivia	quest.c	/^void quest_create_trivia(struct char_data *ch, char *arg)$/;"	f
quest_eq	structs.h	/^ 	struct quest_obj_data quest_eq[MAX_QUEST_ITEMS];$/;"	m	struct:primal_extend_data
quest_load_notify	quest.c	/^void quest_load_notify(struct char_data *mob, obj_rnum objr)$/;"	f
quest_names	constants.c	/^const char *quest_names[] =$/;"	v
quest_notify	quest.c	/^void quest_notify(struct char_data *ch, struct event_data *ev)$/;"	f
quest_obj_data	structs.h	/^struct quest_obj_data$/;"	s
quest_obj_ok	utils.c	/^bool quest_obj_ok(struct char_data *ch, struct obj_data *obj) {$/;"	f
quest_score_data	quest.h	/^struct quest_score_data$/;"	s
quest_sentry	spec_assign.c	/^  SPECIAL(quest_sentry);$/;"	v
question	quest.h	/^  char question[MAX_INPUT_LENGTH+1];$/;"	m	struct:trivia_data
questlist_element	db.h	/^struct questlist_element$/;"	s
questlist_table	db.c	/^struct questlist_element *questlist_table = NULL;	\/* Questlist Table *\/$/;"	v
questlog_add	quest.c	/^void questlog_add(struct char_data *ch, struct char_data *vict, char *rest)$/;"	f
questlog_del	quest.c	/^void questlog_del(struct char_data *ch, struct char_data *vict, char *rest)$/;"	f
questlog_enhance	quest.c	/^void questlog_enhance(struct char_data *ch, struct char_data *vict, char *rest)$/;"	f
questlog_list	quest.c	/^void questlog_list(struct char_data *ch, char *arg)$/;"	f
questlog_stat	quest.c	/^void questlog_stat(struct char_data *ch, struct char_data *vict, char *rest)$/;"	f
queue_head	graph.c	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	file:
queue_tail	graph.c	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	file:
r	random.c	49;"	d	file:
rNum	structs.h	/^	int rNum;		\/\/ Room that's been burgled$/;"	m	class:BurgledRoom
r_frozen_start_room	db.c	/^room_rnum r_frozen_start_room;	\/* rnum of frozen start room	 *\/$/;"	v
r_immort_start_room	db.c	/^room_rnum r_immort_start_room;	\/* rnum of immort start room	 *\/$/;"	v
r_mortal_start_room	db.c	/^room_rnum r_mortal_start_room;	\/* rnum of mortal start room	 *\/$/;"	v
race	structs.h	/^	long race;		\/* Race			*\/$/;"	m	struct:primal_extend_data
race_abbrevs	class.c	/^const char *race_abbrevs[] = {$/;"	v
race_has_stats_for_skill	act.wizard.c	/^bool race_has_stats_for_skill(int race_index, int class_index, int spellnum, int statNum)$/;"	f
race_help	class.c	/^const char *race_help =$/;"	v
race_menu	class.c	/^const char *race_menu =$/;"	v
race_modifiers	constants.c	/^cpp_extern const float race_modifiers[MAX_RACES] =$/;"	v
rand_desc	act.offensive.c	/^char *rand_desc(int type) {$/;"	f
rand_name	act.offensive.c	/^char *rand_name(int type) {$/;"	f
random_mtrigger	dg_triggers.c	/^void random_mtrigger(char_data *ch)$/;"	f
random_otrigger	dg_triggers.c	/^void random_otrigger(obj_data *obj)$/;"	f
random_wtrigger	dg_triggers.c	/^void random_wtrigger(struct room_data *room)$/;"	f
rank_name	clan.h	/^  char rank_name[20][20];               \/* Clan Rank Names        *\/$/;"	m	struct:clan_rec
ranks	clan.h	/^  ubyte ranks;                          \/* Clan Rank Count        *\/$/;"	m	struct:clan_rec
rapid_blasts	mobact.c	/^void rapid_blasts(void)$/;"	f
raw_kill	fight.c	/^void raw_kill(struct char_data * ch, struct char_data *killer)$/;"	f
reaction	structs.h	/^   sh_int reaction;$/;"	m	struct:dex_app_type
read	corpses.cpp	/^void Contain::read(long playerId) {$/;"	f	class:Contain
read	corpses.cpp	/^void Corpse::read() {$/;"	f	class:Corpse
read_aliases	alias.c	/^void read_aliases(struct char_data *ch)$/;"	f
read_delete	mail.c	/^char *read_delete(long recipient)$/;"	f
read_from_file	mail.c	/^void read_from_file(void *buf, int size, long filepos)$/;"	f
read_line	shop.c	/^void read_line(FILE * shop_f, const char *string, void *data)$/;"	f
read_list	shop.c	/^int read_list(FILE * shop_f, struct shop_buy_data * list, int new_format,$/;"	f
read_lvl	boards.h	/^   int	read_lvl;	\/* min level to read messages on this board *\/$/;"	m	struct:board_info_type
read_mobile	db.c	/^struct char_data *read_mobile(mob_vnum nr, int type) \/* and mob_rnum *\/$/;"	f
read_object	db.c	/^struct obj_data *read_object(obj_vnum nr, int type) \/* and obj_rnum *\/$/;"	f
read_saved_vars	dg_scripts.c	/^void read_saved_vars(struct char_data *ch)$/;"	f
read_trigger	dg_db_scripts.c	/^trig_data *read_trigger(int nr)$/;"	f
read_type_list	shop.c	/^int read_type_list(FILE * shop_f, struct shop_buy_data * list,$/;"	f
real_abils	structs.h	/^   struct char_ability_data real_abils;	 \/* Abilities without modifiers   *\/$/;"	m	struct:char_data
real_mobile	db.c	/^mob_rnum real_mobile(mob_vnum vnum)$/;"	f
real_object	db.c	/^obj_rnum real_object(obj_vnum vnum)$/;"	f
real_room	db.c	/^room_rnum real_room(room_vnum vnum) {$/;"	f
real_shop	genshp.c	/^int real_shop(int vshop_num)$/;"	f
real_time_passed	utils.c	/^struct time_info_data *real_time_passed(time_t t2, time_t t1)$/;"	f
real_trigger	dg_scripts.c	/^int real_trigger(int vnum)$/;"	f
real_zone	dg_wldcmd.c	/^static int real_zone(int number)$/;"	f	file:
real_zone	genzon.c	/^zone_rnum real_zone(zone_vnum vnum)$/;"	f
real_zone_by_thing	genzon.c	/^zone_rnum real_zone_by_thing(room_vnum vznum)$/;"	f
reap	comm.c	/^RETSIGTYPE reap(int sig)$/;"	f
reboot_wizlists	db.c	/^void reboot_wizlists(void)$/;"	f
receive_mtrigger	dg_triggers.c	/^int receive_mtrigger(char_data *ch, char_data *actor, obj_data *obj)$/;"	f
recep_guard	spec_assign.c	/^  SPECIAL(recep_guard);$/;"	v
receptionist	objsave.c	/^SPECIAL(receptionist);$/;"	v
receptionist	spec_assign.c	/^  SPECIAL(receptionist);$/;"	v
receptionist	spell_parser.c	/^SPECIAL(receptionist);$/;"	v
recipient	mail.h	/^   long recipient;			\/* who is this mail for?	*\/$/;"	m	struct:mail_index_type_d
record_usage	comm.c	/^void record_usage(void)$/;"	f
redit_disp_atmos_sector_menu	redit.c	/^void redit_disp_atmos_sector_menu(struct descriptor_data *d)$/;"	f
redit_disp_base_sector_menu	redit.c	/^void redit_disp_base_sector_menu(struct descriptor_data *d)$/;"	f
redit_disp_burgle_menu	redit.c	/^void redit_disp_burgle_menu(struct descriptor_data *d)$/;"	f
redit_disp_enviro_sector_menu	redit.c	/^void redit_disp_enviro_sector_menu(struct descriptor_data *d)$/;"	f
redit_disp_exit_flag_menu	redit.c	/^void redit_disp_exit_flag_menu(struct descriptor_data *d)$/;"	f
redit_disp_exit_menu	redit.c	/^void redit_disp_exit_menu(struct descriptor_data *d)$/;"	f
redit_disp_extradesc_menu	redit.c	/^void redit_disp_extradesc_menu(struct descriptor_data *d)$/;"	f
redit_disp_flag_menu	redit.c	/^void redit_disp_flag_menu(struct descriptor_data *d)$/;"	f
redit_disp_grav_sector_menu	redit.c	/^void redit_disp_grav_sector_menu(struct descriptor_data *d)$/;"	f
redit_disp_menu	redit.c	/^void redit_disp_menu(struct descriptor_data *d)$/;"	f
redit_disp_sector_menu	redit.c	/^void redit_disp_sector_menu(struct descriptor_data *d) {$/;"	f
redit_disp_temp_sector_menu	redit.c	/^void redit_disp_temp_sector_menu(struct descriptor_data *d)$/;"	f
redit_parse	redit.c	/^void redit_parse(struct descriptor_data *d, char *arg)$/;"	f
redit_save_internally	redit.c	/^void redit_save_internally(struct descriptor_data *d)$/;"	f
redit_save_to_disk	redit.c	/^void redit_save_to_disk(zone_vnum zone_num)$/;"	f
redit_setup_existing	redit.c	/^void redit_setup_existing(struct descriptor_data *d, int real_num)$/;"	f
redit_setup_new	redit.c	/^void redit_setup_new(struct descriptor_data *d)$/;"	f
redit_string_cleanup	redit.c	/^void redit_string_cleanup(struct descriptor_data *d, int terminator)$/;"	f
regen	spec_assign.c	/^  SPECIAL(regen); $/;"	v
relBranch	reports.h	/^  short relBranch;      \/\/ Branch release number$/;"	m	struct:report_file_elem
relBranch	reports.h	/^  short relBranch;      \/\/ Branch release number$/;"	m	struct:reportchange_file_elem
relCvsUpToDate	reports.h	/^  bool relCvsUpToDate;  \/\/ Release CVS up to date$/;"	m	struct:report_file_elem
relCvsUpToDate	reports.h	/^  bool relCvsUpToDate;  \/\/ Release CVS up to date$/;"	m	struct:reportchange_file_elem
relMajor	reports.h	/^  short relMajor;       \/\/ Major release number$/;"	m	struct:report_file_elem
relMajor	reports.h	/^  short relMajor;       \/\/ Major release number$/;"	m	struct:reportchange_file_elem
relMinor	reports.h	/^  short relMinor;       \/\/ Minor release number$/;"	m	struct:report_file_elem
relMinor	reports.h	/^  short relMinor;       \/\/ Minor release number$/;"	m	struct:reportchange_file_elem
relations	clan.h	/^  int relations[MAX_CLANS];             \/* Clan Relations         *\/$/;"	m	struct:clan_rec
release	db.c	/^ReleaseInfo release = ReleaseInfo();$/;"	v
remember	mobact.c	/^void remember(struct char_data * ch, struct char_data * victim)$/;"	f
remort	act.other.c	/^void remort(struct char_data *ch, int rclass, long lAbility) {$/;"	f
remort_one	structs.h	/^	ubyte remort_one;		\/* Level reached on first remort     *\/$/;"	m	struct:primal_extend_data
remort_two	structs.h	/^	ubyte remort_two;		\/* Level reached on second remort    *\/$/;"	m	struct:primal_extend_data
removeAllCorpses	corpses.cpp	/^void CorpseData::removeAllCorpses(void) {$/;"	f	class:CorpseData
removeBJPlayer	casino.c	/^void removeBJPlayer(int playernum) $/;"	f
removeChange	reports.cpp	/^Report::removeChange(int index)$/;"	f	class:Report
removeCorpse	corpses.cpp	/^void CorpseData::removeCorpse(struct obj_data *corpse) {$/;"	f	class:CorpseData
removeFromContainer	act.other.c	/^void removeFromContainer(obj_data *aCont, int materialVnum) {$/;"	f
removeMaterials	act.other.c	/^void removeMaterials(obj_data *aCont, list<ObjMaterialClass> *materials, bool success)$/;"	f
removeReport	reports.cpp	/^ReportList::removeReport(struct descriptor_data * d, int number, int mode)$/;"	f	class:ReportList
remove_burglary	act.offensive.c	/^void remove_burglary(Burglary *target)$/;"	f
remove_burglary	act.offensive.c	/^void remove_burglary(struct char_data *ch)$/;"	f
remove_class_specials	act.other.c	/^void remove_class_specials(struct char_data *ch)$/;"	f
remove_cmd_from_list	genzon.c	/^void remove_cmd_from_list(struct reset_com **list, int pos)$/;"	f
remove_enhancement	quest.c	/^void remove_enhancement(struct char_data *ch, struct char_data *vict, $/;"	f
remove_event	dg_event.c	/^void remove_event(struct event_info *event)$/;"	f
remove_from_int_list	genshp.c	/^void remove_from_int_list(sh_int **list, sh_int num)$/;"	f
remove_from_quest	quest.c	/^bool remove_from_quest(struct event_data *ev, struct char_data *ch)$/;"	f
remove_from_save_list	genolc.c	/^int remove_from_save_list(zone_vnum zone, int type)$/;"	f
remove_from_type_list	genshp.c	/^void remove_from_type_list(struct shop_buy_data **list, int num)$/;"	f
remove_lvl	boards.h	/^   int	remove_lvl;	\/* min level to remove messages from this board *\/$/;"	m	struct:board_info_type
remove_mud_event	utils.c	/^void remove_mud_event(struct event_data *ev)$/;"	f
remove_otrigger	dg_triggers.c	/^int remove_otrigger(obj_data *obj, char_data *actor)$/;"	f
remove_race_specials	act.other.c	/^void remove_race_specials(struct char_data *ch)$/;"	f
remove_room_zone_commands	genzon.c	/^void remove_room_zone_commands(int zone, int room_rnum)$/;"	f
remove_trigger	dg_scripts.c	/^int remove_trigger(struct script_data *sc, char *name)$/;"	f
remove_var	dg_scripts.c	/^int remove_var(struct trig_var_data **var_list, char *name)$/;"	f
rent_file_timeout	config.c	/^int rent_file_timeout = 356;$/;"	v
rent_info	structs.h	/^struct rent_info$/;"	s
rentcode	structs.h	/^   int	rentcode;$/;"	m	struct:rent_info
renum_world	db.c	/^void renum_world(void)$/;"	f
renum_zone_table	db.c	/^void renum_zone_table(void)$/;"	f
repair_proc	spec_procs.c	/^void repair_proc(struct char_data *repairer, struct char_data *ch, char *arg) {$/;"	f
repairer	spec_assign.c	/^  SPECIAL(repairer);$/;"	v
replace_str	improved-edit.c	/^int replace_str(char **string, char *pattern, char *replacement, int rep_all, unsigned int max_size)$/;"	f
replace_string	fight.c	/^char *replace_string(const char *str, const char *weapon_singular, const char *weapon_plural)$/;"	f
replacement	interpreter.h	/^  char *replacement;$/;"	m	struct:alias_data
report	structs.h	/^   void *report;$/;"	m	struct:descriptor_data
reportList	db.c	/^ReportList *reportList = new ReportList();$/;"	v
reportNum	reports.h	/^    int reportNum;              \/\/ Report Number$/;"	m	class:Report
reportNum	reports.h	/^    int reportNum;              \/\/ The report that this change belongs to$/;"	m	class:ReportChange
reportNum	reports.h	/^  int reportNum;              \/\/ Report Number$/;"	m	struct:report_file_elem
reportNum	reports.h	/^  int reportNum;        \/\/ report this change belongs to$/;"	m	struct:reportchange_file_elem
reportState	reports.h	/^    int reportState;                  \/\/ Current status on report - see REPORT_STATE_XXX$/;"	m	class:Report
report_file_elem	reports.h	/^struct report_file_elem {$/;"	s
report_parse	reports.cpp	/^report_parse(struct descriptor_data *d, char *arg)$/;"	f
report_states	reports.cpp	/^  report_states[] = {$/;"	v
report_string_cleanup	reports.cpp	/^void report_string_cleanup(struct descriptor_data *d, int terminator)$/;"	f
report_types	reports.cpp	/^  report_types[] = {$/;"	v
reportchange_file_elem	reports.h	/^struct reportchange_file_elem {$/;"	s
reporterId	reports.h	/^    long reporterId;            \/\/ Originator of report$/;"	m	class:Report
reporterId	reports.h	/^  long reporterId;            \/\/ Originator of report$/;"	m	struct:report_file_elem
reports	reports.h	/^    list<Report> reports;  \/\/ List of all the reports$/;"	m	class:ReportList
reread_wizlists	comm.c	/^RETSIGTYPE reread_wizlists(int sig)$/;"	f
reserved	interpreter.c	/^const char *reserved[] =$/;"	v
reserved_word	interpreter.c	/^int reserved_word(char *argument)$/;"	f
reset_char	db.c	/^void reset_char(struct char_data * ch)$/;"	f
reset_com	db.h	/^struct reset_com {$/;"	s
reset_mode	db.h	/^   int	reset_mode;         \/* conditions for reset (see below)   *\/$/;"	m	struct:zone_data
reset_q	db.c	/^struct reset_q_type reset_q;	\/* queue of zones to be reset	 *\/$/;"	v
reset_q_element	db.h	/^struct reset_q_element {$/;"	s
reset_q_type	db.h	/^struct reset_q_type$/;"	s
reset_time	db.c	/^void reset_time(void)$/;"	f
reset_wtrigger	dg_triggers.c	/^void reset_wtrigger(struct room_data *room)$/;"	f
reset_zone	db.c	/^void reset_zone(zone_rnum zone)$/;"	f
resp	quest.h	/^  struct trivia_response_data *resp;$/;"	m	struct:trivia_data
response	quest.h	/^  char response[MAX_INPUT_LENGTH+1];$/;"	m	struct:trivia_response_data
rev_dir	constants.c	/^int rev_dir[] =$/;"	v
reverse_dir	act.offensive.c	/^int reverse_dir(int dir) {$/;"	f
reward_obj	spec_assign.c	/^  SPECIAL(reward_obj); \/\/ Artus> Automated Quest Obj.$/;"	v
richard_garfield	spec_assign.c	/^  SPECIAL(richard_garfield);$/;"	v
ridden_by	structs.h	/^   struct char_data *ridden_by;$/;"	m	struct:obj_data
ring	spec_assign.c	/^  SPECIAL(ring);$/;"	v
rnum	boards.h	/^   obj_rnum rnum;	\/* rnum of this board *\/$/;"	m	struct:board_info_type
roll_real_abils	class.c	/^void roll_real_abils(struct char_data * ch)$/;"	f
roller_blades	spec_assign.c	/^  SPECIAL(roller_blades);$/;"	v
room	graph.c	/^  room_rnum room;$/;"	m	struct:bfs_queue_struct	file:
room	oasis.h	/^  struct room_data *room;$/;"	m	struct:oasis_olc_data
room	structs.h	/^  struct room_data *room;			\/\/ Room$/;"	m	struct:event_data
room_allow	act.build.c	/^int room_allow = TRUE;$/;"	v
room_bits	constants.c	/^const char *room_bits[] =$/;"	v
room_data	dg_scripts.h	/^typedef struct room_data room_data;$/;"	t
room_data	structs.h	/^struct room_data$/;"	s
room_direction_data	structs.h	/^struct room_direction_data$/;"	s
room_edit	act.build.c	/^  int room_edit;	\/* PC Zone being edited		*\/$/;"	m	struct:obuild_olc_data	file:
room_flags	structs.h	/^   long \/*bitvector_t*\/ room_flags;		\/* DEATH,DARK ... etc *\/$/;"	m	struct:room_data
room_has_exit_to	act.offensive.c	/^bool room_has_exit_to(int nFirst, int nSecond)$/;"	f
room_magic_ripple	spec_assign.c	/^  SPECIAL(room_magic_ripple);$/;"	v
room_magic_unstable	spec_assign.c	/^  SPECIAL(room_magic_unstable);$/;"	v
room_msg	structs.h	/^   char	*room_msg;      \/* message to room     *\/$/;"	m	struct:msg_type
room_rnum	structs.h	/^typedef sh_int	room_rnum;	\/* A room's real (internal) number type *\/$/;"	t
room_trap	spec_assign.c	/^  SPECIAL(room_trap); \/\/ For setting traps in rooms - Artus$/;"	v
room_trap	spec_procs.c	/^SPECIAL(room_trap);$/;"	v
room_vnum	structs.h	/^typedef sh_int room_vnum;      	\/* A room's vnum type.          *\/$/;"	t
rotate_arms	spec_procs.c	/^void rotate_arms()$/;"	f
roulette	spec_assign.c	/^  SPECIAL(roulette);$/;"	v
roulette1	spec_assign.c	/^  SPECIAL(roulette1);$/;"	v
routines	spells.h	/^   int routines;$/;"	m	struct:spell_info_type
rznum	shop.h	/^   zone_rnum rznum;             \/* Real zone number of this shop        *\/$/;"	m	struct:shop_data
rznum	structs.h	/^   zone_rnum    rznum;  \/* real zone number of this mob.obj          *\/$/;"	m	struct:index_data
s_addr	db.h	/^   unsigned long int s_addr;$/;"	m	struct:ban_list_element
s_addr	sysdep.h	/^  unsigned long int s_addr;	\/* for inet_addr, etc. *\/$/;"	m	struct:in_addr
same_obj	shop.c	/^int same_obj(struct obj_data * obj1, struct obj_data * obj2)$/;"	f
same_world	utils.c	/^int same_world(struct char_data *ch,struct char_data *ch2)$/;"	f
sanity_check	comm.c	/^void sanity_check(void)$/;"	f
santa	spec_assign.c	/^  SPECIAL(santa);$/;"	v
sarg1	db.h	/^   char *sarg1;                \/* string argument                      *\/$/;"	m	struct:reset_com
sarg2	db.h	/^   char *sarg2;                \/* string argument                      *\/$/;"	m	struct:reset_com
save	corpses.h	/^    struct obj_file_elem save;$/;"	m	class:Contain
save_all	genolc.c	/^int save_all(void)$/;"	f
save_char	db.c	/^void save_char(struct char_data * ch, room_rnum load_room)$/;"	f
save_char_file_u	db.c	/^void save_char_file_u(struct char_file_u st)$/;"	f
save_char_vars	dg_scripts.c	/^void save_char_vars(struct char_data *ch)$/;"	f
save_clans	clan.c	/^void save_clans()$/;"	f
save_etext	db.c	/^void save_etext(struct char_data * ch)$/;"	f
save_list	genolc.c	/^struct save_list_data *save_list;$/;"	v
save_list_data	genolc.h	/^struct save_list_data {$/;"	s
save_mobiles	genmob.c	/^int save_mobiles(zone_rnum rznum)$/;"	f
save_objects	genobj.c	/^int save_objects(zone_rnum zone_num)$/;"	f
save_rooms	genwld.c	/^int save_rooms(zone_rnum rzone)$/;"	f
save_shops	genshp.c	/^int save_shops(zone_rnum zone_num)$/;"	f
save_type	genolc.c	/^  int save_type;$/;"	m	file:
save_types	genolc.c	/^} save_types[] = {$/;"	v
save_zone	genzon.c	/^int save_zone(zone_rnum zone_num)$/;"	f
saved	structs.h	/^   struct char_special_data_saved saved; \/* constants saved in plrfile	  *\/$/;"	m	struct:char_special_data
saved	structs.h	/^   struct player_special_data_saved saved;$/;"	m	struct:player_special_data
saving_throws	class.c	/^byte saving_throws(struct char_data *ch, int type)$/;"	f
say_spell	spell_parser.c	/^void say_spell(struct char_data * ch, int spellnum, struct char_data * tch,$/;"	f
sbyte	structs.h	/^typedef signed char		sbyte;$/;"	t
scan_buffer_for_xword	act.comm.c	/^int scan_buffer_for_xword(char* buf)$/;"	f
scan_file	mail.c	/^int scan_file(void)$/;"	f
scarecrow	spec_assign.c	/^  SPECIAL(scarecrow);$/;"	v
scheck	comm.c	/^int scheck = 0;			\/* for syntax checking mode *\/$/;"	v
school	spec_assign.c	/^  SPECIAL(school); \/* for the piranah *\/$/;"	v
score	quest.h	/^  int score;$/;"	m	struct:quest_score_data
score_flag	structs.h	/^	long score_flag;$/;"	m	struct:primal_extend_data
script	oasis.h	/^  struct trig_proto_list *script;$/;"	m	struct:oasis_olc_data
script	structs.h	/^   struct script_data *script;         \/* script info for the object      *\/$/;"	m	struct:char_data
script	structs.h	/^   struct script_data *script;    \/* script info for the object       *\/$/;"	m	struct:obj_data
script	structs.h	/^   struct script_data *script;  \/* script info for the object         *\/$/;"	m	struct:room_data
script_copy	dg_olc.c	/^void script_copy(void *dst, void *src, int type)$/;"	f
script_data	dg_scripts.h	/^struct script_data {$/;"	s
script_driver	dg_scripts.c	/^int script_driver(void *go, trig_data *trig, int type, int mode)$/;"	f
script_log	dg_scripts.c	/^void script_log(char *msg)$/;"	f
script_memory	dg_scripts.h	/^struct script_memory {$/;"	s
script_mode	oasis.h	/^  int script_mode;$/;"	m	struct:oasis_olc_data
script_save_to_disk	dg_olc.c	/^void script_save_to_disk(FILE *fp, void *item, int type)$/;"	f
script_stat	dg_scripts.c	/^void script_stat (char_data *ch, struct script_data *sc)$/;"	f
script_trigger_check	dg_scripts.c	/^void script_trigger_check(void)$/;"	f
search_block	interpreter.c	/^int search_block(char *arg, const char **list, int exact)$/;"	f
search_block_case_insens	interpreter.c	/^int search_block_case_insens(const char *arg, const char **list, int exact)$/;"	f
sector_type	structs.h	/^   int	sector_type;            \/* sector type (move\/hide)            *\/$/;"	m	struct:room_data
sector_types	constants.c	/^const char *sector_types[][11] =$/;"	v
sedit_compact_rooms_menu	sedit.c	/^void sedit_compact_rooms_menu(struct descriptor_data *d)$/;"	f
sedit_disp_menu	sedit.c	/^void sedit_disp_menu(struct descriptor_data *d)$/;"	f
sedit_namelist_menu	sedit.c	/^void sedit_namelist_menu(struct descriptor_data *d)$/;"	f
sedit_no_trade_menu	sedit.c	/^void sedit_no_trade_menu(struct descriptor_data *d)$/;"	f
sedit_parse	sedit.c	/^void sedit_parse(struct descriptor_data *d, char *arg)$/;"	f
sedit_products_menu	sedit.c	/^void sedit_products_menu(struct descriptor_data *d)$/;"	f
sedit_rooms_menu	sedit.c	/^void sedit_rooms_menu(struct descriptor_data *d)$/;"	f
sedit_save_internally	sedit.c	/^void sedit_save_internally(struct descriptor_data *d)$/;"	f
sedit_save_to_disk	sedit.c	/^void sedit_save_to_disk(int num)$/;"	f
sedit_setup_existing	sedit.c	/^void sedit_setup_existing(struct descriptor_data *d, int rshop_num)$/;"	f
sedit_setup_new	sedit.c	/^void sedit_setup_new(struct descriptor_data *d)$/;"	f
sedit_shop_flags_menu	sedit.c	/^void sedit_shop_flags_menu(struct descriptor_data *d)$/;"	f
sedit_types_menu	sedit.c	/^void sedit_types_menu(struct descriptor_data *d)$/;"	f
seed	random.c	/^static unsigned long seed;$/;"	v	file:
self_destruct	spec_assign.c	/^  SPECIAL(self_destruct);$/;"	v
sell_price	shop.c	/^int sell_price(struct char_data * ch, struct obj_data * obj, int shop_nr, int bargain)$/;"	f
sellerid	structs.h	/^  int sellerid;$/;"	m	struct:auc_file_elem
sellerid	structs.h	/^  long sellerid;$/;"	m	struct:auc_data
sellername	structs.h	/^  char sellername[MAX_NAME_LENGTH + 1];$/;"	m	struct:auc_data
sellername	structs.h	/^  char sellername[MAX_NAME_LENGTH+1];$/;"	m	struct:auc_file_elem
send_clan_enable_f	clan.c	/^void send_clan_enable_f(struct char_data *ch)$/;"	f
send_clan_format	clan.c	/^void send_clan_format(struct char_data *ch)$/;"	f
send_editor_help	improved-edit.c	/^void send_editor_help(struct descriptor_data *d)$/;"	f
send_to_all	comm.c	/^void send_to_all(const char *messg)$/;"	f
send_to_char	comm.c	/^void send_to_char(const char *messg, struct char_data *ch)$/;"	f
send_to_not_zone	comm.c	/^void send_to_not_zone(const char *msg, zone_rnum zone)$/;"	f
send_to_not_zone_world	comm.c	/^void send_to_not_zone_world(const char *msg, zone_rnum zone)$/;"	f
send_to_outdoor	comm.c	/^void send_to_outdoor(const char *messg)$/;"	f
send_to_questors	quest.c	/^void send_to_questors(char *buf, struct event_data *ev)$/;"	f
send_to_room	comm.c	/^void send_to_room(const char *messg, room_rnum room)$/;"	f
send_to_zone	comm.c	/^void send_to_zone(const char *msg, zone_rnum zone)$/;"	f
send_to_zone	dg_comm.c	/^void send_to_zone(char *messg, int zone_rnum)$/;"	f
session	structs.h	/^  time_t session;$/;"	m	struct:user_data
setBJScore	casino.c	/^void setBJScore(struct game_item *bjitem, int playernum) $/;"	f
setBranch	structs.h	/^    void setBranch(short branch) { ReleaseInfo::branch = branch; };$/;"	f	class:ReleaseInfo
setChangeDescription	reports.h	/^    void setChangeDescription(char *changeDesc) {$/;"	f	class:Report
setChangeNum	reports.h	/^    void setChangeNum(int changeNum) { ReportChange::changeNum = changeNum; };$/;"	f	class:ReportChange
setCvsUpToDate	structs.h	/^    void setCvsUpToDate(bool cvsUp) { ReleaseInfo::cvsUpToDate = cvsUp; };$/;"	f	class:ReleaseInfo
setDate	structs.h	/^    void setDate(char *date) { strncpy(ReleaseInfo::date, date, 30); }$/;"	f	class:ReleaseInfo
setDescription	reports.h	/^    void setDescription(char *changeDesc) {$/;"	f	class:ReportChange
setFromState	reports.h	/^    void setFromState(int state) { ReportChange::fromState = state; };$/;"	f	class:ReportChange
setFromType	reports.h	/^    void setFromType(int type) { ReportChange::fromType = type; };$/;"	f	class:ReportChange
setGossip	act.comm.c	/^void GossipItem::setGossip(struct char_data *ch, char *gossip)$/;"	f	class:GossipItem
setLongDescription	reports.h	/^    void setLongDescription(char *longDesc) { $/;"	f	class:Report
setMajor	structs.h	/^    void setMajor(short major) { ReleaseInfo::major = major; };$/;"	f	class:ReleaseInfo
setMaxUsersOnlinePeriod	structs.h	/^    void setMaxUsersOnlinePeriod(int u) { maxUsersOnlinePeriod = u; }$/;"	f	class:GameInfo
setMemory	corpses.h	/^    void setMemory(int memAddress) {$/;"	f	class:Corpse
setMinor	structs.h	/^    void setMinor(short minor) { ReleaseInfo::minor = minor; };$/;"	f	class:ReleaseInfo
setOrgRoom	reports.h	/^    void setOrgRoom(room_vnum orgRoom) { Report::orgRoom = orgRoom; };$/;"	f	class:Report
setOrgTime	reports.h	/^    void setOrgTime(time_t orgTime) { Report::orgTime = orgTime; };$/;"	f	class:Report
setPlayerId	reports.h	/^    void setPlayerId(long playerId) { Report::playerId = playerId; };$/;"	f	class:Report
setPlayerId	reports.h	/^    void setPlayerId(long playerId) { ReportChange::playerId = playerId; };$/;"	f	class:ReportChange
setRelease	reports.h	/^    void setRelease(ReleaseInfo rel) {$/;"	f	class:ReportChange
setRelease	reports.h	/^    void setRelease(ReleaseInfo release) { $/;"	f	class:Report
setReport	reports.cpp	/^void ReportList::setReport(struct descriptor_data *d)$/;"	f	class:ReportList
setReportNum	reports.h	/^    void setReportNum(int reportNum) { Report::reportNum = reportNum; };$/;"	f	class:Report
setReportNum	reports.h	/^    void setReportNum(int reportNum) { ReportChange::reportNum = reportNum; };$/;"	f	class:ReportChange
setReporterId	reports.h	/^    void setReporterId(long playerId) { Report::reporterId = playerId; };$/;"	f	class:Report
setShortDescription	reports.h	/^    void setShortDescription(char *shortDesc) { $/;"	f	class:Report
setState	reports.h	/^    void setState(int state) { Report::reportState = state; };$/;"	f	class:Report
setTag	structs.h	/^    void setTag(char *tag) { strncpy(ReleaseInfo::tag, tag, 10); };$/;"	f	class:ReleaseInfo
setTime	reports.h	/^    void setTime(time_t time) { ReportChange::changeTime = time; };$/;"	f	class:ReportChange
setToState	reports.h	/^    void setToState(int state) { ReportChange::toState = state; };$/;"	f	class:ReportChange
setToType	reports.h	/^    void setToType(int type) { ReportChange::toType = type; };$/;"	f	class:ReportChange
setTopReportNum	reports.h	/^    void setTopReportNum(int num) { ReportList::topReportNum = num; };$/;"	f	class:ReportList
setType	reports.h	/^    void setType(int type) { Report::type = type; };$/;"	f	class:Report
setUsersOnline	structs.h	/^    void setUsersOnline(int u) { $/;"	f	class:GameInfo
set_class_specials	act.other.c	/^void set_class_specials(struct char_data *ch)$/;"	f
set_colour	colour.c	/^void set_colour(struct char_data *ch, int i, int colour_code)$/;"	f
set_default_colour	colour.c	/^void set_default_colour(struct char_data *ch, int i)$/;"	f
set_fields	act.wizard.c	/^  } set_fields[] = {$/;"	v
set_fighting	fight.c	/^void set_fighting(struct char_data * ch, struct char_data * vict, int skillnum)$/;"	f
set_list	act.wizard.c	/^void set_list(struct char_data *ch)$/;"	f
set_race_specials	act.other.c	/^void set_race_specials(struct char_data *ch) $/;"	f
set_sendbuf	comm.c	/^int set_sendbuf(socket_t s)$/;"	f
set_struct	act.wizard.c	/^  struct set_struct {$/;"	s	file:
set_successful_logon	db.c	/^void set_successful_logon(struct char_data *ch, struct char_file_u *st) {$/;"	f
set_tag	spec_assign.c	/^  SPECIAL(set_tag); \/* tag arena teleporter thing *\/$/;"	v
set_title	limits.c	/^void set_title(struct char_data * ch, char *title)$/;"	f
set_unsuccessful_logon	db.c	/^void set_unsuccessful_logon(struct char_data *ch, struct descriptor_data *desc,$/;"	f
setup_dir	db.c	/^void setup_dir(FILE * fl, int room, int dir)$/;"	f
setup_log	comm.c	/^void setup_log(const char *filename, int fd)$/;"	f
seven	spec_assign.c	/^  SPECIAL(seven);$/;"	v
seven1	spec_assign.c	/^  SPECIAL(seven1);$/;"	v
sex	structs.h	/^   byte sex;           \/* PC \/ NPC's sex                       *\/$/;"	m	struct:char_player_data
sex	structs.h	/^   byte sex;$/;"	m	struct:char_file_u
sh_int	structs.h	/^typedef signed short int	sh_int;$/;"	t
shock	structs.h	/^   sh_int shock;$/;"	m	struct:con_app_type
shoot_room	spec_assign.c	/^  SPECIAL(shoot_room);$/;"	v
shop	oasis.h	/^  struct shop_data *shop;$/;"	m	struct:oasis_olc_data
shop_bits	shop.c	/^const char *shop_bits[] = {$/;"	v
shop_buy_data	shop.h	/^struct shop_buy_data {$/;"	s
shop_data	shop.h	/^struct shop_data {$/;"	s
shop_index	shop.c	/^struct shop_data *shop_index;$/;"	v
shop_keeper	act.other.c	/^SPECIAL(shop_keeper);$/;"	v
shop_keeper	clan.c	/^SPECIAL(shop_keeper);$/;"	v
shop_keeper	quest.c	/^SPECIAL(shop_keeper);			\/* Shopkeeper Specproc		 *\/$/;"	v
shop_keeper	sedit.c	/^SPECIAL(shop_keeper);$/;"	v
shop_keeper	shop.c	/^SPECIAL(shop_keeper);$/;"	v
shop_producing	shop.c	/^int shop_producing(struct obj_data * item, int shop_nr)$/;"	f
shop_rnum	structs.h	/^typedef sh_int shop_rnum;      	\/* A shop's real (array index) number.  *\/$/;"	t
shop_vnum	structs.h	/^typedef sh_int shop_vnum;      	\/* A virtual shop number.       *\/$/;"	t
shopping_bargain	shop.c	/^void shopping_bargain(char *arg, struct char_data *ch, struct char_data *keeper, int shop_nr)$/;"	f
shopping_buy	shop.c	/^void shopping_buy(char *arg, struct char_data * ch,$/;"	f
shopping_list	shop.c	/^void shopping_list(char *arg, struct char_data * ch,$/;"	f
shopping_sell	shop.c	/^void shopping_sell(char *arg, struct char_data * ch,$/;"	f
shopping_value	shop.c	/^void shopping_value(char *arg, struct char_data * ch,$/;"	f
shortDescription	reports.h	/^    char shortDescription[REPORT_SHORTDESC_LENGTH];  \/\/ Short desc about report$/;"	m	class:Report
shortDescription	reports.h	/^  char shortDescription[REPORT_SHORTDESC_LENGTH];  \/\/ Short desc about report$/;"	m	struct:report_file_elem
short_descr	structs.h	/^   char	*short_descr;  \/* for NPC 'actions'                    *\/$/;"	m	struct:char_player_data
short_description	corpses.h	/^    char *short_description;$/;"	m	class:Corpse
short_description	structs.h	/^   char	*short_description;       \/* when worn\/carry\/in cont.         *\/$/;"	m	struct:obj_data
showBJHand	casino.c	/^void showBJHand(struct game_item *bjitem, int playernum) $/;"	f
show_ability_messages_to_char	act.other.c	/^void show_ability_messages_to_char(struct char_data *ch)$/;"	f
show_auction_help	act.comm.c	/^void show_auction_help(struct char_data *ch, int subcmd)$/;"	f
show_char_menu	interpreter.c	/^void show_char_menu(struct descriptor_data *d) {$/;"	f
show_contents_to	act.informative.c	/^void show_contents_to(struct char_data *ch, struct obj_data *obj)$/;"	f
show_election_status	act.informative.c	/^void show_election_status(struct char_data *ch)$/;"	f
show_enhancements_to_player	quest.c	/^void show_enhancements_to_player(struct char_data *ch)$/;"	f
show_itemhunt_options	quest.c	/^void show_itemhunt_options(struct char_data *ch, struct event_data *ev)$/;"	f
show_last_gossips	act.comm.c	/^void show_last_gossips(struct char_data *ch)$/;"	f
show_obj_to_char	act.informative.c	/^void show_obj_to_char(struct obj_data * object, struct char_data * ch,$/;"	f
show_object_damage	act.informative.c	/^const char *show_object_damage(struct obj_data *obj)$/;"	f
show_quest_options	quest.c	/^void show_quest_options(struct char_data *ch, struct event_data *ev)$/;"	f
show_shops	shop.c	/^void show_shops(struct char_data * ch, char *arg)$/;"	f
show_specials_to_char	act.wizard.c	/^void show_specials_to_char(struct char_data *ch)$/;"	f
show_stats	interpreter.c	/^void show_stats(struct descriptor_data *d, bool disp_max) {$/;"	f
show_string	modify.c	/^void show_string(struct descriptor_data *d, char *input)$/;"	f
show_train	interpreter.c	/^void show_train(struct descriptor_data *d, bool trainlimit) {$/;"	f
show_trivia_options	quest.c	/^void show_trivia_options(struct char_data *ch, struct event_data *ev)$/;"	f
show_wounded_to_char	act.informative.c	/^void show_wounded_to_char(struct char_data *ch)$/;"	f
showstr_count	structs.h	/^   int  showstr_count;		\/* number of pages to page through	*\/$/;"	m	struct:descriptor_data
showstr_head	structs.h	/^   char *showstr_head;		\/* for keeping track of an internal str	*\/$/;"	m	struct:descriptor_data
showstr_page	structs.h	/^   int  showstr_page;		\/* which page are we currently showing?	*\/$/;"	m	struct:descriptor_data
showstr_vector	structs.h	/^   char **showstr_vector;	\/* for paging through texts		*\/$/;"	m	struct:descriptor_data
sigfunc	comm.h	/^typedef RETSIGTYPE sigfunc(int);$/;"	t
signal_setup	comm.c	/^void signal_setup(void)$/;"	f
singular	spells.h	/^   const char	*singular;$/;"	m	struct:attack_hit_type
site	db.h	/^   char	site[BANNED_SITE_LENGTH+1];$/;"	m	struct:ban_list_element
siteok_everyone	config.c	/^char siteok_everyone = TRUE;$/;"	v
skill	structs.h	/^    int skill;$/;"	m	class:ObjProductClass
skillSuccess	act.other.c	/^int skillSuccess(char_data *ch, int productSkill, int productLevel)$/;"	f
skill_message	fight.c	/^int skill_message(int dam, struct char_data * ch, struct char_data * vict,$/;"	f
skill_name	spell_parser.c	/^const char *skill_name(int num)$/;"	f
skill_percent	dg_handler.c	/^char *skill_percent(struct char_data *ch, char *skill)$/;"	f
skillnum	structs.h	/^  int skillnum;      \/\/ SKILL_TRAP_PIT$/;"	m	struct:trap_type
skillo	spell_parser.c	2311;"	d	file:
skills	structs.h	/^   byte skills[MAX_SKILLS+1];	\/* array of skills plus skill 0		*\/$/;"	m	struct:player_special_data_saved
skip_spaces	interpreter.c	/^void skip_spaces(char **string)$/;"	f
sky	structs.h	/^   int	sky;	\/* How is the sky. *\/$/;"	m	struct:weather_data
slc_names	telnet.h	/^char *slc_names[] = {$/;"	v
sleepy	spec_assign.c	/^  SPECIAL(sleepy);$/;"	v
slide_obj	shop.c	/^struct obj_data *slide_obj(struct obj_data * obj, struct char_data * keeper,$/;"	f
slot_num	boards.h	/^   int	slot_num;     \/* pos of message in "master index" *\/$/;"	m	struct:board_msginfo
small_bits	structs.h	/^   byte small_bits;		\/* Little Bitvector For Debug + Expansion *\/$/;"	m	struct:char_special_data
small_bits	structs.h	/^   int small_bits;		\/* Used for fire :o)                  *\/$/;"	m	struct:room_data
small_outbuf	structs.h	/^   char small_outbuf[SMALL_BUFSIZE];  \/* standard output buffer		*\/$/;"	m	struct:descriptor_data
smash_tilde	modify.c	/^void smash_tilde(char *str)$/;"	f
snake	spec_assign.c	/^  SPECIAL(snake);$/;"	v
snake	spec_procs.c	/^SPECIAL(snake);$/;"	v
snap	spec_assign.c	/^  SPECIAL(snap);$/;"	v
sneak	structs.h	/^   sh_int sneak;$/;"	m	struct:dex_skill_type
sneazy	spec_assign.c	/^  SPECIAL(sneazy);$/;"	v
snoop_by	structs.h	/^   struct descriptor_data *snoop_by; \/* And who is snooping this char	*\/$/;"	m	struct:descriptor_data
snooping	structs.h	/^   struct descriptor_data *snooping; \/* Who is this char snooping	*\/$/;"	m	struct:descriptor_data
soc_mess_list	act.social.c	/^}           *soc_mess_list = NULL;$/;"	v
social_messg	act.social.c	/^struct social_messg {$/;"	s	file:
social_points	structs.h	/^   long	social_points;		\/* Players social points *\/$/;"	m	struct:player_special_data_saved
social_ranks	constants.c	/^const char *social_ranks[] =$/;"	v
social_status	structs.h	/^   int social_status;		\/* Players social rank *\/$/;"	m	struct:player_special_data_saved
socket_t	sysdep.h	/^  typedef SOCKET		socket_t;$/;"	t
solo_gain	fight.c	/^void solo_gain(struct char_data * ch, struct char_data * victim)$/;"	f
sort	act.informative.c	/^void sort(long list[], long owners[], int num)$/;"	f
sort_commands	act.informative.c	/^void sort_commands(void)$/;"	f
sort_keeper_objs	shop.c	/^void sort_keeper_objs(struct char_data * keeper, int shop_nr)$/;"	f
sort_names	constants.c	/^const char *sort_names[] =$/;"	v
sort_pos	act.informative.c	/^  int sort_pos;$/;"	m	struct:sort_struct	file:
sort_spells	spec_procs.c	/^void sort_spells(void)$/;"	f
sort_struct	act.informative.c	/^struct sort_struct {$/;"	s	file:
spare0	house.h	/^   long spare0;$/;"	m	struct:house_control_rec
spare0	structs.h	/^   int	spare0;$/;"	m	struct:rent_info
spare0	structs.h	/^   ubyte spare0;		\/* Was: Wimp Level -- Artus             *\/$/;"	m	struct:player_special_data_saved
spare1	house.h	/^   long spare1;$/;"	m	struct:house_control_rec
spare1	structs.h	/^	long spare1;$/;"	m	struct:primal_extend_data
spare1	structs.h	/^   int	spare1;$/;"	m	struct:rent_info
spare11	structs.h	/^   int spare11;$/;"	m	struct:player_special_data_saved
spare12	structs.h	/^   int spare12;$/;"	m	struct:player_special_data_saved
spare13	structs.h	/^   int spare13;$/;"	m	struct:player_special_data_saved
spare14	structs.h	/^   int spare14;$/;"	m	struct:player_special_data_saved
spare15	structs.h	/^   int spare15;$/;"	m	struct:player_special_data_saved
spare16	structs.h	/^   int spare16;$/;"	m	struct:player_special_data_saved
spare17	structs.h	/^   long	spare17;$/;"	m	struct:player_special_data_saved
spare18	structs.h	/^   long	spare18;$/;"	m	struct:player_special_data_saved
spare19	structs.h	/^   long	spare19;$/;"	m	struct:player_special_data_saved
spare2	house.h	/^   long spare2;$/;"	m	struct:house_control_rec
spare2	structs.h	/^	long spare2;$/;"	m	struct:primal_extend_data
spare2	structs.h	/^   int	spare2;$/;"	m	struct:rent_info
spare3	house.h	/^   long spare3;$/;"	m	struct:house_control_rec
spare3	structs.h	/^	long spare3;$/;"	m	struct:primal_extend_data
spare3	structs.h	/^   int	spare3;$/;"	m	struct:rent_info
spare3	structs.h	/^   ubyte spare3;$/;"	m	struct:player_special_data_saved
spare4	house.h	/^   long spare4;$/;"	m	struct:house_control_rec
spare4	structs.h	/^	int spare4;$/;"	m	struct:primal_extend_data
spare4	structs.h	/^   int	spare4;$/;"	m	struct:rent_info
spare4	structs.h	/^   ubyte spare4;$/;"	m	struct:player_special_data_saved
spare5	house.h	/^   long spare5;$/;"	m	struct:house_control_rec
spare5	structs.h	/^	int spare5;$/;"	m	struct:primal_extend_data
spare5	structs.h	/^   int	spare5;$/;"	m	struct:rent_info
spare5	structs.h	/^   ubyte spare5;$/;"	m	struct:player_special_data_saved
spare6	house.h	/^   long spare6;$/;"	m	struct:house_control_rec
spare6	structs.h	/^	int spare6;$/;"	m	struct:primal_extend_data
spare6	structs.h	/^   int	spare6;$/;"	m	struct:rent_info
spare7	house.h	/^   long spare7;$/;"	m	struct:house_control_rec
spare7	structs.h	/^   int	spare7;$/;"	m	struct:rent_info
sparekilldata1	structs.h	/^	long sparekilldata1;$/;"	m	struct:kill_data
sparekilldata2	structs.h	/^	long sparekilldata2;$/;"	m	struct:kill_data
sparekilldata3	structs.h	/^	long sparekilldata3;$/;"	m	struct:kill_data
special	interpreter.c	/^int special(struct char_data *ch, int cmd, char *arg)$/;"	f
special_ability_bits	constants.c	/^const char *special_ability_bits[] =$/;"	v
special_item_mount_message	act.movement.c	/^void special_item_mount_message(struct char_data *ch) $/;"	f
special_modifier	utils.c	/^float special_modifier(struct char_data *ch)$/;"	f
speech_mtrigger	dg_triggers.c	/^void speech_mtrigger(char_data *actor, char *str)$/;"	f
speech_wtrigger	dg_triggers.c	/^void speech_wtrigger(char_data *actor, char *str)$/;"	f
spell_charm	spells.h	/^ASPELL(spell_charm);$/;"	v
spell_control_weather	spells.h	/^ASPELL(spell_control_weather);$/;"	v
spell_create_water	spells.h	/^ASPELL(spell_create_water);$/;"	v
spell_detect_poison	spells.h	/^ASPELL(spell_detect_poison);$/;"	v
spell_effec	spells.h	/^   sh_int spell_effec[NUM_CLASSES];	\/* normal is 100 *\/$/;"	m	struct:spell_info_type
spell_enchant_weapon	spells.h	/^ASPELL(spell_enchant_weapon);$/;"	v
spell_fear	spells.h	/^ASPELL(spell_fear);$/;"	v
spell_fingerdeath	spells.h	/^ASPELL(spell_fingerdeath); $/;"	v
spell_gate	spells.h	/^ASPELL(spell_gate);$/;"	v
spell_identify	spells.h	/^ASPELL(spell_identify);$/;"	v
spell_info	utils.c	/^struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];$/;"	v
spell_info_type	spells.h	/^struct spell_info_type {$/;"	s
spell_information	spells.h	/^ASPELL(spell_information);$/;"	v
spell_level	spell_parser.c	/^void spell_level(int spell, int chclass, int level, byte intl, byte str, byte wis, byte con, byte dex, byte cha)$/;"	f
spell_locate_object	spells.h	/^ASPELL(spell_locate_object);$/;"	v
spell_recall	spells.h	/^ASPELL(spell_recall);$/;"	v
spell_sort_info	spec_procs.c	/^int spell_sort_info[NUM_SORT_TYPES][NUM_CLASSES][MAX_SKILLS + 1];$/;"	v
spell_summon	spells.h	/^ASPELL(spell_summon);$/;"	v
spell_teleport	spells.h	/^ASPELL(spell_teleport);$/;"	v
spell_type	spells.h	/^   int spell_type;$/;"	m	struct:spell_info_type
spell_unholy_vengeance	spells.h	/^ASPELL(spell_unholy_vengeance);$/;"	v
spell_wear_off_msg	constants.c	/^const char *spell_wear_off_msg[] = $/;"	v
spello	spell_parser.c	/^void spello(int spl, const char *name, int max_mana, int min_mana,$/;"	f
spells	clan.h	/^  int spells[5];                        \/* Clan Spells^           *\/$/;"	m	struct:clan_rec
spells_to_learn	structs.h	/^   int spells_to_learn;		\/* How many can you learn yet this level*\/$/;"	m	struct:player_special_data_saved
spesh_who	structs.h	/^	char spesh_who[20];             \/* Special Who Entry                 *\/$/;"	m	struct:primal_extend_data
spring_trap	spec_procs.c	/^int spring_trap(struct char_data *ch, struct obj_data *obj)$/;"	f
sprintascii	genwld.c	/^int sprintascii(char *out, bitvector_t bits)$/;"	f
sprintbit	utils.c	/^void sprintbit(bitvector_t bitvector, const char *names[], char *result)$/;"	f
sprintbits	dg_olc.c	/^void sprintbits(int data, char *dest)$/;"	f
sprinttype	utils.c	/^void sprinttype(int type, const char *names[], char *result)$/;"	f
stack_data	shop.h	/^struct stack_data {$/;"	s
start_change_command	zedit.c	/^int start_change_command(struct descriptor_data *d, int pos)$/;"	f
start_world	structs.h	/^	ubyte start_world;              \/* The world the player is loaded in *\/$/;"	m	struct:primal_extend_data
stat_costs	constants.c	/^cpp_extern const int stat_costs[25] = {$/;"	v
stat_mods	constants.c	/^cpp_extern const float stat_mods[25] = {$/;"	v
stat_names	constants.c	/^const char *stat_names[] =$/;"	v
stat_points	structs.h	/^	int stat_points;$/;"	m	struct:primal_extend_data
stat_pool	structs.h	/^   ubyte stat_pool;		\/* Number of raw stats that can be trained *\/$/;"	m	struct:player_special_data_saved
state	reports.h	/^    int state;                  \/\/ Report adding\/editing state - current state $/;"	m	class:Report
state	reports.h	/^  int state;                  \/\/ Current status on report - see REPORT_STATE_XXX$/;"	m	struct:report_file_elem
stop_assisters	utils.c	/^void stop_assisters(struct char_data *ch)$/;"	f
stop_assisting	utils.c	/^void stop_assisting(struct char_data * ch)$/;"	f
stop_fighting	fight.c	/^void stop_fighting(struct char_data * ch)$/;"	f
stop_follower	utils.c	/^void stop_follower(struct char_data * ch)$/;"	f
stop_hunters	graph.c	/^void stop_hunters(struct char_data *ch)$/;"	f
stop_hunting	graph.c	/^void stop_hunting(struct char_data *ch)$/;"	f
stop_snooping	act.wizard.c	/^void stop_snooping(struct char_data * ch)$/;"	f
storage	oasis.h	/^  char *storage; \/* for holding commands etc.. *\/$/;"	m	struct:oasis_olc_data
store_mail	mail.c	/^void store_mail(long to, long from, char *message_pointer)$/;"	f
store_to_char	db.c	/^void store_to_char(struct char_file_u * st, struct char_data * ch)$/;"	f
str	spells.h	/^   sh_int str[NUM_CLASSES];$/;"	m	struct:spell_info_type
str	structs.h	/^   char	**str;			\/* for the modify-str system		*\/$/;"	m	struct:descriptor_data
str	structs.h	/^   sbyte str;$/;"	m	struct:char_ability_data
str_add	structs.h	/^   sbyte str_add;      \/* 000 - 100 if strength 18             *\/$/;"	m	struct:char_ability_data
str_app	constants.c	/^cpp_extern const struct str_app_type str_app[] = {$/;"	v
str_app_type	structs.h	/^struct str_app_type$/;"	s
str_cmp	utils.c	/^int str_cmp(const char *arg1, const char *arg2)$/;"	f
str_dup	utils.c	/^char *str_dup(const char *source)$/;"	f
str_str	dg_scripts.c	/^char *str_str(char *cs, char *ct)$/;"	f
str_udup	genolc.c	/^char *str_udup(const char *txt)$/;"	f
strdisplen	colour.c	/^int strdisplen(const char *string)$/;"	f
string_add	modify.c	/^void string_add(struct descriptor_data *d, char *str)$/;"	f
string_fields	modify.c	/^const char *string_fields[] =$/;"	v
string_write	modify.c	/^void string_write(struct descriptor_data *d, char **writeto, size_t len, long mailto, void *data)$/;"	f
strip_cr	genolc.c	/^void strip_cr(char *buffer)$/;"	f
strn_cmp	utils.c	/^int strn_cmp(const char *arg1, const char *arg2, int n)$/;"	f
sub_write	dg_comm.c	/^void sub_write(char *arg, char_data *ch, byte find_invis, int targets)$/;"	f
sub_write_to_char	dg_comm.c	/^void sub_write_to_char(char_data *ch, char *tokens[],$/;"	f
subcmd	dg_objcmd.c	/^   int subcmd;$/;"	m	struct:obj_command_info	file:
subcmd	dg_wldcmd.c	/^    int        subcmd;$/;"	m	struct:wld_command_info	file:
subcmd	interpreter.h	/^   int	subcmd;$/;"	m	struct:command_info
sunlight	structs.h	/^   int	sunlight;	\/* And how much sun. *\/$/;"	m	struct:weather_data
syllable	spell_parser.c	/^struct syllable {$/;"	s	file:
syls	spell_parser.c	/^struct syllable syls[] = {$/;"	v
tag	structs.h	/^    char tag[10];$/;"	m	class:ReleaseInfo
tail	db.h	/^   struct reset_q_element *tail;$/;"	m	struct:reset_q_type
tail	structs.h	/^   struct txt_block *tail;$/;"	m	struct:txt_q
talks	structs.h	/^   bool talks[MAX_TONGUE];	\/* PC s Tongues 0 for NPC		*\/$/;"	m	struct:player_special_data_saved
tardis	spec_assign.c	/^  SPECIAL(tardis);$/;"	v
targets	spells.h	/^   int targets;         \/* See below for use with TAR_XXX  *\/$/;"	m	struct:spell_info_type
taxrate	clan.h	/^  ubyte taxrate;                        \/* Clan Taxrate           *\/$/;"	m	struct:clan_rec
tedit_string_cleanup	tedit.c	/^void tedit_string_cleanup(struct descriptor_data *d, int terminator)$/;"	f
telcmds	telnet.h	/^char *telcmds[] = {$/;"	v
telopts	telnet.h	/^char *telopts[NTELOPTS+1] = {$/;"	v
temper1	shop.h	/^   int	 temper1;		\/* How does keeper react if no money	*\/$/;"	m	struct:shop_data
templevel	spells.h	/^   int templevel;$/;"	m	struct:spell_info_type
test_magic	comm.c	241;"	d	file:
text	oasis.c	/^  const char *text;$/;"	m	struct:olc_scmd_info_t	file:
text	structs.h	/^   char	*text;$/;"	m	struct:txt_block
text_processed	dg_scripts.c	/^int text_processed(char *field, char *subfield, struct trig_var_data *vd,$/;"	f
thaco	class.c	/^int thaco(struct char_data *ch, struct char_data *vict)$/;"	f
thaco_ac	constants.c	/^cpp_extern const int thaco_ac[LVL_IMMORT+1][NUM_CLASSES] =$/;"	v
theWhoList	act.informative.c	/^struct char_data *theWhoList[500];$/;"	v
thief	spec_procs.c	/^SPECIAL(thief);$/;"	v
thrower	spec_assign.c	/^  SPECIAL(thrower);$/;"	v
thrower	spec_procs.c	/^SPECIAL(thrower);$/;"	v
tics	comm.c	/^int tics = 0;			\/* for extern checkpointing *\/$/;"	v
tim	castle.c	/^SPECIAL(tim);$/;"	v
time	structs.h	/^   int	time;$/;"	m	struct:rent_info
time	structs.h	/^   struct time_data time;  \/* PC's AGE in days                 *\/$/;"	m	struct:char_player_data
time_data	structs.h	/^struct time_data$/;"	s
time_info	db.c	/^struct time_info_data time_info;\/* the infomation about the time    *\/$/;"	v
time_info_data	structs.h	/^struct time_info_data$/;"	s
time_remaining	dg_event.h	/^  int time_remaining;$/;"	m	struct:event_info
time_taken	structs.h	/^  struct time_info_data time_taken;	$/;"	m	struct:event_data
timeadd	comm.c	/^void timeadd(struct timeval *rslt, struct timeval *a, struct timeval *b)$/;"	f
timediff	comm.c	/^void timediff(struct timeval *rslt, struct timeval *a, struct timeval *b)$/;"	f
timer	structs.h	/^   int	timer;			\/* Timer for update			  *\/$/;"	m	struct:char_special_data
timer	structs.h	/^   int	timer;		\/* Timer for object                 *\/$/;"	m	struct:obj_flag_data
timer	structs.h	/^   int	timer;$/;"	m	struct:obj_file_elem
timer_bits	constants.c	/^const char *timer_bits[] = $/;"	v
timer_from_char	handler.c	/^void timer_from_char(struct char_data * ch, int type)$/;"	f
timer_from_obj	handler.c	/^void timer_from_obj(struct obj_data * obj, int type) {$/;"	f
timer_new	handler.c	/^struct timer_type *timer_new(int timertype) {$/;"	f
timer_otrigger	dg_triggers.c	/^void timer_otrigger(struct obj_data *obj)$/;"	f
timer_remove_char	handler.c	/^void timer_remove_char(struct char_data * ch, struct timer_type *timer)$/;"	f
timer_remove_obj	handler.c	/^void timer_remove_obj(struct obj_data *obj, struct timer_type *timer)$/;"	f
timer_to_char	handler.c	/^void timer_to_char(struct char_data * ch, struct timer_type *timer)$/;"	f
timer_to_obj	handler.c	/^void timer_to_obj(struct obj_data * obj, struct timer_type *timer)$/;"	f
timer_type	structs.h	/^struct timer_type$/;"	s
timer_types	constants.c	/^const char *timer_types[] =$/;"	v
timer_use_char	handler.c	/^int timer_use_char(struct char_data *ch, int type) {$/;"	f
timer_use_obj	handler.c	/^int timer_use_obj(struct obj_data *obj, int type) {$/;"	f
timers	structs.h	/^   struct timer_type *timers;     \/* DM - The timers attached           *\/$/;"	m	struct:char_data
timers	structs.h	/^   struct timer_type *timers;     \/* Timers affecting item	      *\/$/;"	m	struct:obj_data
timers	structs.h	/^   struct timer_type timers[MAX_TIMERS];$/;"	m	struct:char_file_u
times_message	shop.c	/^char *times_message(struct obj_data * obj, char *name, int num)$/;"	f
timetogame	structs.h	/^        int timetogame;                 \/\/ State of race$/;"	m	struct:game_data
tin_man	spec_assign.c	/^  SPECIAL(tin_man);$/;"	v
titan	fight.c	/^SPECIAL(titan);$/;"	v
titan	spec_assign.c	/^  SPECIAL(titan);$/;"	v
titansuit	spec_assign.c	/^  SPECIAL(titansuit);$/;"	v
title	structs.h	/^   char	*title;        \/* PC \/ NPC's title                     *\/$/;"	m	struct:char_player_data
title	structs.h	/^   char	title[MAX_TITLE_LENGTH+1];$/;"	m	struct:char_file_u
title_f	structs.h	/^   char	*title_f;$/;"	m	struct:title_type
title_m	structs.h	/^   char	*title_m;$/;"	m	struct:title_type
title_type	structs.h	/^struct title_type$/;"	s
to	mail.h	/^   long to;			\/* idnum of mail's recipient		*\/$/;"	m	struct:header_data_type
toFileElem	reports.cpp	/^struct report_file_elem Report::toFileElem()$/;"	f	class:Report
toFileElem	reports.cpp	/^struct reportchange_file_elem ReportChange::toFileElem()$/;"	f	class:ReportChange
toObj	corpses.cpp	/^struct obj_data *Corpse::toObj()$/;"	f	class:Corpse
toState	reports.h	/^    int toState;                \/\/ The new state $/;"	m	class:ReportChange
toState	reports.h	/^  int toState;          \/\/ The new state$/;"	m	struct:reportchange_file_elem
toType	reports.h	/^    int toType;                 \/\/ The new type$/;"	m	class:ReportChange
toType	reports.h	/^  int toType;           \/\/ The new type$/;"	m	struct:reportchange_file_elem
toUpper	utils.c	/^char *toUpper(char *oStr)$/;"	f
to_room	structs.h	/^   room_rnum to_room;		\/* Where direction leads (NOWHERE)	*\/$/;"	m	struct:room_direction_data
to_upper	spec_procs.c	/^void to_upper(char *s)$/;"	f
toboggan	spec_assign.c	/^  SPECIAL(toboggan);$/;"	v
todam	structs.h	/^   sh_int todam;    \/* Damage Bonus\/Penalty                *\/$/;"	m	struct:str_app_type
toggle_display	act.informative.c	/^void toggle_display(struct char_data *ch, struct char_data *vict)$/;"	f
tohit	structs.h	/^   sh_int tohit;    \/* To Hit (THAC0) Bonus\/Penalty        *\/$/;"	m	struct:str_app_type
tom	castle.c	/^SPECIAL(tom);$/;"	v
top	db.h	/^   room_vnum top;           \/* upper limit for rooms in this zone *\/$/;"	m	struct:zone_data
top	shop.c	/^int top(struct stack_data * stack)$/;"	f
topChangeNum	reports.h	/^    int topChangeNum;$/;"	m	class:ReportList
topReportNum	reports.h	/^    int topReportNum;$/;"	m	class:ReportList
top_idnum	db.c	/^long top_idnum = 0;		\/* highest idnum in use		 *\/$/;"	v
top_of_helpt	db.c	/^int top_of_helpt = 0;		\/* top of help index table	 *\/$/;"	v
top_of_mobt	db.c	/^mob_rnum top_of_mobt = 0;	\/* top of mobile index table	 *\/$/;"	v
top_of_objt	db.c	/^obj_rnum top_of_objt = 0;	\/* top of object index table	 *\/$/;"	v
top_of_p_file	db.c	/^int top_of_p_file = 0;		\/* ref of size of p file	 *\/$/;"	v
top_of_p_table	db.c	/^int top_of_p_table = 0;		\/* ref to top of table		 *\/$/;"	v
top_of_trigt	db.c	/^int top_of_trigt = 0;           \/* top of trigger index table    *\/$/;"	v
top_of_world	db.c	/^room_rnum top_of_world = 0;	\/* ref to top element of world	 *\/$/;"	v
top_of_zone_table	db.c	/^zone_rnum top_of_zone_table = 0;\/* top element of zone tab	 *\/$/;"	v
top_shop	shop.c	/^int top_shop = -1;$/;"	v
top_shop_offset	genolc.c	/^int top_shop_offset = 0;$/;"	v
top_shop_offset	genolc.c	/^int top_shop_offset = 1;$/;"	v
total_mprogs	oasis.h	/^  int total_mprogs;$/;"	m	struct:oasis_olc_data
touch	utils.c	/^int touch(const char *path)$/;"	f
track_through_doors	config.c	/^char track_through_doors = YES;$/;"	v
trade_letters	shop.c	/^const char *trade_letters[] = {$/;"	v
trade_with	shop.c	/^int trade_with(struct obj_data * item, int shop_nr)$/;"	f
train_cost	utils.c	/^int train_cost(struct char_data *ch, int stat, int curr_value)$/;"	f
trainer	spec_assign.c	/^  SPECIAL(trainer);$/;"	v
training_master	castle.c	/^SPECIAL(training_master);$/;"	v
transaction_amt	shop.c	/^int transaction_amt(char *arg)$/;"	f
trap_desc	structs.h	/^  char trap_desc[9]; \/\/ "pit", "magic"$/;"	m	struct:trap_type
trap_type	structs.h	/^struct trap_type $/;"	s
trap_types	act.offensive.c	/^cpp_extern const struct trap_type trap_types[] = {$/;"	v
traps	structs.h	/^   sh_int traps;$/;"	m	struct:dex_skill_type
treasure	clan.h	/^  unsigned long treasure;               \/* Clan Treasury          *\/$/;"	m	struct:clan_rec
trgvar_in_room	dg_scripts.c	/^int trgvar_in_room(int vnum) {$/;"	f
trig	oasis.h	/^  struct trig_data *trig;$/;"	m	struct:oasis_olc_data
trig_data	dg_scripts.h	/^struct trig_data {$/;"	s
trig_data	dg_scripts.h	/^typedef struct trig_data trig_data;$/;"	t
trig_data_copy	dg_db_scripts.c	/^void trig_data_copy(trig_data *this_data, const trig_data *trg)$/;"	f
trig_data_free	dg_db_scripts.c	/^void trig_data_free(trig_data *this_data)$/;"	f
trig_data_init	dg_db_scripts.c	/^void trig_data_init(trig_data *this_data)$/;"	f
trig_index	db.c	/^struct index_data **trig_index; \/* index table for triggers      *\/$/;"	v
trig_list	dg_scripts.h	/^  struct trig_data *trig_list; \/* list of triggers           *\/$/;"	m	struct:script_data
trig_proto_list	structs.h	/^struct trig_proto_list$/;"	s
trig_types	dg_triggers.c	/^char *trig_types[] = {$/;"	v
trig_var_data	dg_scripts.h	/^struct trig_var_data {$/;"	s
trigedit_create_index	dg_olc.c	/^void trigedit_create_index(int znum, char *type)$/;"	f
trigedit_disp_menu	dg_olc.c	/^void trigedit_disp_menu(struct descriptor_data *d)$/;"	f
trigedit_disp_types	dg_olc.c	/^void trigedit_disp_types(struct descriptor_data *d)$/;"	f
trigedit_parse	dg_olc.c	/^void trigedit_parse(struct descriptor_data *d, char *arg)$/;"	f
trigedit_save	dg_olc.c	/^void trigedit_save(struct descriptor_data *d, zone_vnum vznum)$/;"	f
trigedit_setup_existing	dg_olc.c	/^void trigedit_setup_existing(struct descriptor_data *d, int rtrg_num)$/;"	f
trigedit_setup_new	dg_olc.c	/^void trigedit_setup_new(struct descriptor_data *d)$/;"	f
trigedit_string_cleanup	dg_olc.c	/^void trigedit_string_cleanup(struct descriptor_data *d, int terminator)$/;"	f
trigger	dg_scripts.c	/^  trig_data *trigger;$/;"	m	struct:wait_event_data	file:
trigger_list	dg_scripts.c	/^struct trig_data *trigger_list = NULL;  \/* all attached triggers *\/$/;"	v
trigger_position	oasis.h	/^  int trigger_position;$/;"	m	struct:oasis_olc_data
trigger_type	dg_scripts.h	/^    long trigger_type;                 \/* type of trigger (for bitvector) *\/$/;"	m	struct:trig_data
triples	spec_assign.c	/^  SPECIAL(triples);$/;"	v
triples1	spec_assign.c	/^  SPECIAL(triples1);$/;"	v
trivia_data	quest.h	/^struct trivia_data$/;"	s
trivia_response_data	quest.h	/^struct trivia_response_data$/;"	s
trivmaster	quest.h	/^  int trivmaster;$/;"	m	struct:trivia_data
trojan	spec_assign.c	/^  SPECIAL(trojan);$/;"	v
two_arguments	interpreter.c	/^char *two_arguments(char *argument, char *first_arg, char *second_arg)$/;"	f
txt	mail.h	/^   char	txt[DATA_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:data_block_type_d
txt	mail.h	/^   char	txt[HEADER_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:header_block_type_d
txt_block	structs.h	/^struct txt_block$/;"	s
txt_q	structs.h	/^struct txt_q$/;"	s
type	act.wizard.c	/^    const char type;$/;"	m	struct:set_struct	file:
type	db.h	/^   int	type;$/;"	m	struct:ban_list_element
type	dg_scripts.c	/^  int type;$/;"	m	struct:wait_event_data	file:
type	genolc.h	/^  int type;$/;"	m	struct:save_list_data
type	interpreter.h	/^   ubyte type;$/;"	m	struct:command_info
type	interpreter.h	/^  int type;$/;"	m	struct:alias_data
type	reports.h	/^    int type;                   \/\/ Type of report reported = see REPORT_TYPE_XXX$/;"	m	class:Report
type	reports.h	/^  int type;                   \/\/ Type of report reported = see REPORT_TYPE_XXX$/;"	m	struct:report_file_elem
type	shop.h	/^   int type;$/;"	m	struct:shop_buy_data
type	shop.h	/^   struct shop_buy_data *type;	\/* Which items to trade			*\/$/;"	m	struct:shop_data
type	structs.h	/^        int type;                       \/\/ Type of bet -- long, short, medium(default)$/;"	m	struct:game_item
type	structs.h	/^   sh_int type;          \/* The type of spell that caused this      *\/$/;"	m	struct:affected_type
type	structs.h	/^  int type;$/;"	m	struct:mob_prog_data
type	structs.h	/^  sh_int type;				\/\/ Type of event$/;"	m	struct:event_data
type	structs.h	/^  sh_int type;$/;"	m	struct:timer_type
type_flag	structs.h	/^   byte type_flag;     \/* Type of item                         *\/$/;"	m	struct:obj_flag_data
types	dg_scripts.h	/^  long types;                          \/* bitvector of trigger types *\/$/;"	m	struct:script_data
ubyte	structs.h	/^typedef unsigned char		ubyte;$/;"	t
unapply_group_sneak	act.other.c	/^void unapply_group_sneak(struct char_data *ch, struct char_data *vict)$/;"	f
unequip_char	handler.c	/^struct obj_data *unequip_char(struct char_data * ch, int pos, bool manual)$/;"	f
unholiness	db.h	/^  int unholiness;$/;"	m	struct:imm_list_element
unholiness	structs.h	/^   ubyte unholiness;$/;"	m	struct:player_special_data_saved
unholiness_modifier	utils.c	/^double unholiness_modifier(struct char_data *ch)$/;"	f
unrestrict_game	comm.c	/^RETSIGTYPE unrestrict_game(int sig)$/;"	f
unused_spell	spell_parser.c	/^void unused_spell(int spl)$/;"	f
unused_spellname	spell_parser.c	/^const char *unused_spellname = "!UNUSED!"; \/* So we can get &unused_spellname *\/$/;"	v
update_char_objects	handler.c	/^void update_char_objects(struct char_data * ch)$/;"	f
update_mobile_strings	genmob.c	/^int update_mobile_strings(struct char_data *t, struct char_data *f)$/;"	f
update_obj_file	objsave.c	/^void update_obj_file(void)$/;"	f
update_object	handler.c	/^void update_object(struct obj_data * obj, int use)$/;"	f
update_objects	genobj.c	/^int update_objects(struct obj_data *refobj)$/;"	f
update_pos	fight.c	/^void update_pos(struct char_data * victim)$/;"	f
update_questlist	utils.c	/^void update_questlist(struct char_data *vict, int qitemno)$/;"	f
use_autowiz	config.c	/^char use_autowiz = YES;$/;"	v
user_data	structs.h	/^struct user_data$/;"	s
user_list	comm.c	/^struct user_data *user_list = NULL; \/* master user list *\/$/;"	v
usersOnline	structs.h	/^    int usersOnline;$/;"	m	class:GameInfo
uses	structs.h	/^  sh_int uses;$/;"	m	struct:timer_type
ush_int	structs.h	/^typedef unsigned short int	ush_int;$/;"	t
using_improved_editor	improved-edit.h	8;"	d
valid_hunt	graph.c	/^struct hunt_data *valid_hunt(struct char_data *ch)$/;"	f
valid_mob	balance.c	/^long valid_mob(struct char_data *mob)$/;"	f
valid_obj	balance.c	/^long valid_obj(struct obj_data *obj)$/;"	f
value	dg_scripts.h	/^  char *value;                         \/* value of variable *\/$/;"	m	struct:trig_var_data
value	oasis.h	/^  int value;$/;"	m	struct:oasis_olc_data
value	structs.h	/^   int	value[NUM_OBJ_VAL_POSITIONS];$/;"	m	struct:obj_file_elem
value	structs.h	/^   int value[NUM_OBJ_VAL_POSITIONS];  \/* Values of the item (see list)        *\/$/;"	m	struct:obj_flag_data
vampire	spec_assign.c	/^  SPECIAL(vampire);  \/* vampire and bat that turns into vampire proc *\/$/;"	v
var_list	dg_scripts.h	/^    struct trig_var_data *var_list;    \/* list of local vars for trigger  *\/$/;"	m	struct:trig_data
var_subst	dg_scripts.c	/^void var_subst(void *go, struct script_data *sc, trig_data *trig,$/;"	f
vict_found	act.social.c	/^  char *vict_found;$/;"	m	struct:social_messg	file:
victim	structs.h	/^  struct char_data *victim;$/;"	m	struct:hunt_data
victim_msg	structs.h	/^   char	*victim_msg;    \/* message to victim   *\/$/;"	m	struct:msg_type
violence_check	spell_parser.c	/^bool violence_check(struct char_data *ch, struct char_data *vict, int skillnum)$/;"	f
violent	spells.h	/^   byte violent;$/;"	m	struct:spell_info_type
virus	spec_assign.c	/^  SPECIAL(virus);$/;"	v
vnum	boards.h	/^   obj_vnum vnum;	\/* vnum of this board *\/$/;"	m	struct:board_info_type
vnum	house.h	/^   room_vnum vnum;		\/* vnum of this house		*\/$/;"	m	struct:house_control_rec
vnum	shop.h	/^   room_vnum vnum;		\/* Virtual number of this shop		*\/$/;"	m	struct:shop_data
vnum	structs.h	/^    int vnum;$/;"	m	class:ObjMaterialClass
vnum	structs.h	/^    int vnum;$/;"	m	class:ObjProductClass
vnum	structs.h	/^   sh_int	vnum;	\/* virtual number of this mob\/obj		*\/$/;"	m	struct:index_data
vnum	structs.h	/^  int vnum;                             \/* vnum of the trigger   *\/$/;"	m	struct:trig_proto_list
vnum	structs.h	/^  obj_vnum vnum;$/;"	m	struct:quest_obj_data
vnum_mobile	db.c	/^int vnum_mobile(char *searchname, struct char_data * ch)$/;"	f
vnum_object	db.c	/^int vnum_object(char *searchname, struct char_data * ch)$/;"	f
vo	structs.h	/^  void *vo;$/;"	m	struct:mob_prog_act_list
vote_level	constants.c	/^int vote_level = 10;$/;"	v
vznum	shop.h	/^   zone_vnum vznum;             \/* Virtual zone number of this shop     *\/$/;"	m	struct:shop_data
vznum	structs.h	/^   zone_vnum    vznum;  \/* virtual zone number of this mob.obj          *\/$/;"	m	struct:index_data
wait	structs.h	/^   int wait;				 \/* wait for how many loops	  *\/$/;"	m	struct:char_data
wait_event	dg_scripts.h	/^    struct event_info *wait_event;     \/* event to pause the trigger      *\/$/;"	m	struct:trig_data
wait_event_data	dg_scripts.c	/^struct wait_event_data {$/;"	s	file:
warrior	spec_assign.c	/^  SPECIAL(warrior);$/;"	v
warrior1	spec_assign.c	/^  SPECIAL(warrior1);$/;"	v
was_in_room	structs.h	/^   room_rnum was_in_room;		 \/* location for linkdead people  *\/$/;"	m	struct:char_data
watch_timer	spec_assign.c	/^  SPECIAL(watch_timer); \/\/ Artus> Watch Ticker.$/;"	v
wear_bits	constants.c	/^const char *wear_bits[] =$/;"	v
wear_flags	structs.h	/^   int \/*bitvector_t*\/ wear_flags;     \/* Where you can wear it        *\/$/;"	m	struct:obj_flag_data
wear_message	act.item.c	/^void wear_message(struct char_data * ch, struct obj_data * obj, int where)$/;"	f
wear_otrigger	dg_triggers.c	/^int wear_otrigger(obj_data *obj, char_data *actor, int where)$/;"	f
wear_positions	constants.c	/^cpp_extern const int wear_positions[] = $/;"	v
weather_and_time	weather.c	/^void weather_and_time(int mode)$/;"	f
weather_change	weather.c	/^void weather_change(void)$/;"	f
weather_data	structs.h	/^struct weather_data$/;"	s
weather_info	db.c	/^struct weather_data weather_info;	\/* the infomation about the weather *\/$/;"	v
webpage	structs.h	/^   char *webpage;	\/* Webpage *\/$/;"	m	struct:char_player_data
webpage	structs.h	/^   char webpage[MAX_INPUT_LENGTH + 1];$/;"	m	struct:char_file_u
weekdays	constants.c	/^const char *weekdays[] =$/;"	v
weight	corpses.h	/^    int weight;$/;"	m	class:Corpse
weight	structs.h	/^   int	weight;$/;"	m	struct:obj_file_elem
weight	structs.h	/^   ubyte weight;       \/* PC \/ NPC's weight                    *\/$/;"	m	struct:char_player_data
weight	structs.h	/^   ubyte weight;$/;"	m	struct:char_file_u
weight	structs.h	/^  int	weight;		\/* Weigt what else                  *\/$/;"	m	struct:obj_flag_data
weight_change_object	act.item.c	/^void weight_change_object(struct obj_data * obj, int weight)$/;"	f
werewolf	spec_assign.c	/^  SPECIAL(werewolf); \/* werewolf of haven proc for both changer and wolf *\/$/;"	v
where	constants.c	/^const char *where[] =$/;"	v
wield_w	structs.h	/^   sh_int wield_w;  \/* Maximum weight that can be wielded  *\/$/;"	m	struct:str_app_type
wimp_level	structs.h	/^   int wimp_level;		\/* Wimpy Level.. Lets use an int now. *\/  $/;"	m	struct:player_special_data_saved
wind_summon	spec_assign.c	/^  SPECIAL(wind_summon);$/;"	v
wis	spells.h	/^   sh_int wis[NUM_CLASSES];$/;"	m	struct:spell_info_type
wis	structs.h	/^   sbyte wis;$/;"	m	struct:char_ability_data
wis_app	constants.c	/^cpp_extern const struct wis_app_type wis_app[] = {$/;"	v
wis_app_type	structs.h	/^struct wis_app_type$/;"	s
with_who	shop.h	/^   int	 with_who;		\/* Who does the shop trade with?	*\/$/;"	m	struct:shop_data
wizlist	db.c	/^char *wizlist = NULL;		\/* list of higher gods		 *\/$/;"	v
wld_cmd_info	dg_wldcmd.c	/^const struct wld_command_info wld_cmd_info[] = {$/;"	v
wld_command_info	dg_wldcmd.c	/^struct wld_command_info {$/;"	s	file:
wld_command_interpreter	dg_wldcmd.c	/^void wld_command_interpreter(room_data *room, char *argument)$/;"	f
wld_log	dg_wldcmd.c	/^void wld_log(room_data *room, char *msg)$/;"	f
word_check	dg_triggers.c	/^int word_check(char *str, char *wordlist)$/;"	f
world	db.c	/^struct room_data *world = NULL;	\/* array of rooms		 *\/$/;"	v
world	db.h	/^   int  world;              \/* what world the zone is in - DM     *\/$/;"	m	struct:zone_data
world_activity	mobact.c	/^void world_activity(void)$/;"	f
world_entry	structs.h	/^	int world_entry[NUM_WORLDS];$/;"	m	struct:primal_extend_data
world_names	constants.c	/^const char *world_names[] =$/;"	v
world_start_room	config.c	/^int world_start_room[NUM_WORLDS] = {1115, 13235, 22031};$/;"	v
worn_by	structs.h	/^   struct char_data *worn_by;	  \/* Worn by?			      *\/$/;"	m	struct:obj_data
worn_on	corpses.h	/^    sh_int worn_on;                $/;"	m	class:Corpse
worn_on	structs.h	/^   sh_int worn_on;		  \/* Worn where?		      *\/$/;"	m	struct:obj_data
worship_points	structs.h	/^   long	worship_points;		\/* player's worship points *\/$/;"	m	struct:player_special_data_saved
write	comm.c	1828;"	d	file:
write	corpses.cpp	/^void Contain::write() {$/;"	f	class:Contain
write	corpses.cpp	/^void Corpse::write() {$/;"	f	class:Corpse
write	corpses.cpp	/^void CorpseData::write() {$/;"	f	class:CorpseData
writeChange	reports.cpp	/^void ReportList::writeChange(struct reportchange_file_elem reportchange)$/;"	f	class:ReportList
writeReport	reports.cpp	/^void ReportList::writeReport(struct report_file_elem report)$/;"	f	class:ReportList
write_aliases	alias.c	/^void write_aliases(struct char_data *ch)$/;"	f
write_auction_file	utils.c	/^void write_auction_file(void)$/;"	f
write_ban_list	ban.c	/^void write_ban_list(void)$/;"	f
write_extra	structs.h	/^   int   write_extra;           \/* Used for editor.. Vnum \/ Rnum stores *\/$/;"	m	struct:player_special_data
write_lvl	boards.h	/^   int	write_lvl;	\/* min level to write messages on this board *\/$/;"	m	struct:board_info_type
write_mobile_espec	genmob.c	/^int write_mobile_espec(mob_vnum mvnum, struct char_data *mob, FILE *fd)$/;"	f
write_mobile_mobprog	genmob.c	/^int write_mobile_mobprog(mob_vnum mvnum, struct char_data *mob, FILE *fd)$/;"	f
write_mobile_record	genmob.c	/^int write_mobile_record(mob_vnum mvnum, struct char_data *mob, FILE *fd)$/;"	f
write_remorts	interpreter.c	/^void write_remorts(struct descriptor_data *desc, char *writeto) {$/;"	f
write_to_descriptor	comm.c	/^int write_to_descriptor(socket_t desc, const char *txt)$/;"	f
write_to_file	mail.c	/^void write_to_file(void *buf, int size, long filepos)$/;"	f
write_to_output	comm.c	/^void write_to_output(const char *txt, struct descriptor_data *t)$/;"	f
write_to_q	comm.c	/^void write_to_q(const char *txt, struct txt_q *queue, int aliased)$/;"	f
write_type	structs.h	/^   ubyte write_type;            \/* Used for editor stuff - ARTUS        *\/$/;"	m	struct:player_special_data
wtrig_types	dg_triggers.c	/^char *wtrig_types[] = {$/;"	v
xEOF	telnet.h	61;"	d
xmas_tree	spec_assign.c	/^  SPECIAL(xmas_tree);$/;"	v
year	structs.h	/^   sh_int year;$/;"	m	struct:time_info_data
yel	oasis.c	/^const char *nrm, *grn, *cyn, *yel;$/;"	v
zedit_disp_arg1	zedit.c	/^void zedit_disp_arg1(struct descriptor_data *d)$/;"	f
zedit_disp_arg2	zedit.c	/^void zedit_disp_arg2(struct descriptor_data *d)$/;"	f
zedit_disp_arg3	zedit.c	/^void zedit_disp_arg3(struct descriptor_data *d)$/;"	f
zedit_disp_comtype	zedit.c	/^void zedit_disp_comtype(struct descriptor_data *d)$/;"	f
zedit_disp_flag_menu	zedit.c	/^void zedit_disp_flag_menu(struct descriptor_data *d) {$/;"	f
zedit_disp_menu	zedit.c	/^void zedit_disp_menu(struct descriptor_data *d)$/;"	f
zedit_disp_world_menu	zedit.c	/^void zedit_disp_world_menu(struct descriptor_data *d)$/;"	f
zedit_new_zone	zedit.c	/^void zedit_new_zone(struct char_data *ch, int vzone_num)$/;"	f
zedit_parse	zedit.c	/^void zedit_parse(struct descriptor_data *d, char *arg)$/;"	f
zedit_save_internally	zedit.c	/^void zedit_save_internally(struct descriptor_data *d)$/;"	f
zedit_save_to_disk	zedit.c	/^void zedit_save_to_disk(int zone)$/;"	f
zedit_sect_all	zedit.c	/^void zedit_sect_all(struct char_data *ch, int new_sect)$/;"	f
zedit_setup	zedit.c	/^void zedit_setup(struct descriptor_data *d, int room_num)$/;"	f
zflag	db.h	/^   int  zflag;              \/* zone-type for pk-zones, etc...     *\/$/;"	m	struct:zone_data
zombie	spec_assign.c	/^  SPECIAL(zombie); \/* zombie for anim dead spell *\/$/;"	v
zone	genolc.h	/^  int zone;$/;"	m	struct:save_list_data
zone	oasis.h	/^  struct zone_data *zone;$/;"	m	struct:oasis_olc_data
zone	structs.h	/^   zone_rnum zone;              \/* Room zone (for resetting)          *\/$/;"	m	struct:room_data
zone_allow	act.build.c	/^int zone_allow = TRUE;$/;"	v
zone_data	db.h	/^struct zone_data {$/;"	s
zone_edit	act.build.c	/^  int zone_edit;	\/* PC Zone being edited		*\/$/;"	m	struct:obuild_olc_data	file:
zone_flagbits	constants.c	/^const char *zone_flagbits[] =$/;"	v
zone_flags	act.build.c	/^  int zone_flags;	\/* PC Zone flags		*\/$/;"	m	struct:obuild_olc_data	file:
zone_num	oasis.h	/^  int zone_num;$/;"	m	struct:oasis_olc_data
zone_rnum	structs.h	/^typedef sh_int	zone_rnum;	\/* A zone's real (array index) number.	*\/$/;"	t
zone_table	db.c	/^struct zone_data *zone_table;	\/* zone table			 *\/$/;"	v
zone_to_reset	db.h	/^   zone_rnum zone_to_reset;            \/* ref to zone_data *\/$/;"	m	struct:reset_q_element
zone_update	db.c	/^void zone_update(void)$/;"	f
zone_vnum	structs.h	/^typedef sh_int	zone_vnum;     	\/* A virtual zone number.	*\/$/;"	t
~Burglary	structs.h	/^	~Burglary() { if (next != NULL) delete next; next = NULL; }$/;"	f	class:Burglary
~Contain	corpses.h	/^    ~Contain() {}                       $/;"	f	class:Contain
~Corpse	corpses.h	/^    ~Corpse() {}$/;"	f	class:Corpse
~CorpseData	corpses.cpp	/^CorpseData::~CorpseData() {$/;"	f	class:CorpseData
~ReleaseInfo	structs.h	/^    ~ReleaseInfo() {}$/;"	f	class:ReleaseInfo
~Report	reports.h	/^    ~Report() {};$/;"	f	class:Report
~ReportChange	reports.h	/^    ~ReportChange() {};       \/\/ Destructor - nothing to do$/;"	f	class:ReportChange
~ReportList	reports.h	/^    ~ReportList() {};      \/\/ Destructor - nothing to do$/;"	f	class:ReportList
