head     1.1;
branch   1.1.1;
access   ;
symbols  rel1:1.1.1.1 prim:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2000.01.26.14.31.02;  author michaeld;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2000.01.26.14.31.02;  author michaeld;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/* ************************************************************************
*   File: weather.c                                     Part of CircleMUD *
*  Usage: functions handling time and the weather                         *
*                                                                         *
*  All rights reserved.  See license.doc for complete information.        *
*                                                                         *
*  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
*  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
************************************************************************ */

#include <stdio.h>
#include <string.h>

#include "structs.h"
#include "utils.h"
#include "comm.h"
#include "handler.h"
#include "interpreter.h"
#include "db.h"
#include "spells.h"

extern struct time_info_data time_info;

void weather_and_time(int mode);
void another_hour(int mode);
void weather_change(void);


void weather_and_time(int mode)
{
  another_hour(mode);
  if (mode)
    weather_change();
}


void another_hour(int mode)
{
/* added for wolf/vamp reasons */
  ACMD(do_change);
  extern struct descriptor_data *descriptor_list;
  struct descriptor_data *i;

  extern char *moon_mesg[];

  time_info.hours++;

/* make moon change every 3 days at midday - Vader */
  if((time_info.day % 3 == 0) && (time_info.hours == 12)) {
    weather_info.moon++;
    if(weather_info.moon > MOON_FINAL_QTR)
      weather_info.moon = MOON_NONE;
    }

  if (mode) {
    switch (time_info.hours) {
    case 4:
      if(weather_info.moon != MOON_NONE) {
        sprintf(buf,"The %s moon slowly goes down over the horizon.\r\n",moon_mesg[weather_info.moon]);
        send_to_outdoor(buf);
        }
      break;
    case 5:
      weather_info.sunlight = SUN_RISE;
      send_to_outdoor("The sun rises in the east.\r\n");
/* this bit changes ppl back to normal from wolf/vamp at dawn - Vader */
      for(i = descriptor_list;i;i = i->next) {
        if(affected_by_spell(i->character,SPELL_CHANGED)) {
          affect_from_char(i->character,SPELL_CHANGED);
          send_to_char("You return to your original form.\r\n",i->character);
          if(PRF_FLAGGED(i->character,PRF_WOLF))
            sprintf(buf,"$n whimpers in pain as $e returns to $s original form.");
          else if(PRF_FLAGGED(i->character,PRF_VAMPIRE))
            sprintf(buf,"$n's fangs retract as $e returns to normal.");
          act(buf,FALSE,i->character,0,0,TO_ROOM);
          }
        }
      break;
    case 6:
      weather_info.sunlight = SUN_LIGHT;
      send_to_outdoor("The day has begun.\r\n");
      break;
    case 21:
      weather_info.sunlight = SUN_SET;
      send_to_outdoor("The sun slowly disappears in the west.\r\n");
      break;
    case 22:
      weather_info.sunlight = SUN_DARK;
      send_to_outdoor("The night has begun.\r\n");
      if(weather_info.moon == MOON_NONE)
        send_to_outdoor("It is a moonless night.\r\n");
      else if(weather_info.moon == MOON_FULL) {
        send_to_outdoor("The full moon shines brightly in the sky.\r\n");
/* if its a full moon force change the infected people */
/* JA Problem with NULL characters so wrapped this code with a check */
        for(i = descriptor_list;i;i = i->next) 
	{
          if (i->character)	
            if(PRF_FLAGGED(i->character,PRF_WOLF | PRF_VAMPIRE))
              do_change(i->character,"",0,0);
          }
        }
      else {
        sprintf(buf,"The %s moon rises into the sky.\r\n",
                moon_mesg[weather_info.moon]);
        send_to_outdoor(buf);
        }
      break;
    default:
      break;
    }
  }
  if (time_info.hours > 23) {	/* Changed by HHS due to bug ??? */
    time_info.hours -= 24;
    time_info.day++;

    if (time_info.day > 34) {
      time_info.day = 0;
      time_info.month++;

      if (time_info.month > 16) {
	time_info.month = 0;
	time_info.year++;
      }
    }
  }
}


void weather_change(void)
{
  int diff, change;
  if ((time_info.month >= 9) && (time_info.month <= 16))
    diff = (weather_info.pressure > 985 ? -2 : 2);
  else
    diff = (weather_info.pressure > 1015 ? -2 : 2);

  weather_info.change += (dice(1, 4) * diff + dice(2, 6) - dice(2, 6));

  weather_info.change = MIN(weather_info.change, 12);
  weather_info.change = MAX(weather_info.change, -12);

  weather_info.pressure += weather_info.change;

  weather_info.pressure = MIN(weather_info.pressure, 1040);
  weather_info.pressure = MAX(weather_info.pressure, 960);

  change = 0;

  switch (weather_info.sky) {
  case SKY_CLOUDLESS:
    if (weather_info.pressure < 990)
      change = 1;
    else if (weather_info.pressure < 1010)
      if (dice(1, 4) == 1)
	change = 1;
    break;
  case SKY_CLOUDY:
    if (weather_info.pressure < 970)
      change = 2;
    else if (weather_info.pressure < 990)
      if (dice(1, 4) == 1)
	change = 2;
      else
	change = 0;
    else if (weather_info.pressure > 1030)
      if (dice(1, 4) == 1)
	change = 3;

    break;
  case SKY_RAINING:
    if (weather_info.pressure < 970)
      if (dice(1, 4) == 1)
	change = 4;
      else
	change = 0;
    else if (weather_info.pressure > 1030)
      change = 5;
    else if (weather_info.pressure > 1010)
      if (dice(1, 4) == 1)
	change = 5;

    break;
  case SKY_LIGHTNING:
    if (weather_info.pressure > 1010)
      change = 6;
    else if (weather_info.pressure > 990)
      if (dice(1, 4) == 1)
	change = 6;

    break;
  default:
    change = 0;
    weather_info.sky = SKY_CLOUDLESS;
    break;
  }

  switch (change) {
  case 0:
    break;
  case 1:
    send_to_outdoor("The sky starts to get cloudy.\r\n");
    weather_info.sky = SKY_CLOUDY;
    break;
  case 2:
    send_to_outdoor("It starts to rain.\r\n");
    weather_info.sky = SKY_RAINING;
    break;
  case 3:
    send_to_outdoor("The clouds disappear.\r\n");
    weather_info.sky = SKY_CLOUDLESS;
    break;
  case 4:
    send_to_outdoor("Lightning starts to show in the sky.\r\n");
    weather_info.sky = SKY_LIGHTNING;
    break;
  case 5:
    send_to_outdoor("The rain stops.\r\n");
    weather_info.sky = SKY_CLOUDY;
    break;
  case 6:
    send_to_outdoor("The lightning stops.\r\n");
    weather_info.sky = SKY_RAINING;
    break;
  default:
    break;
  }
}
@


1.1.1.1
log
@Intial Import of Source
@
text
@@
